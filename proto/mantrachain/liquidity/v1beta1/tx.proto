syntax = "proto3";
package mantrachain.liquidity.v1beta1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "mantrachain/liquidity/v1beta1/liquidity.proto";
import "mantrachain/liquidity/v1beta1/params.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/liquidity/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreatePair defines a method for creating a pair
  rpc CreatePair(MsgCreatePair) returns (MsgCreatePairResponse);

  // UpdatePairSwapFee defines a method for creating a pair
  rpc UpdatePairSwapFee(MsgUpdatePairSwapFee) returns (MsgUpdatePairSwapFeeResponse);

  // CreatePool defines a method for creating a pool
  rpc CreatePool(MsgCreatePool) returns (MsgCreatePoolResponse);

  // CreateRangePool defines a method for creating a ranged pool
  rpc CreateRangedPool(MsgCreateRangedPool) returns (MsgCreateRangedPoolResponse);

  // Deposit defines a method for depositing coins to the pool
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);

  // Withdraw defines a method for withdrawing pool coin from the pool
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);

  // LimitOrder defines a method for making a limit order
  rpc LimitOrder(MsgLimitOrder) returns (MsgLimitOrderResponse);

  // MarketOrder defines a method for making a market order
  rpc MarketOrder(MsgMarketOrder) returns (MsgMarketOrderResponse);

  // MsgMMOrder defines a method for making a MM(market making) order
  rpc MMOrder(MsgMMOrder) returns (MsgMMOrderResponse);

  // CancelOrder defines a method for cancelling an order
  rpc CancelOrder(MsgCancelOrder) returns (MsgCancelOrderResponse);

  // CancelAllOrders defines a method for cancelling all orders
  rpc CancelAllOrders(MsgCancelAllOrders) returns (MsgCancelAllOrdersResponse);

  // CancelMMOrder defines a method for cancelling previously placed market making orders
  rpc CancelMMOrder(MsgCancelMMOrder) returns (MsgCancelMMOrderResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "mantrachain/x/liquidity/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreatePair defines an SDK message for creating a pair.
message MsgCreatePair {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "mantrachain/x/liquidity/MsgCreatePair";

  // creator specifies the bech32-encoded address that is the pair creator.
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // base_coin_denom specifies the base coin denom of the pair.
  string base_coin_denom = 2;

  // quote_coin_denom specifies the quote coin denom of the pair.
  string quote_coin_denom = 3;

  string swap_fee_rate = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];

  string pair_creator_swap_fee_ratio = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];
}

message MsgCreatePairResponse {}

// MsgUpdatePairSwapFee defines an SDK message for creating a pair.
message MsgUpdatePairSwapFee {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "mantrachain/x/liquidity/MsgUpdatePairSwapFee";

  // creator specifies the bech32-encoded address that is the pair creator.
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id.
  uint64 pair_id = 2;

  string swap_fee_rate = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];

  string pair_creator_swap_fee_ratio = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = true
  ];
}

message MsgUpdatePairSwapFeeResponse {}

// MsgCreatePool defines an SDK message for creating a pool.
message MsgCreatePool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "mantrachain/x/liquidity/MsgCreatePool";

  // creator specifies the bech32-encoded address that is the pool creator
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id.
  uint64 pair_id = 2;

  // deposit_coins specifies the amount of coins to deposit.
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// MsgCreatePoolResponse defines the Msg/CreatePool response type.
message MsgCreatePoolResponse {}

// MsgCreateRangedPool defines an SDK message for creating a ranged pool.
message MsgCreateRangedPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "mantrachain/x/liquidity/MsgCreateRangedPool";

  // creator specifies the bech32-encoded address that is the pool creator
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id.
  uint64 pair_id = 2;

  // deposit_coins specifies the amount of coins to deposit.
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  string min_price = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  string max_price = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  string initial_price = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// MsgCreateRangedPoolResponse defines the Msg/CreateRangedPool response type.
message MsgCreateRangedPoolResponse {}

// MsgDeposit defines an SDK message for depositing coins to the pool
message MsgDeposit {
  option (cosmos.msg.v1.signer) = "depositor";
  option (amino.name) = "mantrachain/x/liquidity/MsgDeposit";

  // depositor specifies the bech32-encoded address that makes a deposit to the pool
  string depositor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pool_id specifies the pool id
  uint64 pool_id = 2;

  // deposit_coins specifies the amount of coins to deposit.
  repeated cosmos.base.v1beta1.Coin deposit_coins = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// MsgDepositResponse defines the Msg/Deposit response type.
message MsgDepositResponse {}

// MsgWithdraw defines an SDK message for withdrawing pool coin from the pool
message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "withdrawer";
  option (amino.name) = "mantrachain/x/liquidity/MsgWithdraw";

  // withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
  string withdrawer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pool_id specifies the pool id
  uint64 pool_id = 2;

  // pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
  cosmos.base.v1beta1.Coin pool_coin = 3 [(gogoproto.nullable) = false];
}

// MsgWithdrawResponse defines the Msg/Withdraw response type.
message MsgWithdrawResponse {}

// MsgLimitOrder defines an SDK message for making a limit order
message MsgLimitOrder {
  option (cosmos.msg.v1.signer) = "orderer";
  option (amino.name) = "mantrachain/x/liquidity/MsgLimitOrder";

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // direction specifies the order direction(buy or sell)
  OrderDirection direction = 3;

  // offer_coin specifies the amount of coin the orderer offers
  cosmos.base.v1beta1.Coin offer_coin = 4 [(gogoproto.nullable) = false];

  // demand_coin_denom specifies the demand coin denom
  string demand_coin_denom = 5;

  // price specifies the order price
  string price = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // amount specifies the amount of base coin the orderer wants to buy or sell
  string amount = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // order_lifespan specifies the order lifespan
  google.protobuf.Duration order_lifespan = 8 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];
}

// MsgLimitOrderResponse defines the Msg/LimitOrder response type.
message MsgLimitOrderResponse {}

// MsgMarketOrder defines an SDK message for making a market order
message MsgMarketOrder {
  option (cosmos.msg.v1.signer) = "orderer";
  option (amino.name) = "mantrachain/x/liquidity/MsgMarketOrder";

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // direction specifies the order direction(buy or sell)
  OrderDirection direction = 3;

  // offer_coin specifies the amount of coin the orderer offers
  cosmos.base.v1beta1.Coin offer_coin = 4 [(gogoproto.nullable) = false];

  // demand_coin_denom specifies the demand coin denom
  string demand_coin_denom = 5;

  // amount specifies the amount of base coin the orderer wants to buy or sell
  string amount = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // order_lifespan specifies the order lifespan
  google.protobuf.Duration order_lifespan = 7 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];
}

// MsgMarketOrderResponse defines the Msg/MarketOrder response type.
message MsgMarketOrderResponse {}

// MsgMMOrder defines an SDK message for making a MM(market making) order.
message MsgMMOrder {
  option (cosmos.msg.v1.signer) = "orderer";
  option (amino.name) = "mantrachain/x/liquidity/MsgMMOrder";

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // max_sell_price specifies the maximum sell price
  string max_sell_price = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // min_sell_price specifies the minimum sell price
  string min_sell_price = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // sell_amount specifies the total amount of base coin of sell orders
  string sell_amount = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // max_buy_price specifies the maximum buy price
  string max_buy_price = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // min_buy_price specifies the minimum buy price
  string min_buy_price = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // buy_amount specifies the total amount of base coin of buy orders
  string buy_amount = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];

  // order_lifespan specifies the order lifespan
  google.protobuf.Duration order_lifespan = 9 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false
  ];
}

// MsgMMOrderResponse defines the Msg/MMOrder response type.
message MsgMMOrderResponse {}

// MsgCancelOrder defines an SDK message for cancelling an order
message MsgCancelOrder {
  option (cosmos.msg.v1.signer) = "orderer";
  option (amino.name) = "mantrachain/x/liquidity/MsgCancelOrder";

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id
  uint64 pair_id = 2;

  // order_id specifies the order id
  uint64 order_id = 3;
}

// MsgCancelOrderResponse defines the Msg/CancelOrder response type.
message MsgCancelOrderResponse {}

// MsgCancelAllOrders defines an SDK message for cancelling all orders
message MsgCancelAllOrders {
  option (cosmos.msg.v1.signer) = "orderer";
  option (amino.name) = "mantrachain/x/liquidity/MsgCancelAllOrders";

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_ids specifies pair ids to cancel orders
  repeated uint64 pair_ids = 2;
}

// MsgCancelAllOrdersResponse defines the Msg/CancelAllOrders response type.
message MsgCancelAllOrdersResponse {}

// MsgCancelMMOrder defines an SDK message for cancelling all market making orders
message MsgCancelMMOrder {
  option (cosmos.msg.v1.signer) = "orderer";
  option (amino.name) = "mantrachain/x/liquidity/MsgCancelMMOrder";

  // orderer specifies the bech32-encoded address that makes an order
  string orderer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // pair_id specifies the pair id to cancel orders
  uint64 pair_id = 2;
}

// MsgCancelMMOrderResponse defines the Msg/CancelMMOrder response type.
message MsgCancelMMOrderResponse {}
