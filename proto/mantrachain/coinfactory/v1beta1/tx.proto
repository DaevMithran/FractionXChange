syntax = "proto3";
package mantrachain.coinfactory.v1beta1;

import "amino/amino.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "mantrachain/coinfactory/v1beta1/params.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/coinfactory/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreateDenom
  rpc CreateDenom(MsgCreateDenom) returns (MsgCreateDenomResponse);
  // Mint
  rpc Mint(MsgMint) returns (MsgMintResponse);
  // Burn
  rpc Burn(MsgBurn) returns (MsgBurnResponse);
  // ChangeAdmin
  rpc ChangeAdmin(MsgChangeAdmin) returns (MsgChangeAdminResponse);
  // SetDenomMetadata
  rpc SetDenomMetadata(MsgSetDenomMetadata) returns (MsgSetDenomMetadataResponse);
  // ForceTransfer
  rpc ForceTransfer(MsgForceTransfer) returns (MsgForceTransferResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "mantrachain/x/coinfactory/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateDenom defines the message structure for the CreateDenom gRPC service
// method. It allows an account to create a new denom. It requires a sender
// address and a sub denomination. The (sender_address, sub_denomination) tuple
// must be unique and cannot be re-used.
//
// The resulting denom created is defined as
// <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
// originally set to be the creator, but this can be changed later. The token
// denom does not indicate the current admin.
message MsgCreateDenom {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "mantrachain/x/coinfactory/MsgCreateDenom";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // subdenom can be up to 44 "alphanumeric" characters long.
  string subdenom = 2;
}

// MsgCreateDenomResponse is the return value of MsgCreateDenom
// It returns the full string of the newly created denom
message MsgCreateDenomResponse {
  string new_token_denom = 1;
}

// MsgMint is the sdk.Msg type for allowing an admin account to mint
// more of a token.
message MsgMint {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "mantrachain/x/coinfactory/MsgMint";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  string mintToAddress = 3 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.nullable) = true
  ];
}

// MsgMintResponse
message MsgMintResponse {}

// MsgBurn is the sdk.Msg type for allowing an admin account to burn
// a token.
message MsgBurn {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "mantrachain/x/coinfactory/MsgBurn";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  string burnFromAddress = 3 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.nullable) = true
  ];
}

// MsgBurnResponse
message MsgBurnResponse {}

// MsgChangeAdmin is the sdk.Msg type for allowing an admin account to reassign
// adminship of a denom to a new account
message MsgChangeAdmin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "mantrachain/x/coinfactory/MsgChangeAdmin";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string denom = 2;
  string new_admin = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgChangeAdminResponse defines the response structure for an executed
// MsgChangeAdmin message.
message MsgChangeAdminResponse {}

// MsgForceTransfer is the sdk.Msg type for allowing an admin account to force transfer
message MsgForceTransfer {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "mantrachain/x/coinfactory/MsgForceTransfer";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
  string transferFromAddress = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string transferToAddress = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgForceTransferResponse
message MsgForceTransferResponse {}

// MsgSetDenomMetadata is the sdk.Msg type for allowing an admin account to set
// the denom's bank metadata
message MsgSetDenomMetadata {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "mantrachain/x/coinfactory/MsgSetDenomMetadata";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.bank.v1beta1.Metadata metadata = 2 [(gogoproto.nullable) = false];
}

// MsgSetDenomMetadataResponse defines the response structure for an executed
// MsgSetDenomMetadata message.
message MsgSetDenomMetadataResponse {}
