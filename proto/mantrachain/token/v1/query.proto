syntax = "proto3";
package mantrachain.token.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "mantrachain/token/v1/nft.proto";
import "mantrachain/token/v1/nft_collection.proto";
import "mantrachain/token/v1/params.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/token/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/params";
  }

  // NftCollection
  rpc NftCollection(QueryGetNftCollectionRequest) returns (QueryGetNftCollectionResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft-collection/{creator}/{id}";
  }
  // NftCollectionsByCreator
  rpc NftCollectionsByCreator(QueryGetNftCollectionsByCreatorRequest) returns (QueryGetNftCollectionsByCreatorResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft-collection/{creator}";
  }
  // AllNftCollections
  rpc AllNftCollections(QueryGetAllNftCollectionsRequest) returns (QueryGetAllNftCollectionsResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft-collection";
  }
  // Nft
  rpc Nft(QueryGetNftRequest) returns (QueryGetNftResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft/{collection_creator}/{collection_id}/{id}";
  }
  // NftApproved
  rpc NftApproved(QueryGetNftApprovedRequest) returns (QueryGetNftApprovedResponse) {
    option (google.api.http).get =
      "/mantrachain/token/v1/nft/approvals/"
      "{collection_creator}/{collection_id}/{id}";
  }
  // IsApprovedForAllNfts
  rpc IsApprovedForAllNfts(QueryGetIsApprovedForAllNftsRequest) returns (QueryGetIsApprovedForAllNftsResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft/approvals-all/{owner}/{operator}";
  }
  // AllCollectionNfts
  rpc AllCollectionNfts(QueryGetAllCollectionNftsRequest) returns (QueryGetAllCollectionNftsResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft/{collection_creator}/{collection_id}";
  }

  // Queries a list of SoulBondedNftsCollection items.
  rpc SoulBondedNftsCollection(QueryGetSoulBondedNftsCollectionRequest) returns (QueryGetSoulBondedNftsCollectionResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/soul_bonded_nfts_collection/{index}";
  }

  // Queries a list of RestrictedNftsCollection items.
  rpc RestrictedNftsCollection(QueryGetRestrictedNftsCollectionRequest) returns (QueryGetRestrictedNftsCollectionResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/restricted_nfts_collection/{index}";
  }

  // Queries a list of OpenedNftsCollection items.
  rpc OpenedNftsCollection(QueryGetOpenedNftsCollectionRequest) returns (QueryGetOpenedNftsCollectionResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/opened_nfts_collection/{index}";
  }

  // Queries a list of NftCollectionOwner items.
  rpc NftCollectionOwner(QueryGetNftCollectionOwnerRequest) returns (QueryGetNftCollectionOwnerResponse) {
    option (google.api.http).get = "/mantrachain/token/v1/nft_collection_owner/{index}";
  }

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryGetNftCollectionRequest
message QueryGetNftCollectionRequest {
  string creator = 1;
  string id = 2;
}

// QueryGetNftCollectionResponse
message QueryGetNftCollectionResponse {
  NftCollection nft_collection = 1;
}

// QueryGetIsApprovedForAllNftsRequest
message QueryGetIsApprovedForAllNftsRequest {
  string owner = 1;
  string operator = 2;
}

// QueryGetIsApprovedForAllNftsResponse
message QueryGetIsApprovedForAllNftsResponse {
  string operator = 1;
  bool approved = 2;
}

// QueryGetNftApprovedRequest
message QueryGetNftApprovedRequest {
  string collection_creator = 1;
  string collection_id = 2;
  string id = 3;
}

// QueryGetNftApprovedResponse
message QueryGetNftApprovedResponse {
  string collection_creator = 1;
  string collection_id = 2;
  string id = 3;
  repeated string approved = 4;
}

// QueryGetNftRequest
message QueryGetNftRequest {
  string collection_creator = 1;
  string collection_id = 2;
  string id = 4;
}

// QueryGetNftResponse
message QueryGetNftResponse {
  Nft nft = 1;
}

// QueryGetNftCollectionsByCreatorRequest
message QueryGetNftCollectionsByCreatorRequest {
  string creator = 1;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryGetNftCollectionsByCreatorResponse
message QueryGetNftCollectionsByCreatorResponse {
  string creator = 1;
  repeated NftCollection nft_collections = 2;
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

// QueryGetAllNftCollectionsRequest
message QueryGetAllNftCollectionsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryGetAllNftCollectionsResponse
message QueryGetAllNftCollectionsResponse {
  repeated NftCollection nft_collections = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAllCollectionNfts
message QueryGetAllCollectionNftsRequest {
  string collection_creator = 1;
  string collection_id = 2;

  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryAllCollectionNfts
message QueryGetAllCollectionNftsResponse {
  string collection_creator = 1;
  string collection_id = 2;
  repeated Nft nfts = 3;
  cosmos.base.query.v1beta1.PageResponse pagination = 4;
}

// QuerySoulBondedNftsCollection
message QueryGetSoulBondedNftsCollectionRequest {
  bytes index = 1;
}

// QueryGetSoulBondedNftsCollectionResponse
message QueryGetSoulBondedNftsCollectionResponse {
  bytes index = 1;
  bool soulBondedNftsCollection = 2;
}

// QueryGetRestrictedNftsCollectionRequest
message QueryGetRestrictedNftsCollectionRequest {
  bytes index = 1;
}

// QueryGetRestrictedNftsCollectionResponse
message QueryGetRestrictedNftsCollectionResponse {
  bytes index = 1;
  bool restrictedNftsCollection = 2;
}

// QueryGetOpenedNftsCollectionRequest
message QueryGetOpenedNftsCollectionRequest {
  bytes index = 1;
}

// QueryGetOpenedNftsCollectionResponse
message QueryGetOpenedNftsCollectionResponse {
  bytes index = 1;
  bool openedNftsCollection = 2;
}

// QueryGetNftCollectionOwnerRequest
message QueryGetNftCollectionOwnerRequest {
  bytes index = 1;
}

// QueryGetNftCollectionOwnerResponse
message QueryGetNftCollectionOwnerResponse {
  bytes index = 1;
  string nftCollectionOwner = 2;
}

// this line is used by starport scaffolding # 3
