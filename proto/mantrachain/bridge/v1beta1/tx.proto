syntax = "proto3";
package mantrachain.bridge.v1beta1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "mantrachain/bridge/v1beta1/params.proto";
import "mantrachain/bridge/v1beta1/bridged.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/bridge/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // CreateMultiBridged
  rpc CreateMultiBridged(MsgCreateMultiBridged)
      returns (MsgCreateMultiBridgedResponse);
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "mantrachain/x/bridge/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgCreateMultiBridged
message MsgCreateMultiBridged {
  option (cosmos.msg.v1.signer) = "input";
  option (amino.name) = "mantrachain/x/bridge/MsgCreateMultiBridged";

  Input input = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  repeated Output outputs = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
  repeated string ethTxHashes = 3;
}

// MsgCreateMultiBridgedResponse
message MsgCreateMultiBridgedResponse {}