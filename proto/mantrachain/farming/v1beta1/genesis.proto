syntax = "proto3";
package mantrachain.farming.v1beta1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "mantrachain/farming/v1beta1/params.proto";
import "mantrachain/farming/v1beta1/farming.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/farming/types";
option (gogoproto.equal_all) = true;

// GenesisState defines the farming module's genesis state.
message GenesisState {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  
  // params defines all the parameters of the module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  uint64 global_plan_id = 2;

  // plan_records defines the plan records used for genesis state
  repeated PlanRecord plan_records = 3 [(gogoproto.nullable) = false];
  repeated StakingRecord staking_records = 4
      [(gogoproto.nullable) = false];
  repeated QueuedStakingRecord queued_staking_records = 5
      [(gogoproto.nullable) = false];
  repeated HistoricalRewardsRecord historical_rewards_records = 6
      [(gogoproto.nullable) = false];
  repeated OutstandingRewardsRecord outstanding_rewards_records = 7
      [(gogoproto.nullable) = false];
  repeated UnharvestedRewardsRecord unharvested_rewards_records = 8
      [(gogoproto.nullable) = false];
  repeated CurrentEpochRecord current_epoch_records = 9
      [(gogoproto.nullable) = false];
  repeated TotalStakingsRecord total_stakings_records = 10
      [(gogoproto.nullable) = false];
  // reward_pool_coins specifies balance of the reward pool to be distributed in the plans
  // this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin reward_pool_coins = 11 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
  // last_epoch_time specifies the last executed epoch time of the plans
  google.protobuf.Timestamp last_epoch_time = 12
      [(gogoproto.stdtime) = true];
  // current_epoch_days specifies the epoch used when allocating farming rewards in end blocker
  uint32 current_epoch_days = 13;
}


// PlanRecord is used for import/export via genesis json.
message PlanRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // plan specifies the plan interface; it can be FixedAmountPlan or RatioPlan
  google.protobuf.Any plan = 1 [(gogoproto.nullable) = false, (cosmos_proto.accepts_interface) = "PlanI"];

  // farming_pool_coins specifies balance of the farming pool for the plan
  // this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin farming_pool_coins = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

// StakingRecord is used for import/export via genesis json.
message StakingRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1;
  string farmer = 2;
  Staking staking = 3 [(gogoproto.nullable) = false];
}

// QueuedStakingRecord is used for import/export via genesis json.
message QueuedStakingRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  google.protobuf.Timestamp end_time = 1
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  string staking_coin_denom = 2;
  string farmer = 3;
  QueuedStaking queued_staking = 4 [(gogoproto.nullable) = false];
}

// TotalStakingsRecord is used for import/export via genesis json.
message TotalStakingsRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1;
  // amount specifies total amount of the staking for the staking coin denom except queued staking
  string amount = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int", (gogoproto.nullable) = false];
  // staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
  // staking coin denom is stored this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

// HistoricalRewardsRecord is used for import/export via genesis json.
message HistoricalRewardsRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1;
  uint64 epoch = 2;
  HistoricalRewards historical_rewards = 3
      [(gogoproto.nullable) = false];
}

// OutstandingRewardsRecord is used for import/export via genesis json.
message OutstandingRewardsRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1;
  OutstandingRewards outstanding_rewards = 2
      [(gogoproto.nullable) = false];
}

message UnharvestedRewardsRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string farmer = 1;
  string staking_coin_denom = 2;
  UnharvestedRewards unharvested_rewards = 3
      [(gogoproto.nullable) = false];
}

// CurrentEpochRecord is used for import/export via genesis json.
message CurrentEpochRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1;
  uint64 current_epoch = 2;
}

