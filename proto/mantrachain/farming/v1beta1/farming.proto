syntax = "proto3";

package mantrachain.farming.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/farming/types";

// BasePlan defines a base plan type and contains the required fields
// for basic farming plan functionality. Any custom farming plan type must
// extend this type for additional functionality (for example, fixed amount plan, ratio
// plan).
message BasePlan {
  option (gogoproto.goproto_getters) = false;
  option (cosmos_proto.implements_interface) = "PlanI";

  // id specifies index of the farming plan
  uint64 id = 1;
  // name specifies the name for the plan
  string name = 2;
  // type specifies the plan type; type 0 is public and 1 is private
  // public plan must be created through governance proposal and private plan is
  // created by account
  PlanType type = 3;
  // farming_pool_address defines the bech32-encoded address of the farming pool
  string farming_pool_address = 4;
  // termination_address defines the Bech32-encoded address that terminates the plan
  // when the plan ends after the end time, the balance of the farming pool address
  // is transferred to the termination address
  string termination_address = 5;
  // staking_coin_weights specifies the coin weights for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coin_weights = 6 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 7 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 8 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false
  ];
  // terminated indicates whether the plan has been terminated or not
  bool terminated = 9;
  // last_distribution_time specifies the last time a distribution occurred
  google.protobuf.Timestamp last_distribution_time = 10 [(gogoproto.stdtime) = true];
  // distributed_coins specifies the total coins distributed by this plan
  repeated cosmos.base.v1beta1.Coin distributed_coins = 11 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// FixedAmountPlan defines a fixed amount plan that distributes a fixed amount
// of coins for every epoch.
message FixedAmountPlan {
  option (gogoproto.goproto_getters) = false;

  BasePlan base_plan = 1 [(gogoproto.embed) = true];

  // epoch_amount specifies the distributing amount for each epoch
  repeated cosmos.base.v1beta1.Coin epoch_amount = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// RatioPlan defines a plan that distributes to farmers by ratio
// distribution for every epoch day.
message RatioPlan {
  option (gogoproto.goproto_getters) = false;

  BasePlan base_plan = 1 [(gogoproto.embed) = true];
  // epoch_ratio specifies the distributing amount by ratio
  string epoch_ratio = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// PlanType enumerates the valid types of a plan.
enum PlanType {
  option (gogoproto.goproto_enum_prefix) = false;

  // PLAN_TYPE_UNSPECIFIED defines the default plan type.
  PLAN_TYPE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "PlanTypeNil"];
  // PLAN_TYPE_PUBLIC defines the public plan type.
  PLAN_TYPE_PUBLIC = 1 [(gogoproto.enumvalue_customname) = "PlanTypePublic"];
  // PLAN_TYPE_PRIVATE defines the private plan type.
  PLAN_TYPE_PRIVATE = 2 [(gogoproto.enumvalue_customname) = "PlanTypePrivate"];
}

// Staking defines a farmer's staking information.
message Staking {
  option (gogoproto.goproto_getters) = false;

  string amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  uint64 starting_epoch = 2;
}

// QueuedStaking defines staking that is waiting in a queue.
message QueuedStaking {
  option (gogoproto.goproto_getters) = false;

  string amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// TotalStakings defines the total staking amount for a staking coin denom.
message TotalStakings {
  option (gogoproto.goproto_getters) = false;

  string amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// HistoricalRewards defines the cumulative unit rewards for a given staking coin denom and an epoch number.
message HistoricalRewards {
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.DecCoin cumulative_unit_rewards = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// OutstandingRewards represents outstanding (un-withdrawn) rewards
// for a staking coin denom.
message OutstandingRewards {
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.DecCoin rewards = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// UnharvestedRewards represents unharvested rewards of a farmer for a
// staking coin denom, which increases when there was an automatic withdrawal
// of rewards due to changes in staked coin amount.
message UnharvestedRewards {
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.Coin rewards = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// AddressType enumerates the available types of a address.
enum AddressType {
  option (gogoproto.goproto_enum_prefix) = false;

  // the 32 bytes length address type of ADR 028.
  ADDRESS_TYPE_32_BYTES = 0 [(gogoproto.enumvalue_customname) = "AddressType32Bytes"];
  // the default 20 bytes length address type.
  ADDRESS_TYPE_20_BYTES = 1 [(gogoproto.enumvalue_customname) = "AddressType20Bytes"];
}
