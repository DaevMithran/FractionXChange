syntax = "proto3";

package mantrachain.marketmaker.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/MANTRA-Finance/mantrachain/x/marketmaker/types";

// Common parameters for market maker module
message Common {
  option (gogoproto.goproto_getters) = false;

  // Minimum ratio to maintain the tick order
  string min_open_ratio = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  // Minimum ratio of open amount to MinDepth
  string min_open_depth_ratio = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  // Maximum allowable consecutive blocks of outage
  uint32 max_downtime = 3;

  // Maximum allowable sum of blocks in an hour
  uint32 max_total_downtime = 4 ;

  // Minimum value of LiveHour to achieve LiveDay
  uint32 min_hours = 5;

  // Minimum value of LiveDay to maintain MM eligibility
  uint32 min_days = 6;
}

// IncentivePair
message IncentivePair {
  option (gogoproto.goproto_getters) = false;

  // Pair id of liquidity module
  uint64 pair_id = 1;

  // Time the pair variables start to be applied to the scoring system
  google.protobuf.Timestamp update_time = 2
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];

  // Incentive weights for each pair
  string incentive_weight = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  // Maximum allowable spread between bid and ask
  string max_spread = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  // Minimum allowable price difference of high and low on both side of orders
  string min_width = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable)   = false
  ];

  // Minimum allowable order depth on each side
  string min_depth = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable)   = false
  ];
}

// Store the total amount of incentives distributed through `MarketMakerProposal`, and it can be claimed at once through
// `MsgClaimIncentives`
message Incentive {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;

  repeated cosmos.base.v1beta1.Coin claimable = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

// Market maker object created by applying, if included through `MarketMakerProposal`, eligible becomes true and is
// deleted if rejected or excluded
message MarketMaker {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;
  uint64 pair_id = 2;
  bool eligible = 3;
}

// stores apply deposit amount for a future refund
message Deposit {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.Coin amount = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

// DepositRecord
message DepositRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string address = 1;
  uint64 pair_id = 2;
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}
