syntax = "proto3";
package LimeChain.mantrachain.vault.v1;

import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "vault/v1/params.proto";
import "vault/v1/chain_validator_bridge.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/LimeChain/mantrachain/x/vault/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/mantrachain/vault/v1/params";
  }

  rpc NftStake(QueryGetNftStakeRequest) returns (QueryGetNftStakeResponse) {
		option (google.api.http).get = "/mantrachain/vault/v1/nft-stake/{marketplace_creator}/{marketplace_id}/{collection_creator}/{collection_id}/{nft_id}";
	}

  rpc NftBalances(QueryGetNftBalancesRequest) returns (QueryGetNftBalancesResponse) {
		option (google.api.http).get = "/mantrachain/vault/v1/nft/balance/{marketplace_creator}/{marketplace_id}/{collection_creator}/{collection_id}/{nft_id}";
	}

  rpc LastEpochs(QueryGetLastEpochsRequest) returns (QueryGetLastEpochsResponse) {
		option (google.api.http).get = "/mantrachain/vault/v1/vault/last-epochs/{staking_chain}/{staking_validator}";
	}

  rpc LastEpochBlock(QueryGetLastEpochBlockRequest) returns (QueryGetLastEpochBlockResponse) {
		option (google.api.http).get = "/mantrachain/vault/v1/vault/last-epoch-block/{staking_chain}/{staking_validator}";
	}

  // Queries a ChainValidatorBridge by index.
	rpc ChainValidatorBridge(QueryGetChainValidatorBridgeRequest) returns (QueryGetChainValidatorBridgeResponse) {
		option (google.api.http).get = "/mantrachain/vault/v1/chain_validator_bridge/{chain}/{validator}";
	}

// this line is used by starport scaffolding # 2
}

message QueryGetLastEpochBlockRequest {
  string staking_chain = 1;
  string staking_validator = 2;
}

message QueryGetLastEpochBlockResponse {
  string creator = 1; 
  int64 block_height = 2; 
  string staking_chain = 3;
  string staking_validator = 4;
}

message QueryGetLastEpochsRequest {
  string staking_chain = 1;
  string staking_validator = 2;
}

message QueryGetEpochsResponse {
  int64 prev_epoch_block = 1; 
  int64 next_epoch_block = 2; 
  int64 block_start = 3; 
  int64 block_end = 4;  
  string staked = 5; 
  repeated cosmos.base.v1beta1.Coin rewards = 6; 
  int64 start_at = 7; 
  int64 end_at = 8; 
  string staking_chain = 9;
  string staking_validator = 10;
}

message QueryGetLastEpochsResponse {
  repeated QueryGetEpochsResponse epochs = 1;
}

message QueryGetNftStakeRequest {
  string marketplace_creator = 1;
  string marketplace_id = 2;
  string collection_creator = 3;
  string collection_id = 4;
  string nft_id = 5;
}

message QueryGetNftStakeListItemResponse {
  string amount = 1;
  string denom = 2;
  string cw20_contract_address = 3;
  string shares = 4;
  string validator = 5;
  string chain = 6;
  google.protobuf.Any data = 7;
  string creator = 8;
  int64 block_height = 9;
  int64 staked_at = 10;
  int64 unstaked_at = 11;
  int64 staked_epoch = 12;
}

message QueryGetNftStakeBalanceResponse {
  string amount = 1;
  string denom = 2;
  string validator = 3;
  string chain = 4;
  int64 last_withdrawn_at = 5; 
  int64 last_withdrawn_epoch = 6; 
}

message QueryGetNftStakeResponse {
  string marketplace_creator = 1;
  string marketplace_id = 2;
  string collection_creator = 3;
  string collection_id = 4;
  string nft_id = 5; 
  repeated QueryGetNftStakeListItemResponse staked = 6;
  repeated QueryGetNftStakeBalanceResponse balances = 7;
  string creator = 8;
}

message QueryGetNftBalancesRequest {
  string marketplace_creator = 1;
  string marketplace_id = 2;
  string collection_creator = 3;
  string collection_id = 4;
  string nft_id = 5;
  string staking_chain = 6;
  string staking_validator = 7;
}

message QueryGetNftBalancesResponse {
  string marketplace_creator = 1;
  string marketplace_id = 2;
  string collection_creator = 3;
  string collection_id = 4;
  string nft_id = 5; 
  repeated cosmos.base.v1beta1.Coin balances = 6;
  int64 start_at = 7; 
  int64 end_at = 8; 
  string staking_chain = 9;
  string staking_validator = 10;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetChainValidatorBridgeRequest {
	  string chain = 1;
	  string validator = 2;

}

message QueryGetChainValidatorBridgeResponse {
	ChainValidatorBridge chainValidatorBridge = 1 [(gogoproto.nullable) = false];
}

// this line is used by starport scaffolding # 3
