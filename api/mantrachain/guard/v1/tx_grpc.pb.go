// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mantrachain/guard/v1/tx.proto

package guardv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName                         = "/mantrachain.guard.v1.Msg/UpdateParams"
	Msg_UpdateAccountPrivileges_FullMethodName              = "/mantrachain.guard.v1.Msg/UpdateAccountPrivileges"
	Msg_UpdateAccountPrivilegesBatch_FullMethodName         = "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesBatch"
	Msg_UpdateAccountPrivilegesGroupedBatch_FullMethodName  = "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesGroupedBatch"
	Msg_UpdateGuardTransferCoins_FullMethodName             = "/mantrachain.guard.v1.Msg/UpdateGuardTransferCoins"
	Msg_UpdateRequiredPrivileges_FullMethodName             = "/mantrachain.guard.v1.Msg/UpdateRequiredPrivileges"
	Msg_UpdateRequiredPrivilegesBatch_FullMethodName        = "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesBatch"
	Msg_UpdateRequiredPrivilegesGroupedBatch_FullMethodName = "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesGroupedBatch"
	Msg_UpdateAuthzGenericGrantRevokeBatch_FullMethodName   = "/mantrachain.guard.v1.Msg/UpdateAuthzGenericGrantRevokeBatch"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	UpdateAccountPrivileges(ctx context.Context, in *MsgUpdateAccountPrivileges, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesResponse, error)
	UpdateAccountPrivilegesBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesBatchResponse, error)
	UpdateAccountPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error)
	UpdateGuardTransferCoins(ctx context.Context, in *MsgUpdateGuardTransferCoins, opts ...grpc.CallOption) (*MsgUpdateGuardTransferCoinsResponse, error)
	UpdateRequiredPrivileges(ctx context.Context, in *MsgUpdateRequiredPrivileges, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesResponse, error)
	UpdateRequiredPrivilegesBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesBatchResponse, error)
	UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc}
	UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, in *MsgUpdateAuthzGenericGrantRevokeBatch, opts ...grpc.CallOption) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivileges(ctx context.Context, in *MsgUpdateAccountPrivileges, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesResponse, error) {
	out := new(MsgUpdateAccountPrivilegesResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAccountPrivileges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivilegesBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesBatchResponse, error) {
	out := new(MsgUpdateAccountPrivilegesBatchResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAccountPrivilegesBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error) {
	out := new(MsgUpdateAccountPrivilegesGroupedBatchResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAccountPrivilegesGroupedBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGuardTransferCoins(ctx context.Context, in *MsgUpdateGuardTransferCoins, opts ...grpc.CallOption) (*MsgUpdateGuardTransferCoinsResponse, error) {
	out := new(MsgUpdateGuardTransferCoinsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateGuardTransferCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivileges(ctx context.Context, in *MsgUpdateRequiredPrivileges, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateRequiredPrivileges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivilegesBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesBatchResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesBatchResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateRequiredPrivilegesBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesGroupedBatchResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateRequiredPrivilegesGroupedBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, in *MsgUpdateAuthzGenericGrantRevokeBatch, opts ...grpc.CallOption) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error) {
	out := new(MsgUpdateAuthzGenericGrantRevokeBatchResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAuthzGenericGrantRevokeBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	UpdateAccountPrivileges(context.Context, *MsgUpdateAccountPrivileges) (*MsgUpdateAccountPrivilegesResponse, error)
	UpdateAccountPrivilegesBatch(context.Context, *MsgUpdateAccountPrivilegesBatch) (*MsgUpdateAccountPrivilegesBatchResponse, error)
	UpdateAccountPrivilegesGroupedBatch(context.Context, *MsgUpdateAccountPrivilegesGroupedBatch) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error)
	UpdateGuardTransferCoins(context.Context, *MsgUpdateGuardTransferCoins) (*MsgUpdateGuardTransferCoinsResponse, error)
	UpdateRequiredPrivileges(context.Context, *MsgUpdateRequiredPrivileges) (*MsgUpdateRequiredPrivilegesResponse, error)
	UpdateRequiredPrivilegesBatch(context.Context, *MsgUpdateRequiredPrivilegesBatch) (*MsgUpdateRequiredPrivilegesBatchResponse, error)
	UpdateRequiredPrivilegesGroupedBatch(context.Context, *MsgUpdateRequiredPrivilegesGroupedBatch) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc}
	UpdateAuthzGenericGrantRevokeBatch(context.Context, *MsgUpdateAuthzGenericGrantRevokeBatch) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) UpdateAccountPrivileges(context.Context, *MsgUpdateAccountPrivileges) (*MsgUpdateAccountPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivileges not implemented")
}
func (UnimplementedMsgServer) UpdateAccountPrivilegesBatch(context.Context, *MsgUpdateAccountPrivilegesBatch) (*MsgUpdateAccountPrivilegesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivilegesBatch not implemented")
}
func (UnimplementedMsgServer) UpdateAccountPrivilegesGroupedBatch(context.Context, *MsgUpdateAccountPrivilegesGroupedBatch) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivilegesGroupedBatch not implemented")
}
func (UnimplementedMsgServer) UpdateGuardTransferCoins(context.Context, *MsgUpdateGuardTransferCoins) (*MsgUpdateGuardTransferCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuardTransferCoins not implemented")
}
func (UnimplementedMsgServer) UpdateRequiredPrivileges(context.Context, *MsgUpdateRequiredPrivileges) (*MsgUpdateRequiredPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivileges not implemented")
}
func (UnimplementedMsgServer) UpdateRequiredPrivilegesBatch(context.Context, *MsgUpdateRequiredPrivilegesBatch) (*MsgUpdateRequiredPrivilegesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivilegesBatch not implemented")
}
func (UnimplementedMsgServer) UpdateRequiredPrivilegesGroupedBatch(context.Context, *MsgUpdateRequiredPrivilegesGroupedBatch) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivilegesGroupedBatch not implemented")
}
func (UnimplementedMsgServer) UpdateAuthzGenericGrantRevokeBatch(context.Context, *MsgUpdateAuthzGenericGrantRevokeBatch) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthzGenericGrantRevokeBatch not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAccountPrivileges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivileges(ctx, req.(*MsgUpdateAccountPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivilegesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivilegesBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivilegesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAccountPrivilegesBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivilegesBatch(ctx, req.(*MsgUpdateAccountPrivilegesBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivilegesGroupedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivilegesGroupedBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivilegesGroupedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAccountPrivilegesGroupedBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivilegesGroupedBatch(ctx, req.(*MsgUpdateAccountPrivilegesGroupedBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGuardTransferCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGuardTransferCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGuardTransferCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateGuardTransferCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGuardTransferCoins(ctx, req.(*MsgUpdateGuardTransferCoins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateRequiredPrivileges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivileges(ctx, req.(*MsgUpdateRequiredPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivilegesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivilegesBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivilegesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateRequiredPrivilegesBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivilegesBatch(ctx, req.(*MsgUpdateRequiredPrivilegesBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivilegesGroupedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivilegesGroupedBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivilegesGroupedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateRequiredPrivilegesGroupedBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivilegesGroupedBatch(ctx, req.(*MsgUpdateRequiredPrivilegesGroupedBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAuthzGenericGrantRevokeBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAuthzGenericGrantRevokeBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAuthzGenericGrantRevokeBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAuthzGenericGrantRevokeBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAuthzGenericGrantRevokeBatch(ctx, req.(*MsgUpdateAuthzGenericGrantRevokeBatch))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.guard.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateAccountPrivileges",
			Handler:    _Msg_UpdateAccountPrivileges_Handler,
		},
		{
			MethodName: "UpdateAccountPrivilegesBatch",
			Handler:    _Msg_UpdateAccountPrivilegesBatch_Handler,
		},
		{
			MethodName: "UpdateAccountPrivilegesGroupedBatch",
			Handler:    _Msg_UpdateAccountPrivilegesGroupedBatch_Handler,
		},
		{
			MethodName: "UpdateGuardTransferCoins",
			Handler:    _Msg_UpdateGuardTransferCoins_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivileges",
			Handler:    _Msg_UpdateRequiredPrivileges_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivilegesBatch",
			Handler:    _Msg_UpdateRequiredPrivilegesBatch_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivilegesGroupedBatch",
			Handler:    _Msg_UpdateRequiredPrivilegesGroupedBatch_Handler,
		},
		{
			MethodName: "UpdateAuthzGenericGrantRevokeBatch",
			Handler:    _Msg_UpdateAuthzGenericGrantRevokeBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/guard/v1/tx.proto",
}
