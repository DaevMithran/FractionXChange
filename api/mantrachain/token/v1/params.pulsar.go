// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package tokenv1

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                                                            protoreflect.MessageDescriptor
	fd_Params_valid_nft_collection_id                                    protoreflect.FieldDescriptor
	fd_Params_nft_collection_default_id                                  protoreflect.FieldDescriptor
	fd_Params_nft_collection_default_name                                protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_symbol_min_length            protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_symbol_max_length            protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_description_max_length       protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_name_max_length              protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_images_max_count             protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_images_type_max_length       protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_links_max_count              protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_links_type_max_length        protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_options_max_count            protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_options_type_max_length      protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_options_value_max_length     protoreflect.FieldDescriptor
	fd_Params_valid_nft_collection_metadata_options_sub_value_max_length protoreflect.FieldDescriptor
	fd_Params_valid_nft_id                                               protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_max_count                               protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_title_max_length                        protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_description_max_length                  protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_images_max_count                        protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_images_type_max_length                  protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_links_max_count                         protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_links_type_max_length                   protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_attributes_max_count                    protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_attributes_type_max_length              protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_attributes_value_max_length             protoreflect.FieldDescriptor
	fd_Params_valid_nft_metadata_attributes_sub_value_max_length         protoreflect.FieldDescriptor
	fd_Params_valid_burn_nft_max_count                                   protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_token_v1_params_proto_init()
	md_Params = File_mantrachain_token_v1_params_proto.Messages().ByName("Params")
	fd_Params_valid_nft_collection_id = md_Params.Fields().ByName("valid_nft_collection_id")
	fd_Params_nft_collection_default_id = md_Params.Fields().ByName("nft_collection_default_id")
	fd_Params_nft_collection_default_name = md_Params.Fields().ByName("nft_collection_default_name")
	fd_Params_valid_nft_collection_metadata_symbol_min_length = md_Params.Fields().ByName("valid_nft_collection_metadata_symbol_min_length")
	fd_Params_valid_nft_collection_metadata_symbol_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_symbol_max_length")
	fd_Params_valid_nft_collection_metadata_description_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_description_max_length")
	fd_Params_valid_nft_collection_metadata_name_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_name_max_length")
	fd_Params_valid_nft_collection_metadata_images_max_count = md_Params.Fields().ByName("valid_nft_collection_metadata_images_max_count")
	fd_Params_valid_nft_collection_metadata_images_type_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_images_type_max_length")
	fd_Params_valid_nft_collection_metadata_links_max_count = md_Params.Fields().ByName("valid_nft_collection_metadata_links_max_count")
	fd_Params_valid_nft_collection_metadata_links_type_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_links_type_max_length")
	fd_Params_valid_nft_collection_metadata_options_max_count = md_Params.Fields().ByName("valid_nft_collection_metadata_options_max_count")
	fd_Params_valid_nft_collection_metadata_options_type_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_options_type_max_length")
	fd_Params_valid_nft_collection_metadata_options_value_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_options_value_max_length")
	fd_Params_valid_nft_collection_metadata_options_sub_value_max_length = md_Params.Fields().ByName("valid_nft_collection_metadata_options_sub_value_max_length")
	fd_Params_valid_nft_id = md_Params.Fields().ByName("valid_nft_id")
	fd_Params_valid_nft_metadata_max_count = md_Params.Fields().ByName("valid_nft_metadata_max_count")
	fd_Params_valid_nft_metadata_title_max_length = md_Params.Fields().ByName("valid_nft_metadata_title_max_length")
	fd_Params_valid_nft_metadata_description_max_length = md_Params.Fields().ByName("valid_nft_metadata_description_max_length")
	fd_Params_valid_nft_metadata_images_max_count = md_Params.Fields().ByName("valid_nft_metadata_images_max_count")
	fd_Params_valid_nft_metadata_images_type_max_length = md_Params.Fields().ByName("valid_nft_metadata_images_type_max_length")
	fd_Params_valid_nft_metadata_links_max_count = md_Params.Fields().ByName("valid_nft_metadata_links_max_count")
	fd_Params_valid_nft_metadata_links_type_max_length = md_Params.Fields().ByName("valid_nft_metadata_links_type_max_length")
	fd_Params_valid_nft_metadata_attributes_max_count = md_Params.Fields().ByName("valid_nft_metadata_attributes_max_count")
	fd_Params_valid_nft_metadata_attributes_type_max_length = md_Params.Fields().ByName("valid_nft_metadata_attributes_type_max_length")
	fd_Params_valid_nft_metadata_attributes_value_max_length = md_Params.Fields().ByName("valid_nft_metadata_attributes_value_max_length")
	fd_Params_valid_nft_metadata_attributes_sub_value_max_length = md_Params.Fields().ByName("valid_nft_metadata_attributes_sub_value_max_length")
	fd_Params_valid_burn_nft_max_count = md_Params.Fields().ByName("valid_burn_nft_max_count")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_token_v1_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ValidNftCollectionId != "" {
		value := protoreflect.ValueOfString(x.ValidNftCollectionId)
		if !f(fd_Params_valid_nft_collection_id, value) {
			return
		}
	}
	if x.NftCollectionDefaultId != "" {
		value := protoreflect.ValueOfString(x.NftCollectionDefaultId)
		if !f(fd_Params_nft_collection_default_id, value) {
			return
		}
	}
	if x.NftCollectionDefaultName != "" {
		value := protoreflect.ValueOfString(x.NftCollectionDefaultName)
		if !f(fd_Params_nft_collection_default_name, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataSymbolMinLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataSymbolMinLength)
		if !f(fd_Params_valid_nft_collection_metadata_symbol_min_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataSymbolMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataSymbolMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_symbol_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataDescriptionMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataDescriptionMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_description_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataNameMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataNameMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_name_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataImagesMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataImagesMaxCount)
		if !f(fd_Params_valid_nft_collection_metadata_images_max_count, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataImagesTypeMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataImagesTypeMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_images_type_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataLinksMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataLinksMaxCount)
		if !f(fd_Params_valid_nft_collection_metadata_links_max_count, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataLinksTypeMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataLinksTypeMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_links_type_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataOptionsMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataOptionsMaxCount)
		if !f(fd_Params_valid_nft_collection_metadata_options_max_count, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataOptionsTypeMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataOptionsTypeMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_options_type_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataOptionsValueMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataOptionsValueMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_options_value_max_length, value) {
			return
		}
	}
	if x.ValidNftCollectionMetadataOptionsSubValueMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftCollectionMetadataOptionsSubValueMaxLength)
		if !f(fd_Params_valid_nft_collection_metadata_options_sub_value_max_length, value) {
			return
		}
	}
	if x.ValidNftId != "" {
		value := protoreflect.ValueOfString(x.ValidNftId)
		if !f(fd_Params_valid_nft_id, value) {
			return
		}
	}
	if x.ValidNftMetadataMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataMaxCount)
		if !f(fd_Params_valid_nft_metadata_max_count, value) {
			return
		}
	}
	if x.ValidNftMetadataTitleMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataTitleMaxLength)
		if !f(fd_Params_valid_nft_metadata_title_max_length, value) {
			return
		}
	}
	if x.ValidNftMetadataDescriptionMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataDescriptionMaxLength)
		if !f(fd_Params_valid_nft_metadata_description_max_length, value) {
			return
		}
	}
	if x.ValidNftMetadataImagesMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataImagesMaxCount)
		if !f(fd_Params_valid_nft_metadata_images_max_count, value) {
			return
		}
	}
	if x.ValidNftMetadataImagesTypeMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataImagesTypeMaxLength)
		if !f(fd_Params_valid_nft_metadata_images_type_max_length, value) {
			return
		}
	}
	if x.ValidNftMetadataLinksMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataLinksMaxCount)
		if !f(fd_Params_valid_nft_metadata_links_max_count, value) {
			return
		}
	}
	if x.ValidNftMetadataLinksTypeMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataLinksTypeMaxLength)
		if !f(fd_Params_valid_nft_metadata_links_type_max_length, value) {
			return
		}
	}
	if x.ValidNftMetadataAttributesMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataAttributesMaxCount)
		if !f(fd_Params_valid_nft_metadata_attributes_max_count, value) {
			return
		}
	}
	if x.ValidNftMetadataAttributesTypeMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataAttributesTypeMaxLength)
		if !f(fd_Params_valid_nft_metadata_attributes_type_max_length, value) {
			return
		}
	}
	if x.ValidNftMetadataAttributesValueMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataAttributesValueMaxLength)
		if !f(fd_Params_valid_nft_metadata_attributes_value_max_length, value) {
			return
		}
	}
	if x.ValidNftMetadataAttributesSubValueMaxLength != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidNftMetadataAttributesSubValueMaxLength)
		if !f(fd_Params_valid_nft_metadata_attributes_sub_value_max_length, value) {
			return
		}
	}
	if x.ValidBurnNftMaxCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ValidBurnNftMaxCount)
		if !f(fd_Params_valid_burn_nft_max_count, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.token.v1.Params.valid_nft_collection_id":
		return x.ValidNftCollectionId != ""
	case "mantrachain.token.v1.Params.nft_collection_default_id":
		return x.NftCollectionDefaultId != ""
	case "mantrachain.token.v1.Params.nft_collection_default_name":
		return x.NftCollectionDefaultName != ""
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_min_length":
		return x.ValidNftCollectionMetadataSymbolMinLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_max_length":
		return x.ValidNftCollectionMetadataSymbolMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_description_max_length":
		return x.ValidNftCollectionMetadataDescriptionMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_name_max_length":
		return x.ValidNftCollectionMetadataNameMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_max_count":
		return x.ValidNftCollectionMetadataImagesMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_type_max_length":
		return x.ValidNftCollectionMetadataImagesTypeMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_max_count":
		return x.ValidNftCollectionMetadataLinksMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_type_max_length":
		return x.ValidNftCollectionMetadataLinksTypeMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_max_count":
		return x.ValidNftCollectionMetadataOptionsMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_type_max_length":
		return x.ValidNftCollectionMetadataOptionsTypeMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_value_max_length":
		return x.ValidNftCollectionMetadataOptionsValueMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_sub_value_max_length":
		return x.ValidNftCollectionMetadataOptionsSubValueMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_id":
		return x.ValidNftId != ""
	case "mantrachain.token.v1.Params.valid_nft_metadata_max_count":
		return x.ValidNftMetadataMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_title_max_length":
		return x.ValidNftMetadataTitleMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_description_max_length":
		return x.ValidNftMetadataDescriptionMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_max_count":
		return x.ValidNftMetadataImagesMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_type_max_length":
		return x.ValidNftMetadataImagesTypeMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_max_count":
		return x.ValidNftMetadataLinksMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_type_max_length":
		return x.ValidNftMetadataLinksTypeMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_max_count":
		return x.ValidNftMetadataAttributesMaxCount != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_type_max_length":
		return x.ValidNftMetadataAttributesTypeMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_value_max_length":
		return x.ValidNftMetadataAttributesValueMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_sub_value_max_length":
		return x.ValidNftMetadataAttributesSubValueMaxLength != int32(0)
	case "mantrachain.token.v1.Params.valid_burn_nft_max_count":
		return x.ValidBurnNftMaxCount != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.token.v1.Params"))
		}
		panic(fmt.Errorf("message mantrachain.token.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.token.v1.Params.valid_nft_collection_id":
		x.ValidNftCollectionId = ""
	case "mantrachain.token.v1.Params.nft_collection_default_id":
		x.NftCollectionDefaultId = ""
	case "mantrachain.token.v1.Params.nft_collection_default_name":
		x.NftCollectionDefaultName = ""
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_min_length":
		x.ValidNftCollectionMetadataSymbolMinLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_max_length":
		x.ValidNftCollectionMetadataSymbolMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_description_max_length":
		x.ValidNftCollectionMetadataDescriptionMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_name_max_length":
		x.ValidNftCollectionMetadataNameMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_max_count":
		x.ValidNftCollectionMetadataImagesMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_type_max_length":
		x.ValidNftCollectionMetadataImagesTypeMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_max_count":
		x.ValidNftCollectionMetadataLinksMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_type_max_length":
		x.ValidNftCollectionMetadataLinksTypeMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_max_count":
		x.ValidNftCollectionMetadataOptionsMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_type_max_length":
		x.ValidNftCollectionMetadataOptionsTypeMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_value_max_length":
		x.ValidNftCollectionMetadataOptionsValueMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_sub_value_max_length":
		x.ValidNftCollectionMetadataOptionsSubValueMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_id":
		x.ValidNftId = ""
	case "mantrachain.token.v1.Params.valid_nft_metadata_max_count":
		x.ValidNftMetadataMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_title_max_length":
		x.ValidNftMetadataTitleMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_description_max_length":
		x.ValidNftMetadataDescriptionMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_max_count":
		x.ValidNftMetadataImagesMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_type_max_length":
		x.ValidNftMetadataImagesTypeMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_max_count":
		x.ValidNftMetadataLinksMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_type_max_length":
		x.ValidNftMetadataLinksTypeMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_max_count":
		x.ValidNftMetadataAttributesMaxCount = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_type_max_length":
		x.ValidNftMetadataAttributesTypeMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_value_max_length":
		x.ValidNftMetadataAttributesValueMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_sub_value_max_length":
		x.ValidNftMetadataAttributesSubValueMaxLength = int32(0)
	case "mantrachain.token.v1.Params.valid_burn_nft_max_count":
		x.ValidBurnNftMaxCount = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.token.v1.Params"))
		}
		panic(fmt.Errorf("message mantrachain.token.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.token.v1.Params.valid_nft_collection_id":
		value := x.ValidNftCollectionId
		return protoreflect.ValueOfString(value)
	case "mantrachain.token.v1.Params.nft_collection_default_id":
		value := x.NftCollectionDefaultId
		return protoreflect.ValueOfString(value)
	case "mantrachain.token.v1.Params.nft_collection_default_name":
		value := x.NftCollectionDefaultName
		return protoreflect.ValueOfString(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_min_length":
		value := x.ValidNftCollectionMetadataSymbolMinLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_max_length":
		value := x.ValidNftCollectionMetadataSymbolMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_description_max_length":
		value := x.ValidNftCollectionMetadataDescriptionMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_name_max_length":
		value := x.ValidNftCollectionMetadataNameMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_max_count":
		value := x.ValidNftCollectionMetadataImagesMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_type_max_length":
		value := x.ValidNftCollectionMetadataImagesTypeMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_max_count":
		value := x.ValidNftCollectionMetadataLinksMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_type_max_length":
		value := x.ValidNftCollectionMetadataLinksTypeMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_max_count":
		value := x.ValidNftCollectionMetadataOptionsMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_type_max_length":
		value := x.ValidNftCollectionMetadataOptionsTypeMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_value_max_length":
		value := x.ValidNftCollectionMetadataOptionsValueMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_sub_value_max_length":
		value := x.ValidNftCollectionMetadataOptionsSubValueMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_id":
		value := x.ValidNftId
		return protoreflect.ValueOfString(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_max_count":
		value := x.ValidNftMetadataMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_title_max_length":
		value := x.ValidNftMetadataTitleMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_description_max_length":
		value := x.ValidNftMetadataDescriptionMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_max_count":
		value := x.ValidNftMetadataImagesMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_type_max_length":
		value := x.ValidNftMetadataImagesTypeMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_max_count":
		value := x.ValidNftMetadataLinksMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_type_max_length":
		value := x.ValidNftMetadataLinksTypeMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_max_count":
		value := x.ValidNftMetadataAttributesMaxCount
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_type_max_length":
		value := x.ValidNftMetadataAttributesTypeMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_value_max_length":
		value := x.ValidNftMetadataAttributesValueMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_sub_value_max_length":
		value := x.ValidNftMetadataAttributesSubValueMaxLength
		return protoreflect.ValueOfInt32(value)
	case "mantrachain.token.v1.Params.valid_burn_nft_max_count":
		value := x.ValidBurnNftMaxCount
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.token.v1.Params"))
		}
		panic(fmt.Errorf("message mantrachain.token.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.token.v1.Params.valid_nft_collection_id":
		x.ValidNftCollectionId = value.Interface().(string)
	case "mantrachain.token.v1.Params.nft_collection_default_id":
		x.NftCollectionDefaultId = value.Interface().(string)
	case "mantrachain.token.v1.Params.nft_collection_default_name":
		x.NftCollectionDefaultName = value.Interface().(string)
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_min_length":
		x.ValidNftCollectionMetadataSymbolMinLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_max_length":
		x.ValidNftCollectionMetadataSymbolMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_description_max_length":
		x.ValidNftCollectionMetadataDescriptionMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_name_max_length":
		x.ValidNftCollectionMetadataNameMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_max_count":
		x.ValidNftCollectionMetadataImagesMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_type_max_length":
		x.ValidNftCollectionMetadataImagesTypeMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_max_count":
		x.ValidNftCollectionMetadataLinksMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_type_max_length":
		x.ValidNftCollectionMetadataLinksTypeMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_max_count":
		x.ValidNftCollectionMetadataOptionsMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_type_max_length":
		x.ValidNftCollectionMetadataOptionsTypeMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_value_max_length":
		x.ValidNftCollectionMetadataOptionsValueMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_sub_value_max_length":
		x.ValidNftCollectionMetadataOptionsSubValueMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_id":
		x.ValidNftId = value.Interface().(string)
	case "mantrachain.token.v1.Params.valid_nft_metadata_max_count":
		x.ValidNftMetadataMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_title_max_length":
		x.ValidNftMetadataTitleMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_description_max_length":
		x.ValidNftMetadataDescriptionMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_max_count":
		x.ValidNftMetadataImagesMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_type_max_length":
		x.ValidNftMetadataImagesTypeMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_max_count":
		x.ValidNftMetadataLinksMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_type_max_length":
		x.ValidNftMetadataLinksTypeMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_max_count":
		x.ValidNftMetadataAttributesMaxCount = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_type_max_length":
		x.ValidNftMetadataAttributesTypeMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_value_max_length":
		x.ValidNftMetadataAttributesValueMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_sub_value_max_length":
		x.ValidNftMetadataAttributesSubValueMaxLength = int32(value.Int())
	case "mantrachain.token.v1.Params.valid_burn_nft_max_count":
		x.ValidBurnNftMaxCount = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.token.v1.Params"))
		}
		panic(fmt.Errorf("message mantrachain.token.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.token.v1.Params.valid_nft_collection_id":
		panic(fmt.Errorf("field valid_nft_collection_id of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.nft_collection_default_id":
		panic(fmt.Errorf("field nft_collection_default_id of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.nft_collection_default_name":
		panic(fmt.Errorf("field nft_collection_default_name of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_min_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_symbol_min_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_symbol_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_description_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_description_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_name_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_name_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_max_count":
		panic(fmt.Errorf("field valid_nft_collection_metadata_images_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_type_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_images_type_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_max_count":
		panic(fmt.Errorf("field valid_nft_collection_metadata_links_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_type_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_links_type_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_max_count":
		panic(fmt.Errorf("field valid_nft_collection_metadata_options_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_type_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_options_type_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_value_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_options_value_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_sub_value_max_length":
		panic(fmt.Errorf("field valid_nft_collection_metadata_options_sub_value_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_id":
		panic(fmt.Errorf("field valid_nft_id of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_max_count":
		panic(fmt.Errorf("field valid_nft_metadata_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_title_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_title_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_description_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_description_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_max_count":
		panic(fmt.Errorf("field valid_nft_metadata_images_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_type_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_images_type_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_max_count":
		panic(fmt.Errorf("field valid_nft_metadata_links_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_type_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_links_type_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_max_count":
		panic(fmt.Errorf("field valid_nft_metadata_attributes_max_count of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_type_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_attributes_type_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_value_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_attributes_value_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_sub_value_max_length":
		panic(fmt.Errorf("field valid_nft_metadata_attributes_sub_value_max_length of message mantrachain.token.v1.Params is not mutable"))
	case "mantrachain.token.v1.Params.valid_burn_nft_max_count":
		panic(fmt.Errorf("field valid_burn_nft_max_count of message mantrachain.token.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.token.v1.Params"))
		}
		panic(fmt.Errorf("message mantrachain.token.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.token.v1.Params.valid_nft_collection_id":
		return protoreflect.ValueOfString("")
	case "mantrachain.token.v1.Params.nft_collection_default_id":
		return protoreflect.ValueOfString("")
	case "mantrachain.token.v1.Params.nft_collection_default_name":
		return protoreflect.ValueOfString("")
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_min_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_symbol_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_description_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_name_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_images_type_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_links_type_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_type_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_value_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_collection_metadata_options_sub_value_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_id":
		return protoreflect.ValueOfString("")
	case "mantrachain.token.v1.Params.valid_nft_metadata_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_title_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_description_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_images_type_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_links_type_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_type_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_value_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_nft_metadata_attributes_sub_value_max_length":
		return protoreflect.ValueOfInt32(int32(0))
	case "mantrachain.token.v1.Params.valid_burn_nft_max_count":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.token.v1.Params"))
		}
		panic(fmt.Errorf("message mantrachain.token.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.token.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ValidNftCollectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NftCollectionDefaultId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NftCollectionDefaultName)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ValidNftCollectionMetadataSymbolMinLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataSymbolMinLength))
		}
		if x.ValidNftCollectionMetadataSymbolMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataSymbolMaxLength))
		}
		if x.ValidNftCollectionMetadataDescriptionMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataDescriptionMaxLength))
		}
		if x.ValidNftCollectionMetadataNameMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataNameMaxLength))
		}
		if x.ValidNftCollectionMetadataImagesMaxCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataImagesMaxCount))
		}
		if x.ValidNftCollectionMetadataImagesTypeMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataImagesTypeMaxLength))
		}
		if x.ValidNftCollectionMetadataLinksMaxCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataLinksMaxCount))
		}
		if x.ValidNftCollectionMetadataLinksTypeMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataLinksTypeMaxLength))
		}
		if x.ValidNftCollectionMetadataOptionsMaxCount != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataOptionsMaxCount))
		}
		if x.ValidNftCollectionMetadataOptionsTypeMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataOptionsTypeMaxLength))
		}
		if x.ValidNftCollectionMetadataOptionsValueMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataOptionsValueMaxLength))
		}
		if x.ValidNftCollectionMetadataOptionsSubValueMaxLength != 0 {
			n += 1 + runtime.Sov(uint64(x.ValidNftCollectionMetadataOptionsSubValueMaxLength))
		}
		l = len(x.ValidNftId)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.ValidNftMetadataMaxCount != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataMaxCount))
		}
		if x.ValidNftMetadataTitleMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataTitleMaxLength))
		}
		if x.ValidNftMetadataDescriptionMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataDescriptionMaxLength))
		}
		if x.ValidNftMetadataImagesMaxCount != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataImagesMaxCount))
		}
		if x.ValidNftMetadataImagesTypeMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataImagesTypeMaxLength))
		}
		if x.ValidNftMetadataLinksMaxCount != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataLinksMaxCount))
		}
		if x.ValidNftMetadataLinksTypeMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataLinksTypeMaxLength))
		}
		if x.ValidNftMetadataAttributesMaxCount != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataAttributesMaxCount))
		}
		if x.ValidNftMetadataAttributesTypeMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataAttributesTypeMaxLength))
		}
		if x.ValidNftMetadataAttributesValueMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataAttributesValueMaxLength))
		}
		if x.ValidNftMetadataAttributesSubValueMaxLength != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidNftMetadataAttributesSubValueMaxLength))
		}
		if x.ValidBurnNftMaxCount != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidBurnNftMaxCount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ValidBurnNftMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidBurnNftMaxCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe0
		}
		if x.ValidNftMetadataAttributesSubValueMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataAttributesSubValueMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd8
		}
		if x.ValidNftMetadataAttributesValueMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataAttributesValueMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd0
		}
		if x.ValidNftMetadataAttributesTypeMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataAttributesTypeMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if x.ValidNftMetadataAttributesMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataAttributesMaxCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc0
		}
		if x.ValidNftMetadataLinksTypeMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataLinksTypeMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb8
		}
		if x.ValidNftMetadataLinksMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataLinksMaxCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb0
		}
		if x.ValidNftMetadataImagesTypeMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataImagesTypeMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.ValidNftMetadataImagesMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataImagesMaxCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.ValidNftMetadataDescriptionMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataDescriptionMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.ValidNftMetadataTitleMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataTitleMaxLength))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.ValidNftMetadataMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftMetadataMaxCount))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if len(x.ValidNftId) > 0 {
			i -= len(x.ValidNftId)
			copy(dAtA[i:], x.ValidNftId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidNftId)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.ValidNftCollectionMetadataOptionsSubValueMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataOptionsSubValueMaxLength))
			i--
			dAtA[i] = 0x78
		}
		if x.ValidNftCollectionMetadataOptionsValueMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataOptionsValueMaxLength))
			i--
			dAtA[i] = 0x70
		}
		if x.ValidNftCollectionMetadataOptionsTypeMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataOptionsTypeMaxLength))
			i--
			dAtA[i] = 0x68
		}
		if x.ValidNftCollectionMetadataOptionsMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataOptionsMaxCount))
			i--
			dAtA[i] = 0x60
		}
		if x.ValidNftCollectionMetadataLinksTypeMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataLinksTypeMaxLength))
			i--
			dAtA[i] = 0x58
		}
		if x.ValidNftCollectionMetadataLinksMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataLinksMaxCount))
			i--
			dAtA[i] = 0x50
		}
		if x.ValidNftCollectionMetadataImagesTypeMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataImagesTypeMaxLength))
			i--
			dAtA[i] = 0x48
		}
		if x.ValidNftCollectionMetadataImagesMaxCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataImagesMaxCount))
			i--
			dAtA[i] = 0x40
		}
		if x.ValidNftCollectionMetadataNameMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataNameMaxLength))
			i--
			dAtA[i] = 0x38
		}
		if x.ValidNftCollectionMetadataDescriptionMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataDescriptionMaxLength))
			i--
			dAtA[i] = 0x30
		}
		if x.ValidNftCollectionMetadataSymbolMaxLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataSymbolMaxLength))
			i--
			dAtA[i] = 0x28
		}
		if x.ValidNftCollectionMetadataSymbolMinLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidNftCollectionMetadataSymbolMinLength))
			i--
			dAtA[i] = 0x20
		}
		if len(x.NftCollectionDefaultName) > 0 {
			i -= len(x.NftCollectionDefaultName)
			copy(dAtA[i:], x.NftCollectionDefaultName)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NftCollectionDefaultName)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.NftCollectionDefaultId) > 0 {
			i -= len(x.NftCollectionDefaultId)
			copy(dAtA[i:], x.NftCollectionDefaultId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NftCollectionDefaultId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ValidNftCollectionId) > 0 {
			i -= len(x.ValidNftCollectionId)
			copy(dAtA[i:], x.ValidNftCollectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidNftCollectionId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidNftCollectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NftCollectionDefaultId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NftCollectionDefaultId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NftCollectionDefaultName", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NftCollectionDefaultName = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataSymbolMinLength", wireType)
				}
				x.ValidNftCollectionMetadataSymbolMinLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataSymbolMinLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataSymbolMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataSymbolMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataSymbolMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataDescriptionMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataDescriptionMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataDescriptionMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataNameMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataNameMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataNameMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataImagesMaxCount", wireType)
				}
				x.ValidNftCollectionMetadataImagesMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataImagesMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataImagesTypeMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataImagesTypeMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataImagesTypeMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataLinksMaxCount", wireType)
				}
				x.ValidNftCollectionMetadataLinksMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataLinksMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataLinksTypeMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataLinksTypeMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataLinksTypeMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataOptionsMaxCount", wireType)
				}
				x.ValidNftCollectionMetadataOptionsMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataOptionsMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataOptionsTypeMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataOptionsTypeMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataOptionsTypeMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataOptionsValueMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataOptionsValueMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataOptionsValueMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftCollectionMetadataOptionsSubValueMaxLength", wireType)
				}
				x.ValidNftCollectionMetadataOptionsSubValueMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftCollectionMetadataOptionsSubValueMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidNftId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataMaxCount", wireType)
				}
				x.ValidNftMetadataMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataTitleMaxLength", wireType)
				}
				x.ValidNftMetadataTitleMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataTitleMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataDescriptionMaxLength", wireType)
				}
				x.ValidNftMetadataDescriptionMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataDescriptionMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataImagesMaxCount", wireType)
				}
				x.ValidNftMetadataImagesMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataImagesMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataImagesTypeMaxLength", wireType)
				}
				x.ValidNftMetadataImagesTypeMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataImagesTypeMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 22:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataLinksMaxCount", wireType)
				}
				x.ValidNftMetadataLinksMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataLinksMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 23:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataLinksTypeMaxLength", wireType)
				}
				x.ValidNftMetadataLinksTypeMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataLinksTypeMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 24:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataAttributesMaxCount", wireType)
				}
				x.ValidNftMetadataAttributesMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataAttributesMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataAttributesTypeMaxLength", wireType)
				}
				x.ValidNftMetadataAttributesTypeMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataAttributesTypeMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 26:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataAttributesValueMaxLength", wireType)
				}
				x.ValidNftMetadataAttributesValueMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataAttributesValueMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 27:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidNftMetadataAttributesSubValueMaxLength", wireType)
				}
				x.ValidNftMetadataAttributesSubValueMaxLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidNftMetadataAttributesSubValueMaxLength |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 28:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidBurnNftMaxCount", wireType)
				}
				x.ValidBurnNftMaxCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidBurnNftMaxCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mantrachain/token/v1/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidNftCollectionId                               string `protobuf:"bytes,1,opt,name=valid_nft_collection_id,json=validNftCollectionId,proto3" json:"valid_nft_collection_id,omitempty"`
	NftCollectionDefaultId                             string `protobuf:"bytes,2,opt,name=nft_collection_default_id,json=nftCollectionDefaultId,proto3" json:"nft_collection_default_id,omitempty"`
	NftCollectionDefaultName                           string `protobuf:"bytes,3,opt,name=nft_collection_default_name,json=nftCollectionDefaultName,proto3" json:"nft_collection_default_name,omitempty"`
	ValidNftCollectionMetadataSymbolMinLength          int32  `protobuf:"varint,4,opt,name=valid_nft_collection_metadata_symbol_min_length,json=validNftCollectionMetadataSymbolMinLength,proto3" json:"valid_nft_collection_metadata_symbol_min_length,omitempty"`
	ValidNftCollectionMetadataSymbolMaxLength          int32  `protobuf:"varint,5,opt,name=valid_nft_collection_metadata_symbol_max_length,json=validNftCollectionMetadataSymbolMaxLength,proto3" json:"valid_nft_collection_metadata_symbol_max_length,omitempty"`
	ValidNftCollectionMetadataDescriptionMaxLength     int32  `protobuf:"varint,6,opt,name=valid_nft_collection_metadata_description_max_length,json=validNftCollectionMetadataDescriptionMaxLength,proto3" json:"valid_nft_collection_metadata_description_max_length,omitempty"`
	ValidNftCollectionMetadataNameMaxLength            int32  `protobuf:"varint,7,opt,name=valid_nft_collection_metadata_name_max_length,json=validNftCollectionMetadataNameMaxLength,proto3" json:"valid_nft_collection_metadata_name_max_length,omitempty"`
	ValidNftCollectionMetadataImagesMaxCount           int32  `protobuf:"varint,8,opt,name=valid_nft_collection_metadata_images_max_count,json=validNftCollectionMetadataImagesMaxCount,proto3" json:"valid_nft_collection_metadata_images_max_count,omitempty"`
	ValidNftCollectionMetadataImagesTypeMaxLength      int32  `protobuf:"varint,9,opt,name=valid_nft_collection_metadata_images_type_max_length,json=validNftCollectionMetadataImagesTypeMaxLength,proto3" json:"valid_nft_collection_metadata_images_type_max_length,omitempty"`
	ValidNftCollectionMetadataLinksMaxCount            int32  `protobuf:"varint,10,opt,name=valid_nft_collection_metadata_links_max_count,json=validNftCollectionMetadataLinksMaxCount,proto3" json:"valid_nft_collection_metadata_links_max_count,omitempty"`
	ValidNftCollectionMetadataLinksTypeMaxLength       int32  `protobuf:"varint,11,opt,name=valid_nft_collection_metadata_links_type_max_length,json=validNftCollectionMetadataLinksTypeMaxLength,proto3" json:"valid_nft_collection_metadata_links_type_max_length,omitempty"`
	ValidNftCollectionMetadataOptionsMaxCount          int32  `protobuf:"varint,12,opt,name=valid_nft_collection_metadata_options_max_count,json=validNftCollectionMetadataOptionsMaxCount,proto3" json:"valid_nft_collection_metadata_options_max_count,omitempty"`
	ValidNftCollectionMetadataOptionsTypeMaxLength     int32  `protobuf:"varint,13,opt,name=valid_nft_collection_metadata_options_type_max_length,json=validNftCollectionMetadataOptionsTypeMaxLength,proto3" json:"valid_nft_collection_metadata_options_type_max_length,omitempty"`
	ValidNftCollectionMetadataOptionsValueMaxLength    int32  `protobuf:"varint,14,opt,name=valid_nft_collection_metadata_options_value_max_length,json=validNftCollectionMetadataOptionsValueMaxLength,proto3" json:"valid_nft_collection_metadata_options_value_max_length,omitempty"`
	ValidNftCollectionMetadataOptionsSubValueMaxLength int32  `protobuf:"varint,15,opt,name=valid_nft_collection_metadata_options_sub_value_max_length,json=validNftCollectionMetadataOptionsSubValueMaxLength,proto3" json:"valid_nft_collection_metadata_options_sub_value_max_length,omitempty"`
	ValidNftId                                         string `protobuf:"bytes,16,opt,name=valid_nft_id,json=validNftId,proto3" json:"valid_nft_id,omitempty"`
	ValidNftMetadataMaxCount                           int32  `protobuf:"varint,17,opt,name=valid_nft_metadata_max_count,json=validNftMetadataMaxCount,proto3" json:"valid_nft_metadata_max_count,omitempty"`
	ValidNftMetadataTitleMaxLength                     int32  `protobuf:"varint,18,opt,name=valid_nft_metadata_title_max_length,json=validNftMetadataTitleMaxLength,proto3" json:"valid_nft_metadata_title_max_length,omitempty"`
	ValidNftMetadataDescriptionMaxLength               int32  `protobuf:"varint,19,opt,name=valid_nft_metadata_description_max_length,json=validNftMetadataDescriptionMaxLength,proto3" json:"valid_nft_metadata_description_max_length,omitempty"`
	ValidNftMetadataImagesMaxCount                     int32  `protobuf:"varint,20,opt,name=valid_nft_metadata_images_max_count,json=validNftMetadataImagesMaxCount,proto3" json:"valid_nft_metadata_images_max_count,omitempty"`
	ValidNftMetadataImagesTypeMaxLength                int32  `protobuf:"varint,21,opt,name=valid_nft_metadata_images_type_max_length,json=validNftMetadataImagesTypeMaxLength,proto3" json:"valid_nft_metadata_images_type_max_length,omitempty"`
	ValidNftMetadataLinksMaxCount                      int32  `protobuf:"varint,22,opt,name=valid_nft_metadata_links_max_count,json=validNftMetadataLinksMaxCount,proto3" json:"valid_nft_metadata_links_max_count,omitempty"`
	ValidNftMetadataLinksTypeMaxLength                 int32  `protobuf:"varint,23,opt,name=valid_nft_metadata_links_type_max_length,json=validNftMetadataLinksTypeMaxLength,proto3" json:"valid_nft_metadata_links_type_max_length,omitempty"`
	ValidNftMetadataAttributesMaxCount                 int32  `protobuf:"varint,24,opt,name=valid_nft_metadata_attributes_max_count,json=validNftMetadataAttributesMaxCount,proto3" json:"valid_nft_metadata_attributes_max_count,omitempty"`
	ValidNftMetadataAttributesTypeMaxLength            int32  `protobuf:"varint,25,opt,name=valid_nft_metadata_attributes_type_max_length,json=validNftMetadataAttributesTypeMaxLength,proto3" json:"valid_nft_metadata_attributes_type_max_length,omitempty"`
	ValidNftMetadataAttributesValueMaxLength           int32  `protobuf:"varint,26,opt,name=valid_nft_metadata_attributes_value_max_length,json=validNftMetadataAttributesValueMaxLength,proto3" json:"valid_nft_metadata_attributes_value_max_length,omitempty"`
	ValidNftMetadataAttributesSubValueMaxLength        int32  `protobuf:"varint,27,opt,name=valid_nft_metadata_attributes_sub_value_max_length,json=validNftMetadataAttributesSubValueMaxLength,proto3" json:"valid_nft_metadata_attributes_sub_value_max_length,omitempty"`
	ValidBurnNftMaxCount                               int32  `protobuf:"varint,28,opt,name=valid_burn_nft_max_count,json=validBurnNftMaxCount,proto3" json:"valid_burn_nft_max_count,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_token_v1_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_mantrachain_token_v1_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetValidNftCollectionId() string {
	if x != nil {
		return x.ValidNftCollectionId
	}
	return ""
}

func (x *Params) GetNftCollectionDefaultId() string {
	if x != nil {
		return x.NftCollectionDefaultId
	}
	return ""
}

func (x *Params) GetNftCollectionDefaultName() string {
	if x != nil {
		return x.NftCollectionDefaultName
	}
	return ""
}

func (x *Params) GetValidNftCollectionMetadataSymbolMinLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataSymbolMinLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataSymbolMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataSymbolMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataDescriptionMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataDescriptionMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataNameMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataNameMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataImagesMaxCount() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataImagesMaxCount
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataImagesTypeMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataImagesTypeMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataLinksMaxCount() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataLinksMaxCount
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataLinksTypeMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataLinksTypeMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataOptionsMaxCount() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataOptionsMaxCount
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataOptionsTypeMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataOptionsTypeMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataOptionsValueMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataOptionsValueMaxLength
	}
	return 0
}

func (x *Params) GetValidNftCollectionMetadataOptionsSubValueMaxLength() int32 {
	if x != nil {
		return x.ValidNftCollectionMetadataOptionsSubValueMaxLength
	}
	return 0
}

func (x *Params) GetValidNftId() string {
	if x != nil {
		return x.ValidNftId
	}
	return ""
}

func (x *Params) GetValidNftMetadataMaxCount() int32 {
	if x != nil {
		return x.ValidNftMetadataMaxCount
	}
	return 0
}

func (x *Params) GetValidNftMetadataTitleMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataTitleMaxLength
	}
	return 0
}

func (x *Params) GetValidNftMetadataDescriptionMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataDescriptionMaxLength
	}
	return 0
}

func (x *Params) GetValidNftMetadataImagesMaxCount() int32 {
	if x != nil {
		return x.ValidNftMetadataImagesMaxCount
	}
	return 0
}

func (x *Params) GetValidNftMetadataImagesTypeMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataImagesTypeMaxLength
	}
	return 0
}

func (x *Params) GetValidNftMetadataLinksMaxCount() int32 {
	if x != nil {
		return x.ValidNftMetadataLinksMaxCount
	}
	return 0
}

func (x *Params) GetValidNftMetadataLinksTypeMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataLinksTypeMaxLength
	}
	return 0
}

func (x *Params) GetValidNftMetadataAttributesMaxCount() int32 {
	if x != nil {
		return x.ValidNftMetadataAttributesMaxCount
	}
	return 0
}

func (x *Params) GetValidNftMetadataAttributesTypeMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataAttributesTypeMaxLength
	}
	return 0
}

func (x *Params) GetValidNftMetadataAttributesValueMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataAttributesValueMaxLength
	}
	return 0
}

func (x *Params) GetValidNftMetadataAttributesSubValueMaxLength() int32 {
	if x != nil {
		return x.ValidNftMetadataAttributesSubValueMaxLength
	}
	return 0
}

func (x *Params) GetValidBurnNftMaxCount() int32 {
	if x != nil {
		return x.ValidBurnNftMaxCount
	}
	return 0
}

var File_mantrachain_token_v1_params_proto protoreflect.FileDescriptor

var file_mantrachain_token_v1_params_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f,
	0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd0, 0x13, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12,
	0x3d, 0x0a, 0x1b, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62,
	0x0a, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x62, 0x0a, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6c, 0x0a, 0x34, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6b, 0x0a, 0x34, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x4d, 0x61, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x33, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x2c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x62,
	0x0a, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x35, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x6f, 0x0a, 0x36, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x76, 0x0a, 0x3a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x32, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x62, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x23,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x29, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x24, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x4b, 0x0a, 0x23, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x56, 0x0a, 0x29, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x23, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x28, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x27, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x60, 0x0a,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x28, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x67, 0x0a, 0x32, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x73, 0x75, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4e, 0x66, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x53, 0x75, 0x62, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x75, 0x72, 0x6e, 0x4e, 0x66, 0x74, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x23, 0xe8, 0xa0, 0x1f, 0x01, 0x8a, 0xe7, 0xb0, 0x2a, 0x1a, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x78, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0xc8, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x76, 0x31, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2d, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x4d, 0x54, 0x58, 0xaa, 0x02, 0x14, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14,
	0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantrachain_token_v1_params_proto_rawDescOnce sync.Once
	file_mantrachain_token_v1_params_proto_rawDescData = file_mantrachain_token_v1_params_proto_rawDesc
)

func file_mantrachain_token_v1_params_proto_rawDescGZIP() []byte {
	file_mantrachain_token_v1_params_proto_rawDescOnce.Do(func() {
		file_mantrachain_token_v1_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantrachain_token_v1_params_proto_rawDescData)
	})
	return file_mantrachain_token_v1_params_proto_rawDescData
}

var file_mantrachain_token_v1_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mantrachain_token_v1_params_proto_goTypes = []interface{}{
	(*Params)(nil), // 0: mantrachain.token.v1.Params
}
var file_mantrachain_token_v1_params_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mantrachain_token_v1_params_proto_init() }
func file_mantrachain_token_v1_params_proto_init() {
	if File_mantrachain_token_v1_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mantrachain_token_v1_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantrachain_token_v1_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mantrachain_token_v1_params_proto_goTypes,
		DependencyIndexes: file_mantrachain_token_v1_params_proto_depIdxs,
		MessageInfos:      file_mantrachain_token_v1_params_proto_msgTypes,
	}.Build()
	File_mantrachain_token_v1_params_proto = out.File
	file_mantrachain_token_v1_params_proto_rawDesc = nil
	file_mantrachain_token_v1_params_proto_goTypes = nil
	file_mantrachain_token_v1_params_proto_depIdxs = nil
}
