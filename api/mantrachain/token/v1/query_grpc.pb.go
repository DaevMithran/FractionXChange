// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mantrachain/token/v1/query.proto

package tokenv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                        = "/mantrachain.token.v1.Query/Params"
	Query_QueryNftCollection_FullMethodName            = "/mantrachain.token.v1.Query/QueryNftCollection"
	Query_QueryNftCollectionsByCreator_FullMethodName  = "/mantrachain.token.v1.Query/QueryNftCollectionsByCreator"
	Query_QueryAllNftCollections_FullMethodName        = "/mantrachain.token.v1.Query/QueryAllNftCollections"
	Query_QueryNft_FullMethodName                      = "/mantrachain.token.v1.Query/QueryNft"
	Query_QueryNftApproved_FullMethodName              = "/mantrachain.token.v1.Query/QueryNftApproved"
	Query_QueryIsApprovedForAllNfts_FullMethodName     = "/mantrachain.token.v1.Query/QueryIsApprovedForAllNfts"
	Query_QueryAllCollectionNfts_FullMethodName        = "/mantrachain.token.v1.Query/QueryAllCollectionNfts"
	Query_QuerySoulBondedNftsCollection_FullMethodName = "/mantrachain.token.v1.Query/QuerySoulBondedNftsCollection"
	Query_QueryRestrictedNftsCollection_FullMethodName = "/mantrachain.token.v1.Query/QueryRestrictedNftsCollection"
	Query_QueryOpenedNftsCollection_FullMethodName     = "/mantrachain.token.v1.Query/QueryOpenedNftsCollection"
	Query_QueryNftCollectionOwner_FullMethodName       = "/mantrachain.token.v1.Query/QueryNftCollectionOwner"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryNftCollection
	QueryNftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error)
	// QueryNftCollectionsByCreator
	QueryNftCollectionsByCreator(ctx context.Context, in *QueryGetNftCollectionsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionsByCreatorResponse, error)
	// QueryAllNftCollections
	QueryAllNftCollections(ctx context.Context, in *QueryGetAllNftCollectionsRequest, opts ...grpc.CallOption) (*QueryGetAllNftCollectionsResponse, error)
	// QueryNft
	QueryNft(ctx context.Context, in *QueryGetNftRequest, opts ...grpc.CallOption) (*QueryGetNftResponse, error)
	// QueryNftApproved
	QueryNftApproved(ctx context.Context, in *QueryGetNftApprovedRequest, opts ...grpc.CallOption) (*QueryGetNftApprovedResponse, error)
	// QueryIsApprovedForAllNfts
	QueryIsApprovedForAllNfts(ctx context.Context, in *QueryGetIsApprovedForAllNftsRequest, opts ...grpc.CallOption) (*QueryGetIsApprovedForAllNftsResponse, error)
	// QueryAllCollectionNfts
	QueryAllCollectionNfts(ctx context.Context, in *QueryGetAllCollectionNftsRequest, opts ...grpc.CallOption) (*QueryGetAllCollectionNftsResponse, error)
	// Queries a list of SoulBondedNftsCollection items.
	QuerySoulBondedNftsCollection(ctx context.Context, in *QueryGetSoulBondedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetSoulBondedNftsCollectionResponse, error)
	// Queries a list of RestrictedNftsCollection items.
	QueryRestrictedNftsCollection(ctx context.Context, in *QueryGetRestrictedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetRestrictedNftsCollectionResponse, error)
	// Queries a list of OpenedNftsCollection items.
	QueryOpenedNftsCollection(ctx context.Context, in *QueryGetOpenedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetOpenedNftsCollectionResponse, error)
	// Queries a list of NftCollectionOwner items.
	QueryNftCollectionOwner(ctx context.Context, in *QueryGetNftCollectionOwnerRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionOwnerResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error) {
	out := new(QueryGetNftCollectionResponse)
	err := c.cc.Invoke(ctx, Query_QueryNftCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftCollectionsByCreator(ctx context.Context, in *QueryGetNftCollectionsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionsByCreatorResponse, error) {
	out := new(QueryGetNftCollectionsByCreatorResponse)
	err := c.cc.Invoke(ctx, Query_QueryNftCollectionsByCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllNftCollections(ctx context.Context, in *QueryGetAllNftCollectionsRequest, opts ...grpc.CallOption) (*QueryGetAllNftCollectionsResponse, error) {
	out := new(QueryGetAllNftCollectionsResponse)
	err := c.cc.Invoke(ctx, Query_QueryAllNftCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNft(ctx context.Context, in *QueryGetNftRequest, opts ...grpc.CallOption) (*QueryGetNftResponse, error) {
	out := new(QueryGetNftResponse)
	err := c.cc.Invoke(ctx, Query_QueryNft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftApproved(ctx context.Context, in *QueryGetNftApprovedRequest, opts ...grpc.CallOption) (*QueryGetNftApprovedResponse, error) {
	out := new(QueryGetNftApprovedResponse)
	err := c.cc.Invoke(ctx, Query_QueryNftApproved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryIsApprovedForAllNfts(ctx context.Context, in *QueryGetIsApprovedForAllNftsRequest, opts ...grpc.CallOption) (*QueryGetIsApprovedForAllNftsResponse, error) {
	out := new(QueryGetIsApprovedForAllNftsResponse)
	err := c.cc.Invoke(ctx, Query_QueryIsApprovedForAllNfts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllCollectionNfts(ctx context.Context, in *QueryGetAllCollectionNftsRequest, opts ...grpc.CallOption) (*QueryGetAllCollectionNftsResponse, error) {
	out := new(QueryGetAllCollectionNftsResponse)
	err := c.cc.Invoke(ctx, Query_QueryAllCollectionNfts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySoulBondedNftsCollection(ctx context.Context, in *QueryGetSoulBondedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetSoulBondedNftsCollectionResponse, error) {
	out := new(QueryGetSoulBondedNftsCollectionResponse)
	err := c.cc.Invoke(ctx, Query_QuerySoulBondedNftsCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRestrictedNftsCollection(ctx context.Context, in *QueryGetRestrictedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetRestrictedNftsCollectionResponse, error) {
	out := new(QueryGetRestrictedNftsCollectionResponse)
	err := c.cc.Invoke(ctx, Query_QueryRestrictedNftsCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOpenedNftsCollection(ctx context.Context, in *QueryGetOpenedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetOpenedNftsCollectionResponse, error) {
	out := new(QueryGetOpenedNftsCollectionResponse)
	err := c.cc.Invoke(ctx, Query_QueryOpenedNftsCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftCollectionOwner(ctx context.Context, in *QueryGetNftCollectionOwnerRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionOwnerResponse, error) {
	out := new(QueryGetNftCollectionOwnerResponse)
	err := c.cc.Invoke(ctx, Query_QueryNftCollectionOwner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryNftCollection
	QueryNftCollection(context.Context, *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error)
	// QueryNftCollectionsByCreator
	QueryNftCollectionsByCreator(context.Context, *QueryGetNftCollectionsByCreatorRequest) (*QueryGetNftCollectionsByCreatorResponse, error)
	// QueryAllNftCollections
	QueryAllNftCollections(context.Context, *QueryGetAllNftCollectionsRequest) (*QueryGetAllNftCollectionsResponse, error)
	// QueryNft
	QueryNft(context.Context, *QueryGetNftRequest) (*QueryGetNftResponse, error)
	// QueryNftApproved
	QueryNftApproved(context.Context, *QueryGetNftApprovedRequest) (*QueryGetNftApprovedResponse, error)
	// QueryIsApprovedForAllNfts
	QueryIsApprovedForAllNfts(context.Context, *QueryGetIsApprovedForAllNftsRequest) (*QueryGetIsApprovedForAllNftsResponse, error)
	// QueryAllCollectionNfts
	QueryAllCollectionNfts(context.Context, *QueryGetAllCollectionNftsRequest) (*QueryGetAllCollectionNftsResponse, error)
	// Queries a list of SoulBondedNftsCollection items.
	QuerySoulBondedNftsCollection(context.Context, *QueryGetSoulBondedNftsCollectionRequest) (*QueryGetSoulBondedNftsCollectionResponse, error)
	// Queries a list of RestrictedNftsCollection items.
	QueryRestrictedNftsCollection(context.Context, *QueryGetRestrictedNftsCollectionRequest) (*QueryGetRestrictedNftsCollectionResponse, error)
	// Queries a list of OpenedNftsCollection items.
	QueryOpenedNftsCollection(context.Context, *QueryGetOpenedNftsCollectionRequest) (*QueryGetOpenedNftsCollectionResponse, error)
	// Queries a list of NftCollectionOwner items.
	QueryNftCollectionOwner(context.Context, *QueryGetNftCollectionOwnerRequest) (*QueryGetNftCollectionOwnerResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) QueryNftCollection(context.Context, *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftCollection not implemented")
}
func (UnimplementedQueryServer) QueryNftCollectionsByCreator(context.Context, *QueryGetNftCollectionsByCreatorRequest) (*QueryGetNftCollectionsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftCollectionsByCreator not implemented")
}
func (UnimplementedQueryServer) QueryAllNftCollections(context.Context, *QueryGetAllNftCollectionsRequest) (*QueryGetAllNftCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllNftCollections not implemented")
}
func (UnimplementedQueryServer) QueryNft(context.Context, *QueryGetNftRequest) (*QueryGetNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNft not implemented")
}
func (UnimplementedQueryServer) QueryNftApproved(context.Context, *QueryGetNftApprovedRequest) (*QueryGetNftApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftApproved not implemented")
}
func (UnimplementedQueryServer) QueryIsApprovedForAllNfts(context.Context, *QueryGetIsApprovedForAllNftsRequest) (*QueryGetIsApprovedForAllNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIsApprovedForAllNfts not implemented")
}
func (UnimplementedQueryServer) QueryAllCollectionNfts(context.Context, *QueryGetAllCollectionNftsRequest) (*QueryGetAllCollectionNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllCollectionNfts not implemented")
}
func (UnimplementedQueryServer) QuerySoulBondedNftsCollection(context.Context, *QueryGetSoulBondedNftsCollectionRequest) (*QueryGetSoulBondedNftsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySoulBondedNftsCollection not implemented")
}
func (UnimplementedQueryServer) QueryRestrictedNftsCollection(context.Context, *QueryGetRestrictedNftsCollectionRequest) (*QueryGetRestrictedNftsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRestrictedNftsCollection not implemented")
}
func (UnimplementedQueryServer) QueryOpenedNftsCollection(context.Context, *QueryGetOpenedNftsCollectionRequest) (*QueryGetOpenedNftsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOpenedNftsCollection not implemented")
}
func (UnimplementedQueryServer) QueryNftCollectionOwner(context.Context, *QueryGetNftCollectionOwnerRequest) (*QueryGetNftCollectionOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftCollectionOwner not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryNftCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftCollection(ctx, req.(*QueryGetNftCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftCollectionsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftCollectionsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryNftCollectionsByCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftCollectionsByCreator(ctx, req.(*QueryGetNftCollectionsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllNftCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllNftCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllNftCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryAllNftCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllNftCollections(ctx, req.(*QueryGetAllNftCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryNft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNft(ctx, req.(*QueryGetNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryNftApproved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftApproved(ctx, req.(*QueryGetNftApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryIsApprovedForAllNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIsApprovedForAllNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryIsApprovedForAllNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryIsApprovedForAllNfts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryIsApprovedForAllNfts(ctx, req.(*QueryGetIsApprovedForAllNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllCollectionNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCollectionNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllCollectionNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryAllCollectionNfts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllCollectionNfts(ctx, req.(*QueryGetAllCollectionNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySoulBondedNftsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSoulBondedNftsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySoulBondedNftsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QuerySoulBondedNftsCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySoulBondedNftsCollection(ctx, req.(*QueryGetSoulBondedNftsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRestrictedNftsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRestrictedNftsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRestrictedNftsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRestrictedNftsCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRestrictedNftsCollection(ctx, req.(*QueryGetRestrictedNftsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOpenedNftsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOpenedNftsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOpenedNftsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryOpenedNftsCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOpenedNftsCollection(ctx, req.(*QueryGetOpenedNftsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftCollectionOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftCollectionOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryNftCollectionOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftCollectionOwner(ctx, req.(*QueryGetNftCollectionOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.token.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryNftCollection",
			Handler:    _Query_QueryNftCollection_Handler,
		},
		{
			MethodName: "QueryNftCollectionsByCreator",
			Handler:    _Query_QueryNftCollectionsByCreator_Handler,
		},
		{
			MethodName: "QueryAllNftCollections",
			Handler:    _Query_QueryAllNftCollections_Handler,
		},
		{
			MethodName: "QueryNft",
			Handler:    _Query_QueryNft_Handler,
		},
		{
			MethodName: "QueryNftApproved",
			Handler:    _Query_QueryNftApproved_Handler,
		},
		{
			MethodName: "QueryIsApprovedForAllNfts",
			Handler:    _Query_QueryIsApprovedForAllNfts_Handler,
		},
		{
			MethodName: "QueryAllCollectionNfts",
			Handler:    _Query_QueryAllCollectionNfts_Handler,
		},
		{
			MethodName: "QuerySoulBondedNftsCollection",
			Handler:    _Query_QuerySoulBondedNftsCollection_Handler,
		},
		{
			MethodName: "QueryRestrictedNftsCollection",
			Handler:    _Query_QueryRestrictedNftsCollection_Handler,
		},
		{
			MethodName: "QueryOpenedNftsCollection",
			Handler:    _Query_QueryOpenedNftsCollection_Handler,
		},
		{
			MethodName: "QueryNftCollectionOwner",
			Handler:    _Query_QueryNftCollectionOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/token/v1/query.proto",
}
