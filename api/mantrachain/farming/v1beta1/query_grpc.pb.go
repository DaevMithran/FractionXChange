// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mantrachain/farming/v1beta1/query.proto

package farmingv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                  = "/mantrachain.farming.v1beta1.Query/Params"
	Query_QueryPlans_FullMethodName              = "/mantrachain.farming.v1beta1.Query/QueryPlans"
	Query_QueryPlan_FullMethodName               = "/mantrachain.farming.v1beta1.Query/QueryPlan"
	Query_QueryPosition_FullMethodName           = "/mantrachain.farming.v1beta1.Query/QueryPosition"
	Query_QueryStakings_FullMethodName           = "/mantrachain.farming.v1beta1.Query/QueryStakings"
	Query_QueryQueuedStakings_FullMethodName     = "/mantrachain.farming.v1beta1.Query/QueryQueuedStakings"
	Query_QueryTotalStakings_FullMethodName      = "/mantrachain.farming.v1beta1.Query/QueryTotalStakings"
	Query_QueryRewards_FullMethodName            = "/mantrachain.farming.v1beta1.Query/QueryRewards"
	Query_QueryUnharvestedRewards_FullMethodName = "/mantrachain.farming.v1beta1.Query/QueryUnharvestedRewards"
	Query_QueryCurrentEpochDays_FullMethodName   = "/mantrachain.farming.v1beta1.Query/QueryCurrentEpochDays"
	Query_QueryHistoricalRewards_FullMethodName  = "/mantrachain.farming.v1beta1.Query/QueryHistoricalRewards"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Plans returns all plans.
	QueryPlans(ctx context.Context, in *QueryPlansRequest, opts ...grpc.CallOption) (*QueryPlansResponse, error)
	// Plan returns a specific plan.
	QueryPlan(ctx context.Context, in *QueryPlanRequest, opts ...grpc.CallOption) (*QueryPlanResponse, error)
	QueryPosition(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error)
	// Stakings returns all stakings by a farmer.
	QueryStakings(ctx context.Context, in *QueryStakingsRequest, opts ...grpc.CallOption) (*QueryStakingsResponse, error)
	// QueryStakings returns all queued stakings by a farmer.
	QueryQueuedStakings(ctx context.Context, in *QueryQueuedStakingsRequest, opts ...grpc.CallOption) (*QueryQueuedStakingsResponse, error)
	// TotalStakings returns total staking amount for a staking coin denom
	QueryTotalStakings(ctx context.Context, in *QueryTotalStakingsRequest, opts ...grpc.CallOption) (*QueryTotalStakingsResponse, error)
	// Rewards returns rewards for a farmer
	QueryRewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error)
	// UnharvestedRewards returns unharvested rewards for a farmer
	QueryUnharvestedRewards(ctx context.Context, in *QueryUnharvestedRewardsRequest, opts ...grpc.CallOption) (*QueryUnharvestedRewardsResponse, error)
	// CurrentEpochDays returns current epoch days.
	QueryCurrentEpochDays(ctx context.Context, in *QueryCurrentEpochDaysRequest, opts ...grpc.CallOption) (*QueryCurrentEpochDaysResponse, error)
	// HistoricalRewards returns HistoricalRewards records for a staking coin denom.
	QueryHistoricalRewards(ctx context.Context, in *QueryHistoricalRewardsRequest, opts ...grpc.CallOption) (*QueryHistoricalRewardsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPlans(ctx context.Context, in *QueryPlansRequest, opts ...grpc.CallOption) (*QueryPlansResponse, error) {
	out := new(QueryPlansResponse)
	err := c.cc.Invoke(ctx, Query_QueryPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPlan(ctx context.Context, in *QueryPlanRequest, opts ...grpc.CallOption) (*QueryPlanResponse, error) {
	out := new(QueryPlanResponse)
	err := c.cc.Invoke(ctx, Query_QueryPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPosition(ctx context.Context, in *QueryPositionRequest, opts ...grpc.CallOption) (*QueryPositionResponse, error) {
	out := new(QueryPositionResponse)
	err := c.cc.Invoke(ctx, Query_QueryPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryStakings(ctx context.Context, in *QueryStakingsRequest, opts ...grpc.CallOption) (*QueryStakingsResponse, error) {
	out := new(QueryStakingsResponse)
	err := c.cc.Invoke(ctx, Query_QueryStakings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryQueuedStakings(ctx context.Context, in *QueryQueuedStakingsRequest, opts ...grpc.CallOption) (*QueryQueuedStakingsResponse, error) {
	out := new(QueryQueuedStakingsResponse)
	err := c.cc.Invoke(ctx, Query_QueryQueuedStakings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryTotalStakings(ctx context.Context, in *QueryTotalStakingsRequest, opts ...grpc.CallOption) (*QueryTotalStakingsResponse, error) {
	out := new(QueryTotalStakingsResponse)
	err := c.cc.Invoke(ctx, Query_QueryTotalStakings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error) {
	out := new(QueryRewardsResponse)
	err := c.cc.Invoke(ctx, Query_QueryRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUnharvestedRewards(ctx context.Context, in *QueryUnharvestedRewardsRequest, opts ...grpc.CallOption) (*QueryUnharvestedRewardsResponse, error) {
	out := new(QueryUnharvestedRewardsResponse)
	err := c.cc.Invoke(ctx, Query_QueryUnharvestedRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCurrentEpochDays(ctx context.Context, in *QueryCurrentEpochDaysRequest, opts ...grpc.CallOption) (*QueryCurrentEpochDaysResponse, error) {
	out := new(QueryCurrentEpochDaysResponse)
	err := c.cc.Invoke(ctx, Query_QueryCurrentEpochDays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryHistoricalRewards(ctx context.Context, in *QueryHistoricalRewardsRequest, opts ...grpc.CallOption) (*QueryHistoricalRewardsResponse, error) {
	out := new(QueryHistoricalRewardsResponse)
	err := c.cc.Invoke(ctx, Query_QueryHistoricalRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Plans returns all plans.
	QueryPlans(context.Context, *QueryPlansRequest) (*QueryPlansResponse, error)
	// Plan returns a specific plan.
	QueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanResponse, error)
	QueryPosition(context.Context, *QueryPositionRequest) (*QueryPositionResponse, error)
	// Stakings returns all stakings by a farmer.
	QueryStakings(context.Context, *QueryStakingsRequest) (*QueryStakingsResponse, error)
	// QueryStakings returns all queued stakings by a farmer.
	QueryQueuedStakings(context.Context, *QueryQueuedStakingsRequest) (*QueryQueuedStakingsResponse, error)
	// TotalStakings returns total staking amount for a staking coin denom
	QueryTotalStakings(context.Context, *QueryTotalStakingsRequest) (*QueryTotalStakingsResponse, error)
	// Rewards returns rewards for a farmer
	QueryRewards(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error)
	// UnharvestedRewards returns unharvested rewards for a farmer
	QueryUnharvestedRewards(context.Context, *QueryUnharvestedRewardsRequest) (*QueryUnharvestedRewardsResponse, error)
	// CurrentEpochDays returns current epoch days.
	QueryCurrentEpochDays(context.Context, *QueryCurrentEpochDaysRequest) (*QueryCurrentEpochDaysResponse, error)
	// HistoricalRewards returns HistoricalRewards records for a staking coin denom.
	QueryHistoricalRewards(context.Context, *QueryHistoricalRewardsRequest) (*QueryHistoricalRewardsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) QueryPlans(context.Context, *QueryPlansRequest) (*QueryPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlans not implemented")
}
func (UnimplementedQueryServer) QueryPlan(context.Context, *QueryPlanRequest) (*QueryPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPlan not implemented")
}
func (UnimplementedQueryServer) QueryPosition(context.Context, *QueryPositionRequest) (*QueryPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPosition not implemented")
}
func (UnimplementedQueryServer) QueryStakings(context.Context, *QueryStakingsRequest) (*QueryStakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStakings not implemented")
}
func (UnimplementedQueryServer) QueryQueuedStakings(context.Context, *QueryQueuedStakingsRequest) (*QueryQueuedStakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryQueuedStakings not implemented")
}
func (UnimplementedQueryServer) QueryTotalStakings(context.Context, *QueryTotalStakingsRequest) (*QueryTotalStakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTotalStakings not implemented")
}
func (UnimplementedQueryServer) QueryRewards(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRewards not implemented")
}
func (UnimplementedQueryServer) QueryUnharvestedRewards(context.Context, *QueryUnharvestedRewardsRequest) (*QueryUnharvestedRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUnharvestedRewards not implemented")
}
func (UnimplementedQueryServer) QueryCurrentEpochDays(context.Context, *QueryCurrentEpochDaysRequest) (*QueryCurrentEpochDaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCurrentEpochDays not implemented")
}
func (UnimplementedQueryServer) QueryHistoricalRewards(context.Context, *QueryHistoricalRewardsRequest) (*QueryHistoricalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryHistoricalRewards not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPlans(ctx, req.(*QueryPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPlan(ctx, req.(*QueryPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPosition(ctx, req.(*QueryPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryStakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryStakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryStakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryStakings(ctx, req.(*QueryStakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryQueuedStakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueuedStakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryQueuedStakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryQueuedStakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryQueuedStakings(ctx, req.(*QueryQueuedStakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryTotalStakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalStakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTotalStakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryTotalStakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTotalStakings(ctx, req.(*QueryTotalStakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRewards(ctx, req.(*QueryRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUnharvestedRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnharvestedRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUnharvestedRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryUnharvestedRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUnharvestedRewards(ctx, req.(*QueryUnharvestedRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCurrentEpochDays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentEpochDaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCurrentEpochDays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryCurrentEpochDays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCurrentEpochDays(ctx, req.(*QueryCurrentEpochDaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryHistoricalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryHistoricalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryHistoricalRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryHistoricalRewards(ctx, req.(*QueryHistoricalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.farming.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryPlans",
			Handler:    _Query_QueryPlans_Handler,
		},
		{
			MethodName: "QueryPlan",
			Handler:    _Query_QueryPlan_Handler,
		},
		{
			MethodName: "QueryPosition",
			Handler:    _Query_QueryPosition_Handler,
		},
		{
			MethodName: "QueryStakings",
			Handler:    _Query_QueryStakings_Handler,
		},
		{
			MethodName: "QueryQueuedStakings",
			Handler:    _Query_QueryQueuedStakings_Handler,
		},
		{
			MethodName: "QueryTotalStakings",
			Handler:    _Query_QueryTotalStakings_Handler,
		},
		{
			MethodName: "QueryRewards",
			Handler:    _Query_QueryRewards_Handler,
		},
		{
			MethodName: "QueryUnharvestedRewards",
			Handler:    _Query_QueryUnharvestedRewards_Handler,
		},
		{
			MethodName: "QueryCurrentEpochDays",
			Handler:    _Query_QueryCurrentEpochDays_Handler,
		},
		{
			MethodName: "QueryHistoricalRewards",
			Handler:    _Query_QueryHistoricalRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/farming/v1beta1/query.proto",
}
