// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package farmingv1beta1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_PublicPlanProposal_3_list)(nil)

type _PublicPlanProposal_3_list struct {
	list *[]*AddPlanRequest
}

func (x *_PublicPlanProposal_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PublicPlanProposal_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PublicPlanProposal_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AddPlanRequest)
	(*x.list)[i] = concreteValue
}

func (x *_PublicPlanProposal_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*AddPlanRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PublicPlanProposal_3_list) AppendMutable() protoreflect.Value {
	v := new(AddPlanRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublicPlanProposal_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PublicPlanProposal_3_list) NewElement() protoreflect.Value {
	v := new(AddPlanRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublicPlanProposal_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PublicPlanProposal_4_list)(nil)

type _PublicPlanProposal_4_list struct {
	list *[]*ModifyPlanRequest
}

func (x *_PublicPlanProposal_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PublicPlanProposal_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PublicPlanProposal_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ModifyPlanRequest)
	(*x.list)[i] = concreteValue
}

func (x *_PublicPlanProposal_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ModifyPlanRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PublicPlanProposal_4_list) AppendMutable() protoreflect.Value {
	v := new(ModifyPlanRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublicPlanProposal_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PublicPlanProposal_4_list) NewElement() protoreflect.Value {
	v := new(ModifyPlanRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublicPlanProposal_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_PublicPlanProposal_5_list)(nil)

type _PublicPlanProposal_5_list struct {
	list *[]*DeletePlanRequest
}

func (x *_PublicPlanProposal_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PublicPlanProposal_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PublicPlanProposal_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DeletePlanRequest)
	(*x.list)[i] = concreteValue
}

func (x *_PublicPlanProposal_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DeletePlanRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PublicPlanProposal_5_list) AppendMutable() protoreflect.Value {
	v := new(DeletePlanRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublicPlanProposal_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PublicPlanProposal_5_list) NewElement() protoreflect.Value {
	v := new(DeletePlanRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PublicPlanProposal_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PublicPlanProposal                      protoreflect.MessageDescriptor
	fd_PublicPlanProposal_title                protoreflect.FieldDescriptor
	fd_PublicPlanProposal_description          protoreflect.FieldDescriptor
	fd_PublicPlanProposal_add_plan_requests    protoreflect.FieldDescriptor
	fd_PublicPlanProposal_modify_plan_requests protoreflect.FieldDescriptor
	fd_PublicPlanProposal_delete_plan_requests protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_proposal_proto_init()
	md_PublicPlanProposal = File_mantrachain_farming_v1beta1_proposal_proto.Messages().ByName("PublicPlanProposal")
	fd_PublicPlanProposal_title = md_PublicPlanProposal.Fields().ByName("title")
	fd_PublicPlanProposal_description = md_PublicPlanProposal.Fields().ByName("description")
	fd_PublicPlanProposal_add_plan_requests = md_PublicPlanProposal.Fields().ByName("add_plan_requests")
	fd_PublicPlanProposal_modify_plan_requests = md_PublicPlanProposal.Fields().ByName("modify_plan_requests")
	fd_PublicPlanProposal_delete_plan_requests = md_PublicPlanProposal.Fields().ByName("delete_plan_requests")
}

var _ protoreflect.Message = (*fastReflection_PublicPlanProposal)(nil)

type fastReflection_PublicPlanProposal PublicPlanProposal

func (x *PublicPlanProposal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PublicPlanProposal)(x)
}

func (x *PublicPlanProposal) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PublicPlanProposal_messageType fastReflection_PublicPlanProposal_messageType
var _ protoreflect.MessageType = fastReflection_PublicPlanProposal_messageType{}

type fastReflection_PublicPlanProposal_messageType struct{}

func (x fastReflection_PublicPlanProposal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PublicPlanProposal)(nil)
}
func (x fastReflection_PublicPlanProposal_messageType) New() protoreflect.Message {
	return new(fastReflection_PublicPlanProposal)
}
func (x fastReflection_PublicPlanProposal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PublicPlanProposal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PublicPlanProposal) Descriptor() protoreflect.MessageDescriptor {
	return md_PublicPlanProposal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PublicPlanProposal) Type() protoreflect.MessageType {
	return _fastReflection_PublicPlanProposal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PublicPlanProposal) New() protoreflect.Message {
	return new(fastReflection_PublicPlanProposal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PublicPlanProposal) Interface() protoreflect.ProtoMessage {
	return (*PublicPlanProposal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PublicPlanProposal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Title != "" {
		value := protoreflect.ValueOfString(x.Title)
		if !f(fd_PublicPlanProposal_title, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_PublicPlanProposal_description, value) {
			return
		}
	}
	if len(x.AddPlanRequests) != 0 {
		value := protoreflect.ValueOfList(&_PublicPlanProposal_3_list{list: &x.AddPlanRequests})
		if !f(fd_PublicPlanProposal_add_plan_requests, value) {
			return
		}
	}
	if len(x.ModifyPlanRequests) != 0 {
		value := protoreflect.ValueOfList(&_PublicPlanProposal_4_list{list: &x.ModifyPlanRequests})
		if !f(fd_PublicPlanProposal_modify_plan_requests, value) {
			return
		}
	}
	if len(x.DeletePlanRequests) != 0 {
		value := protoreflect.ValueOfList(&_PublicPlanProposal_5_list{list: &x.DeletePlanRequests})
		if !f(fd_PublicPlanProposal_delete_plan_requests, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PublicPlanProposal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PublicPlanProposal.title":
		return x.Title != ""
	case "mantrachain.farming.v1beta1.PublicPlanProposal.description":
		return x.Description != ""
	case "mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests":
		return len(x.AddPlanRequests) != 0
	case "mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests":
		return len(x.ModifyPlanRequests) != 0
	case "mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests":
		return len(x.DeletePlanRequests) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PublicPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PublicPlanProposal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublicPlanProposal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PublicPlanProposal.title":
		x.Title = ""
	case "mantrachain.farming.v1beta1.PublicPlanProposal.description":
		x.Description = ""
	case "mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests":
		x.AddPlanRequests = nil
	case "mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests":
		x.ModifyPlanRequests = nil
	case "mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests":
		x.DeletePlanRequests = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PublicPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PublicPlanProposal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PublicPlanProposal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.PublicPlanProposal.title":
		value := x.Title
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests":
		if len(x.AddPlanRequests) == 0 {
			return protoreflect.ValueOfList(&_PublicPlanProposal_3_list{})
		}
		listValue := &_PublicPlanProposal_3_list{list: &x.AddPlanRequests}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests":
		if len(x.ModifyPlanRequests) == 0 {
			return protoreflect.ValueOfList(&_PublicPlanProposal_4_list{})
		}
		listValue := &_PublicPlanProposal_4_list{list: &x.ModifyPlanRequests}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests":
		if len(x.DeletePlanRequests) == 0 {
			return protoreflect.ValueOfList(&_PublicPlanProposal_5_list{})
		}
		listValue := &_PublicPlanProposal_5_list{list: &x.DeletePlanRequests}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PublicPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PublicPlanProposal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublicPlanProposal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PublicPlanProposal.title":
		x.Title = value.Interface().(string)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.description":
		x.Description = value.Interface().(string)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests":
		lv := value.List()
		clv := lv.(*_PublicPlanProposal_3_list)
		x.AddPlanRequests = *clv.list
	case "mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests":
		lv := value.List()
		clv := lv.(*_PublicPlanProposal_4_list)
		x.ModifyPlanRequests = *clv.list
	case "mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests":
		lv := value.List()
		clv := lv.(*_PublicPlanProposal_5_list)
		x.DeletePlanRequests = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PublicPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PublicPlanProposal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublicPlanProposal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests":
		if x.AddPlanRequests == nil {
			x.AddPlanRequests = []*AddPlanRequest{}
		}
		value := &_PublicPlanProposal_3_list{list: &x.AddPlanRequests}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests":
		if x.ModifyPlanRequests == nil {
			x.ModifyPlanRequests = []*ModifyPlanRequest{}
		}
		value := &_PublicPlanProposal_4_list{list: &x.ModifyPlanRequests}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests":
		if x.DeletePlanRequests == nil {
			x.DeletePlanRequests = []*DeletePlanRequest{}
		}
		value := &_PublicPlanProposal_5_list{list: &x.DeletePlanRequests}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.PublicPlanProposal.title":
		panic(fmt.Errorf("field title of message mantrachain.farming.v1beta1.PublicPlanProposal is not mutable"))
	case "mantrachain.farming.v1beta1.PublicPlanProposal.description":
		panic(fmt.Errorf("field description of message mantrachain.farming.v1beta1.PublicPlanProposal is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PublicPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PublicPlanProposal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PublicPlanProposal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PublicPlanProposal.title":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.PublicPlanProposal.description":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests":
		list := []*AddPlanRequest{}
		return protoreflect.ValueOfList(&_PublicPlanProposal_3_list{list: &list})
	case "mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests":
		list := []*ModifyPlanRequest{}
		return protoreflect.ValueOfList(&_PublicPlanProposal_4_list{list: &list})
	case "mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests":
		list := []*DeletePlanRequest{}
		return protoreflect.ValueOfList(&_PublicPlanProposal_5_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PublicPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PublicPlanProposal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PublicPlanProposal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.PublicPlanProposal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PublicPlanProposal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PublicPlanProposal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PublicPlanProposal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PublicPlanProposal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PublicPlanProposal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Title)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.AddPlanRequests) > 0 {
			for _, e := range x.AddPlanRequests {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ModifyPlanRequests) > 0 {
			for _, e := range x.ModifyPlanRequests {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.DeletePlanRequests) > 0 {
			for _, e := range x.DeletePlanRequests {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PublicPlanProposal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.DeletePlanRequests) > 0 {
			for iNdEx := len(x.DeletePlanRequests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DeletePlanRequests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.ModifyPlanRequests) > 0 {
			for iNdEx := len(x.ModifyPlanRequests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.ModifyPlanRequests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.AddPlanRequests) > 0 {
			for iNdEx := len(x.AddPlanRequests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AddPlanRequests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Title) > 0 {
			i -= len(x.Title)
			copy(dAtA[i:], x.Title)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Title)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PublicPlanProposal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PublicPlanProposal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PublicPlanProposal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Title = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AddPlanRequests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AddPlanRequests = append(x.AddPlanRequests, &AddPlanRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AddPlanRequests[len(x.AddPlanRequests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ModifyPlanRequests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ModifyPlanRequests = append(x.ModifyPlanRequests, &ModifyPlanRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ModifyPlanRequests[len(x.ModifyPlanRequests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DeletePlanRequests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DeletePlanRequests = append(x.DeletePlanRequests, &DeletePlanRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DeletePlanRequests[len(x.DeletePlanRequests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AddPlanRequest_4_list)(nil)

type _AddPlanRequest_4_list struct {
	list *[]*v1beta1.DecCoin
}

func (x *_AddPlanRequest_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AddPlanRequest_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AddPlanRequest_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	(*x.list)[i] = concreteValue
}

func (x *_AddPlanRequest_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AddPlanRequest_4_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AddPlanRequest_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AddPlanRequest_4_list) NewElement() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AddPlanRequest_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AddPlanRequest_7_list)(nil)

type _AddPlanRequest_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AddPlanRequest_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AddPlanRequest_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AddPlanRequest_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AddPlanRequest_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AddPlanRequest_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AddPlanRequest_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AddPlanRequest_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AddPlanRequest_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AddPlanRequest                      protoreflect.MessageDescriptor
	fd_AddPlanRequest_name                 protoreflect.FieldDescriptor
	fd_AddPlanRequest_farming_pool_address protoreflect.FieldDescriptor
	fd_AddPlanRequest_termination_address  protoreflect.FieldDescriptor
	fd_AddPlanRequest_staking_coin_weights protoreflect.FieldDescriptor
	fd_AddPlanRequest_start_time           protoreflect.FieldDescriptor
	fd_AddPlanRequest_end_time             protoreflect.FieldDescriptor
	fd_AddPlanRequest_epoch_amount         protoreflect.FieldDescriptor
	fd_AddPlanRequest_epoch_ratio          protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_proposal_proto_init()
	md_AddPlanRequest = File_mantrachain_farming_v1beta1_proposal_proto.Messages().ByName("AddPlanRequest")
	fd_AddPlanRequest_name = md_AddPlanRequest.Fields().ByName("name")
	fd_AddPlanRequest_farming_pool_address = md_AddPlanRequest.Fields().ByName("farming_pool_address")
	fd_AddPlanRequest_termination_address = md_AddPlanRequest.Fields().ByName("termination_address")
	fd_AddPlanRequest_staking_coin_weights = md_AddPlanRequest.Fields().ByName("staking_coin_weights")
	fd_AddPlanRequest_start_time = md_AddPlanRequest.Fields().ByName("start_time")
	fd_AddPlanRequest_end_time = md_AddPlanRequest.Fields().ByName("end_time")
	fd_AddPlanRequest_epoch_amount = md_AddPlanRequest.Fields().ByName("epoch_amount")
	fd_AddPlanRequest_epoch_ratio = md_AddPlanRequest.Fields().ByName("epoch_ratio")
}

var _ protoreflect.Message = (*fastReflection_AddPlanRequest)(nil)

type fastReflection_AddPlanRequest AddPlanRequest

func (x *AddPlanRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AddPlanRequest)(x)
}

func (x *AddPlanRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AddPlanRequest_messageType fastReflection_AddPlanRequest_messageType
var _ protoreflect.MessageType = fastReflection_AddPlanRequest_messageType{}

type fastReflection_AddPlanRequest_messageType struct{}

func (x fastReflection_AddPlanRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AddPlanRequest)(nil)
}
func (x fastReflection_AddPlanRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_AddPlanRequest)
}
func (x fastReflection_AddPlanRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AddPlanRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AddPlanRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_AddPlanRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AddPlanRequest) Type() protoreflect.MessageType {
	return _fastReflection_AddPlanRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AddPlanRequest) New() protoreflect.Message {
	return new(fastReflection_AddPlanRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AddPlanRequest) Interface() protoreflect.ProtoMessage {
	return (*AddPlanRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AddPlanRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_AddPlanRequest_name, value) {
			return
		}
	}
	if x.FarmingPoolAddress != "" {
		value := protoreflect.ValueOfString(x.FarmingPoolAddress)
		if !f(fd_AddPlanRequest_farming_pool_address, value) {
			return
		}
	}
	if x.TerminationAddress != "" {
		value := protoreflect.ValueOfString(x.TerminationAddress)
		if !f(fd_AddPlanRequest_termination_address, value) {
			return
		}
	}
	if len(x.StakingCoinWeights) != 0 {
		value := protoreflect.ValueOfList(&_AddPlanRequest_4_list{list: &x.StakingCoinWeights})
		if !f(fd_AddPlanRequest_staking_coin_weights, value) {
			return
		}
	}
	if x.StartTime != nil {
		value := protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
		if !f(fd_AddPlanRequest_start_time, value) {
			return
		}
	}
	if x.EndTime != nil {
		value := protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
		if !f(fd_AddPlanRequest_end_time, value) {
			return
		}
	}
	if len(x.EpochAmount) != 0 {
		value := protoreflect.ValueOfList(&_AddPlanRequest_7_list{list: &x.EpochAmount})
		if !f(fd_AddPlanRequest_epoch_amount, value) {
			return
		}
	}
	if x.EpochRatio != "" {
		value := protoreflect.ValueOfString(x.EpochRatio)
		if !f(fd_AddPlanRequest_epoch_ratio, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AddPlanRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.AddPlanRequest.name":
		return x.Name != ""
	case "mantrachain.farming.v1beta1.AddPlanRequest.farming_pool_address":
		return x.FarmingPoolAddress != ""
	case "mantrachain.farming.v1beta1.AddPlanRequest.termination_address":
		return x.TerminationAddress != ""
	case "mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights":
		return len(x.StakingCoinWeights) != 0
	case "mantrachain.farming.v1beta1.AddPlanRequest.start_time":
		return x.StartTime != nil
	case "mantrachain.farming.v1beta1.AddPlanRequest.end_time":
		return x.EndTime != nil
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount":
		return len(x.EpochAmount) != 0
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_ratio":
		return x.EpochRatio != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.AddPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.AddPlanRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AddPlanRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.AddPlanRequest.name":
		x.Name = ""
	case "mantrachain.farming.v1beta1.AddPlanRequest.farming_pool_address":
		x.FarmingPoolAddress = ""
	case "mantrachain.farming.v1beta1.AddPlanRequest.termination_address":
		x.TerminationAddress = ""
	case "mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights":
		x.StakingCoinWeights = nil
	case "mantrachain.farming.v1beta1.AddPlanRequest.start_time":
		x.StartTime = nil
	case "mantrachain.farming.v1beta1.AddPlanRequest.end_time":
		x.EndTime = nil
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount":
		x.EpochAmount = nil
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_ratio":
		x.EpochRatio = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.AddPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.AddPlanRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AddPlanRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.AddPlanRequest.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.AddPlanRequest.farming_pool_address":
		value := x.FarmingPoolAddress
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.AddPlanRequest.termination_address":
		value := x.TerminationAddress
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights":
		if len(x.StakingCoinWeights) == 0 {
			return protoreflect.ValueOfList(&_AddPlanRequest_4_list{})
		}
		listValue := &_AddPlanRequest_4_list{list: &x.StakingCoinWeights}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.AddPlanRequest.start_time":
		value := x.StartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.AddPlanRequest.end_time":
		value := x.EndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount":
		if len(x.EpochAmount) == 0 {
			return protoreflect.ValueOfList(&_AddPlanRequest_7_list{})
		}
		listValue := &_AddPlanRequest_7_list{list: &x.EpochAmount}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_ratio":
		value := x.EpochRatio
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.AddPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.AddPlanRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AddPlanRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.AddPlanRequest.name":
		x.Name = value.Interface().(string)
	case "mantrachain.farming.v1beta1.AddPlanRequest.farming_pool_address":
		x.FarmingPoolAddress = value.Interface().(string)
	case "mantrachain.farming.v1beta1.AddPlanRequest.termination_address":
		x.TerminationAddress = value.Interface().(string)
	case "mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights":
		lv := value.List()
		clv := lv.(*_AddPlanRequest_4_list)
		x.StakingCoinWeights = *clv.list
	case "mantrachain.farming.v1beta1.AddPlanRequest.start_time":
		x.StartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.farming.v1beta1.AddPlanRequest.end_time":
		x.EndTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount":
		lv := value.List()
		clv := lv.(*_AddPlanRequest_7_list)
		x.EpochAmount = *clv.list
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_ratio":
		x.EpochRatio = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.AddPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.AddPlanRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AddPlanRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights":
		if x.StakingCoinWeights == nil {
			x.StakingCoinWeights = []*v1beta1.DecCoin{}
		}
		value := &_AddPlanRequest_4_list{list: &x.StakingCoinWeights}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.AddPlanRequest.start_time":
		if x.StartTime == nil {
			x.StartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
	case "mantrachain.farming.v1beta1.AddPlanRequest.end_time":
		if x.EndTime == nil {
			x.EndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount":
		if x.EpochAmount == nil {
			x.EpochAmount = []*v1beta1.Coin{}
		}
		value := &_AddPlanRequest_7_list{list: &x.EpochAmount}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.AddPlanRequest.name":
		panic(fmt.Errorf("field name of message mantrachain.farming.v1beta1.AddPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.AddPlanRequest.farming_pool_address":
		panic(fmt.Errorf("field farming_pool_address of message mantrachain.farming.v1beta1.AddPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.AddPlanRequest.termination_address":
		panic(fmt.Errorf("field termination_address of message mantrachain.farming.v1beta1.AddPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_ratio":
		panic(fmt.Errorf("field epoch_ratio of message mantrachain.farming.v1beta1.AddPlanRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.AddPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.AddPlanRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AddPlanRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.AddPlanRequest.name":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.AddPlanRequest.farming_pool_address":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.AddPlanRequest.termination_address":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights":
		list := []*v1beta1.DecCoin{}
		return protoreflect.ValueOfList(&_AddPlanRequest_4_list{list: &list})
	case "mantrachain.farming.v1beta1.AddPlanRequest.start_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.AddPlanRequest.end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AddPlanRequest_7_list{list: &list})
	case "mantrachain.farming.v1beta1.AddPlanRequest.epoch_ratio":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.AddPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.AddPlanRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AddPlanRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.AddPlanRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AddPlanRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AddPlanRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AddPlanRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AddPlanRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AddPlanRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FarmingPoolAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TerminationAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.StakingCoinWeights) > 0 {
			for _, e := range x.StakingCoinWeights {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.StartTime != nil {
			l = options.Size(x.StartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EndTime != nil {
			l = options.Size(x.EndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.EpochAmount) > 0 {
			for _, e := range x.EpochAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.EpochRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AddPlanRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EpochRatio) > 0 {
			i -= len(x.EpochRatio)
			copy(dAtA[i:], x.EpochRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EpochRatio)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.EpochAmount) > 0 {
			for iNdEx := len(x.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EpochAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if x.EndTime != nil {
			encoded, err := options.Marshal(x.EndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.StartTime != nil {
			encoded, err := options.Marshal(x.StartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.StakingCoinWeights) > 0 {
			for iNdEx := len(x.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StakingCoinWeights[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.TerminationAddress) > 0 {
			i -= len(x.TerminationAddress)
			copy(dAtA[i:], x.TerminationAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TerminationAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.FarmingPoolAddress) > 0 {
			i -= len(x.FarmingPoolAddress)
			copy(dAtA[i:], x.FarmingPoolAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FarmingPoolAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AddPlanRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AddPlanRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AddPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TerminationAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinWeights = append(x.StakingCoinWeights, &v1beta1.DecCoin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StakingCoinWeights[len(x.StakingCoinWeights)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StartTime == nil {
					x.StartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EndTime == nil {
					x.EndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpochAmount = append(x.EpochAmount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochAmount[len(x.EpochAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpochRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ModifyPlanRequest_5_list)(nil)

type _ModifyPlanRequest_5_list struct {
	list *[]*v1beta1.DecCoin
}

func (x *_ModifyPlanRequest_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ModifyPlanRequest_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ModifyPlanRequest_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	(*x.list)[i] = concreteValue
}

func (x *_ModifyPlanRequest_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ModifyPlanRequest_5_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ModifyPlanRequest_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ModifyPlanRequest_5_list) NewElement() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ModifyPlanRequest_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ModifyPlanRequest_8_list)(nil)

type _ModifyPlanRequest_8_list struct {
	list *[]*v1beta1.Coin
}

func (x *_ModifyPlanRequest_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ModifyPlanRequest_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ModifyPlanRequest_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_ModifyPlanRequest_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ModifyPlanRequest_8_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ModifyPlanRequest_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ModifyPlanRequest_8_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ModifyPlanRequest_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ModifyPlanRequest                      protoreflect.MessageDescriptor
	fd_ModifyPlanRequest_plan_id              protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_name                 protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_farming_pool_address protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_termination_address  protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_staking_coin_weights protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_start_time           protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_end_time             protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_epoch_amount         protoreflect.FieldDescriptor
	fd_ModifyPlanRequest_epoch_ratio          protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_proposal_proto_init()
	md_ModifyPlanRequest = File_mantrachain_farming_v1beta1_proposal_proto.Messages().ByName("ModifyPlanRequest")
	fd_ModifyPlanRequest_plan_id = md_ModifyPlanRequest.Fields().ByName("plan_id")
	fd_ModifyPlanRequest_name = md_ModifyPlanRequest.Fields().ByName("name")
	fd_ModifyPlanRequest_farming_pool_address = md_ModifyPlanRequest.Fields().ByName("farming_pool_address")
	fd_ModifyPlanRequest_termination_address = md_ModifyPlanRequest.Fields().ByName("termination_address")
	fd_ModifyPlanRequest_staking_coin_weights = md_ModifyPlanRequest.Fields().ByName("staking_coin_weights")
	fd_ModifyPlanRequest_start_time = md_ModifyPlanRequest.Fields().ByName("start_time")
	fd_ModifyPlanRequest_end_time = md_ModifyPlanRequest.Fields().ByName("end_time")
	fd_ModifyPlanRequest_epoch_amount = md_ModifyPlanRequest.Fields().ByName("epoch_amount")
	fd_ModifyPlanRequest_epoch_ratio = md_ModifyPlanRequest.Fields().ByName("epoch_ratio")
}

var _ protoreflect.Message = (*fastReflection_ModifyPlanRequest)(nil)

type fastReflection_ModifyPlanRequest ModifyPlanRequest

func (x *ModifyPlanRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ModifyPlanRequest)(x)
}

func (x *ModifyPlanRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ModifyPlanRequest_messageType fastReflection_ModifyPlanRequest_messageType
var _ protoreflect.MessageType = fastReflection_ModifyPlanRequest_messageType{}

type fastReflection_ModifyPlanRequest_messageType struct{}

func (x fastReflection_ModifyPlanRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ModifyPlanRequest)(nil)
}
func (x fastReflection_ModifyPlanRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_ModifyPlanRequest)
}
func (x fastReflection_ModifyPlanRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ModifyPlanRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ModifyPlanRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_ModifyPlanRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ModifyPlanRequest) Type() protoreflect.MessageType {
	return _fastReflection_ModifyPlanRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ModifyPlanRequest) New() protoreflect.Message {
	return new(fastReflection_ModifyPlanRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ModifyPlanRequest) Interface() protoreflect.ProtoMessage {
	return (*ModifyPlanRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ModifyPlanRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PlanId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PlanId)
		if !f(fd_ModifyPlanRequest_plan_id, value) {
			return
		}
	}
	if x.Name != "" {
		value := protoreflect.ValueOfString(x.Name)
		if !f(fd_ModifyPlanRequest_name, value) {
			return
		}
	}
	if x.FarmingPoolAddress != "" {
		value := protoreflect.ValueOfString(x.FarmingPoolAddress)
		if !f(fd_ModifyPlanRequest_farming_pool_address, value) {
			return
		}
	}
	if x.TerminationAddress != "" {
		value := protoreflect.ValueOfString(x.TerminationAddress)
		if !f(fd_ModifyPlanRequest_termination_address, value) {
			return
		}
	}
	if len(x.StakingCoinWeights) != 0 {
		value := protoreflect.ValueOfList(&_ModifyPlanRequest_5_list{list: &x.StakingCoinWeights})
		if !f(fd_ModifyPlanRequest_staking_coin_weights, value) {
			return
		}
	}
	if x.StartTime != nil {
		value := protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
		if !f(fd_ModifyPlanRequest_start_time, value) {
			return
		}
	}
	if x.EndTime != nil {
		value := protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
		if !f(fd_ModifyPlanRequest_end_time, value) {
			return
		}
	}
	if len(x.EpochAmount) != 0 {
		value := protoreflect.ValueOfList(&_ModifyPlanRequest_8_list{list: &x.EpochAmount})
		if !f(fd_ModifyPlanRequest_epoch_amount, value) {
			return
		}
	}
	if x.EpochRatio != "" {
		value := protoreflect.ValueOfString(x.EpochRatio)
		if !f(fd_ModifyPlanRequest_epoch_ratio, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ModifyPlanRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.plan_id":
		return x.PlanId != uint64(0)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.name":
		return x.Name != ""
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.farming_pool_address":
		return x.FarmingPoolAddress != ""
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.termination_address":
		return x.TerminationAddress != ""
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights":
		return len(x.StakingCoinWeights) != 0
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.start_time":
		return x.StartTime != nil
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.end_time":
		return x.EndTime != nil
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount":
		return len(x.EpochAmount) != 0
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_ratio":
		return x.EpochRatio != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.ModifyPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.ModifyPlanRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModifyPlanRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.plan_id":
		x.PlanId = uint64(0)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.name":
		x.Name = ""
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.farming_pool_address":
		x.FarmingPoolAddress = ""
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.termination_address":
		x.TerminationAddress = ""
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights":
		x.StakingCoinWeights = nil
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.start_time":
		x.StartTime = nil
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.end_time":
		x.EndTime = nil
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount":
		x.EpochAmount = nil
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_ratio":
		x.EpochRatio = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.ModifyPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.ModifyPlanRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ModifyPlanRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.plan_id":
		value := x.PlanId
		return protoreflect.ValueOfUint64(value)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.name":
		value := x.Name
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.farming_pool_address":
		value := x.FarmingPoolAddress
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.termination_address":
		value := x.TerminationAddress
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights":
		if len(x.StakingCoinWeights) == 0 {
			return protoreflect.ValueOfList(&_ModifyPlanRequest_5_list{})
		}
		listValue := &_ModifyPlanRequest_5_list{list: &x.StakingCoinWeights}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.start_time":
		value := x.StartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.end_time":
		value := x.EndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount":
		if len(x.EpochAmount) == 0 {
			return protoreflect.ValueOfList(&_ModifyPlanRequest_8_list{})
		}
		listValue := &_ModifyPlanRequest_8_list{list: &x.EpochAmount}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_ratio":
		value := x.EpochRatio
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.ModifyPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.ModifyPlanRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModifyPlanRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.plan_id":
		x.PlanId = value.Uint()
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.name":
		x.Name = value.Interface().(string)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.farming_pool_address":
		x.FarmingPoolAddress = value.Interface().(string)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.termination_address":
		x.TerminationAddress = value.Interface().(string)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights":
		lv := value.List()
		clv := lv.(*_ModifyPlanRequest_5_list)
		x.StakingCoinWeights = *clv.list
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.start_time":
		x.StartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.end_time":
		x.EndTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount":
		lv := value.List()
		clv := lv.(*_ModifyPlanRequest_8_list)
		x.EpochAmount = *clv.list
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_ratio":
		x.EpochRatio = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.ModifyPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.ModifyPlanRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModifyPlanRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights":
		if x.StakingCoinWeights == nil {
			x.StakingCoinWeights = []*v1beta1.DecCoin{}
		}
		value := &_ModifyPlanRequest_5_list{list: &x.StakingCoinWeights}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.start_time":
		if x.StartTime == nil {
			x.StartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.end_time":
		if x.EndTime == nil {
			x.EndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount":
		if x.EpochAmount == nil {
			x.EpochAmount = []*v1beta1.Coin{}
		}
		value := &_ModifyPlanRequest_8_list{list: &x.EpochAmount}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.plan_id":
		panic(fmt.Errorf("field plan_id of message mantrachain.farming.v1beta1.ModifyPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.name":
		panic(fmt.Errorf("field name of message mantrachain.farming.v1beta1.ModifyPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.farming_pool_address":
		panic(fmt.Errorf("field farming_pool_address of message mantrachain.farming.v1beta1.ModifyPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.termination_address":
		panic(fmt.Errorf("field termination_address of message mantrachain.farming.v1beta1.ModifyPlanRequest is not mutable"))
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_ratio":
		panic(fmt.Errorf("field epoch_ratio of message mantrachain.farming.v1beta1.ModifyPlanRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.ModifyPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.ModifyPlanRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ModifyPlanRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.plan_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.name":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.farming_pool_address":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.termination_address":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights":
		list := []*v1beta1.DecCoin{}
		return protoreflect.ValueOfList(&_ModifyPlanRequest_5_list{list: &list})
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.start_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_ModifyPlanRequest_8_list{list: &list})
	case "mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_ratio":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.ModifyPlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.ModifyPlanRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ModifyPlanRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.ModifyPlanRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ModifyPlanRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ModifyPlanRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ModifyPlanRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ModifyPlanRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ModifyPlanRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PlanId != 0 {
			n += 1 + runtime.Sov(uint64(x.PlanId))
		}
		l = len(x.Name)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FarmingPoolAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TerminationAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.StakingCoinWeights) > 0 {
			for _, e := range x.StakingCoinWeights {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.StartTime != nil {
			l = options.Size(x.StartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EndTime != nil {
			l = options.Size(x.EndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.EpochAmount) > 0 {
			for _, e := range x.EpochAmount {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.EpochRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ModifyPlanRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EpochRatio) > 0 {
			i -= len(x.EpochRatio)
			copy(dAtA[i:], x.EpochRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EpochRatio)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.EpochAmount) > 0 {
			for iNdEx := len(x.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EpochAmount[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if x.EndTime != nil {
			encoded, err := options.Marshal(x.EndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.StartTime != nil {
			encoded, err := options.Marshal(x.StartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.StakingCoinWeights) > 0 {
			for iNdEx := len(x.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StakingCoinWeights[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.TerminationAddress) > 0 {
			i -= len(x.TerminationAddress)
			copy(dAtA[i:], x.TerminationAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TerminationAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.FarmingPoolAddress) > 0 {
			i -= len(x.FarmingPoolAddress)
			copy(dAtA[i:], x.FarmingPoolAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FarmingPoolAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Name) > 0 {
			i -= len(x.Name)
			copy(dAtA[i:], x.Name)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Name)))
			i--
			dAtA[i] = 0x12
		}
		if x.PlanId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PlanId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ModifyPlanRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ModifyPlanRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ModifyPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
				}
				x.PlanId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PlanId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Name = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TerminationAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinWeights = append(x.StakingCoinWeights, &v1beta1.DecCoin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StakingCoinWeights[len(x.StakingCoinWeights)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StartTime == nil {
					x.StartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EndTime == nil {
					x.EndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpochAmount = append(x.EpochAmount, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EpochAmount[len(x.EpochAmount)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EpochRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DeletePlanRequest         protoreflect.MessageDescriptor
	fd_DeletePlanRequest_plan_id protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_proposal_proto_init()
	md_DeletePlanRequest = File_mantrachain_farming_v1beta1_proposal_proto.Messages().ByName("DeletePlanRequest")
	fd_DeletePlanRequest_plan_id = md_DeletePlanRequest.Fields().ByName("plan_id")
}

var _ protoreflect.Message = (*fastReflection_DeletePlanRequest)(nil)

type fastReflection_DeletePlanRequest DeletePlanRequest

func (x *DeletePlanRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DeletePlanRequest)(x)
}

func (x *DeletePlanRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DeletePlanRequest_messageType fastReflection_DeletePlanRequest_messageType
var _ protoreflect.MessageType = fastReflection_DeletePlanRequest_messageType{}

type fastReflection_DeletePlanRequest_messageType struct{}

func (x fastReflection_DeletePlanRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DeletePlanRequest)(nil)
}
func (x fastReflection_DeletePlanRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_DeletePlanRequest)
}
func (x fastReflection_DeletePlanRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DeletePlanRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DeletePlanRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_DeletePlanRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DeletePlanRequest) Type() protoreflect.MessageType {
	return _fastReflection_DeletePlanRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DeletePlanRequest) New() protoreflect.Message {
	return new(fastReflection_DeletePlanRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DeletePlanRequest) Interface() protoreflect.ProtoMessage {
	return (*DeletePlanRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DeletePlanRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PlanId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PlanId)
		if !f(fd_DeletePlanRequest_plan_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DeletePlanRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.DeletePlanRequest.plan_id":
		return x.PlanId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.DeletePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.DeletePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeletePlanRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.DeletePlanRequest.plan_id":
		x.PlanId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.DeletePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.DeletePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DeletePlanRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.DeletePlanRequest.plan_id":
		value := x.PlanId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.DeletePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.DeletePlanRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeletePlanRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.DeletePlanRequest.plan_id":
		x.PlanId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.DeletePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.DeletePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeletePlanRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.DeletePlanRequest.plan_id":
		panic(fmt.Errorf("field plan_id of message mantrachain.farming.v1beta1.DeletePlanRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.DeletePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.DeletePlanRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DeletePlanRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.DeletePlanRequest.plan_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.DeletePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.DeletePlanRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DeletePlanRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.DeletePlanRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DeletePlanRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DeletePlanRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DeletePlanRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DeletePlanRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DeletePlanRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PlanId != 0 {
			n += 1 + runtime.Sov(uint64(x.PlanId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DeletePlanRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PlanId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PlanId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DeletePlanRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DeletePlanRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DeletePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
				}
				x.PlanId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PlanId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mantrachain/farming/v1beta1/proposal.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PublicPlanProposal defines a public farming plan governance proposal that receives one of the following requests:
// A request that creates a public farming plan, a request that updates the plan, and a request that deletes the plan.
// For public plan creation, depending on which field is passed, either epoch amount or epoch ratio, it creates a fixed
// amount plan or ratio plan.
type PublicPlanProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// title specifies the title of the plan
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description specifies the description of the plan
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// add_plan_requests specifies AddPlanRequest object
	AddPlanRequests []*AddPlanRequest `protobuf:"bytes,3,rep,name=add_plan_requests,json=addPlanRequests,proto3" json:"add_plan_requests,omitempty"`
	// modify_plan_requests specifies ModifyPlanRequest object
	ModifyPlanRequests []*ModifyPlanRequest `protobuf:"bytes,4,rep,name=modify_plan_requests,json=modifyPlanRequests,proto3" json:"modify_plan_requests,omitempty"`
	// delete_plan_requests specifies DeletePlanRequest object
	DeletePlanRequests []*DeletePlanRequest `protobuf:"bytes,5,rep,name=delete_plan_requests,json=deletePlanRequests,proto3" json:"delete_plan_requests,omitempty"`
}

func (x *PublicPlanProposal) Reset() {
	*x = PublicPlanProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicPlanProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicPlanProposal) ProtoMessage() {}

// Deprecated: Use PublicPlanProposal.ProtoReflect.Descriptor instead.
func (*PublicPlanProposal) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_proposal_proto_rawDescGZIP(), []int{0}
}

func (x *PublicPlanProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PublicPlanProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PublicPlanProposal) GetAddPlanRequests() []*AddPlanRequest {
	if x != nil {
		return x.AddPlanRequests
	}
	return nil
}

func (x *PublicPlanProposal) GetModifyPlanRequests() []*ModifyPlanRequest {
	if x != nil {
		return x.ModifyPlanRequests
	}
	return nil
}

func (x *PublicPlanProposal) GetDeletePlanRequests() []*DeletePlanRequest {
	if x != nil {
		return x.DeletePlanRequests
	}
	return nil
}

// AddPlanRequest details a proposal for creating a public plan.
type AddPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specifies the plan name for display
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,2,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty"`
	// termination_address defines the bech32-encoded address that terminates plan
	// when the plan ends after the end time, the balance of farming pool address
	// is transferred to the termination address
	TerminationAddress string `protobuf:"bytes,3,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty"`
	// staking_coin_weights specifies coin weights for the plan
	StakingCoinWeights []*v1beta1.DecCoin `protobuf:"bytes,4,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3" json:"staking_coin_weights,omitempty"`
	// start_time specifies the start time of the plan
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time specifies the end time of the plan
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount []*v1beta1.Coin `protobuf:"bytes,7,rep,name=epoch_amount,json=epochAmount,proto3" json:"epoch_amount,omitempty"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio string `protobuf:"bytes,8,opt,name=epoch_ratio,json=epochRatio,proto3" json:"epoch_ratio,omitempty"`
}

func (x *AddPlanRequest) Reset() {
	*x = AddPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPlanRequest) ProtoMessage() {}

// Deprecated: Use AddPlanRequest.ProtoReflect.Descriptor instead.
func (*AddPlanRequest) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_proposal_proto_rawDescGZIP(), []int{1}
}

func (x *AddPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddPlanRequest) GetFarmingPoolAddress() string {
	if x != nil {
		return x.FarmingPoolAddress
	}
	return ""
}

func (x *AddPlanRequest) GetTerminationAddress() string {
	if x != nil {
		return x.TerminationAddress
	}
	return ""
}

func (x *AddPlanRequest) GetStakingCoinWeights() []*v1beta1.DecCoin {
	if x != nil {
		return x.StakingCoinWeights
	}
	return nil
}

func (x *AddPlanRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AddPlanRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *AddPlanRequest) GetEpochAmount() []*v1beta1.Coin {
	if x != nil {
		return x.EpochAmount
	}
	return nil
}

func (x *AddPlanRequest) GetEpochRatio() string {
	if x != nil {
		return x.EpochRatio
	}
	return ""
}

// ModifyPlanRequest details a proposal for modifying the existing public plan.
type ModifyPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plan_id specifies index of the farming plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// name specifies the plan name for display
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,3,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty"`
	// termination_address defines the bech32-encoded address that terminates plan
	// when the plan ends after the end time, the balance of farming pool address
	// is transferred to the termination address
	TerminationAddress string `protobuf:"bytes,4,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty"`
	// staking_coin_weights specifies coin weights for the plan
	StakingCoinWeights []*v1beta1.DecCoin `protobuf:"bytes,5,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3" json:"staking_coin_weights,omitempty"`
	// start_time specifies the start time of the plan
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_time specifies the end time of the plan
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount []*v1beta1.Coin `protobuf:"bytes,8,rep,name=epoch_amount,json=epochAmount,proto3" json:"epoch_amount,omitempty"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio string `protobuf:"bytes,9,opt,name=epoch_ratio,json=epochRatio,proto3" json:"epoch_ratio,omitempty"`
}

func (x *ModifyPlanRequest) Reset() {
	*x = ModifyPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyPlanRequest) ProtoMessage() {}

// Deprecated: Use ModifyPlanRequest.ProtoReflect.Descriptor instead.
func (*ModifyPlanRequest) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_proposal_proto_rawDescGZIP(), []int{2}
}

func (x *ModifyPlanRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *ModifyPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyPlanRequest) GetFarmingPoolAddress() string {
	if x != nil {
		return x.FarmingPoolAddress
	}
	return ""
}

func (x *ModifyPlanRequest) GetTerminationAddress() string {
	if x != nil {
		return x.TerminationAddress
	}
	return ""
}

func (x *ModifyPlanRequest) GetStakingCoinWeights() []*v1beta1.DecCoin {
	if x != nil {
		return x.StakingCoinWeights
	}
	return nil
}

func (x *ModifyPlanRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ModifyPlanRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ModifyPlanRequest) GetEpochAmount() []*v1beta1.Coin {
	if x != nil {
		return x.EpochAmount
	}
	return nil
}

func (x *ModifyPlanRequest) GetEpochRatio() string {
	if x != nil {
		return x.EpochRatio
	}
	return ""
}

// DeletePlanRequest details a proposal for deleting an existing public plan.
type DeletePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plan_id specifies index of the farming plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *DeletePlanRequest) Reset() {
	*x = DeletePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRequest) ProtoMessage() {}

// Deprecated: Use DeletePlanRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRequest) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_proposal_proto_rawDescGZIP(), []int{3}
}

func (x *DeletePlanRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

var File_mantrachain_farming_v1beta1_proposal_proto protoreflect.FileDescriptor

var file_mantrachain_farming_v1beta1_proposal_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x85, 0x03, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5d, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0f, 0x61,
	0x64, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x66,
	0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d,
	0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x08,
	0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0x22, 0xc9, 0x04, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x33, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69,
	0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e,
	0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44,
	0x0a, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x22, 0xe5, 0x04, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x33, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x12, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73,
	0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0x52, 0x0a, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x2c, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x42, 0xfb, 0x01, 0x0a, 0x1f, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0d,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x66, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d,
	0x46, 0x58, 0xaa, 0x02, 0x1b, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x46, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xca, 0x02, 0x1b, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x46,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02,
	0x27, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x46, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x4d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x46, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantrachain_farming_v1beta1_proposal_proto_rawDescOnce sync.Once
	file_mantrachain_farming_v1beta1_proposal_proto_rawDescData = file_mantrachain_farming_v1beta1_proposal_proto_rawDesc
)

func file_mantrachain_farming_v1beta1_proposal_proto_rawDescGZIP() []byte {
	file_mantrachain_farming_v1beta1_proposal_proto_rawDescOnce.Do(func() {
		file_mantrachain_farming_v1beta1_proposal_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantrachain_farming_v1beta1_proposal_proto_rawDescData)
	})
	return file_mantrachain_farming_v1beta1_proposal_proto_rawDescData
}

var file_mantrachain_farming_v1beta1_proposal_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mantrachain_farming_v1beta1_proposal_proto_goTypes = []interface{}{
	(*PublicPlanProposal)(nil),    // 0: mantrachain.farming.v1beta1.PublicPlanProposal
	(*AddPlanRequest)(nil),        // 1: mantrachain.farming.v1beta1.AddPlanRequest
	(*ModifyPlanRequest)(nil),     // 2: mantrachain.farming.v1beta1.ModifyPlanRequest
	(*DeletePlanRequest)(nil),     // 3: mantrachain.farming.v1beta1.DeletePlanRequest
	(*v1beta1.DecCoin)(nil),       // 4: cosmos.base.v1beta1.DecCoin
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*v1beta1.Coin)(nil),          // 6: cosmos.base.v1beta1.Coin
}
var file_mantrachain_farming_v1beta1_proposal_proto_depIdxs = []int32{
	1,  // 0: mantrachain.farming.v1beta1.PublicPlanProposal.add_plan_requests:type_name -> mantrachain.farming.v1beta1.AddPlanRequest
	2,  // 1: mantrachain.farming.v1beta1.PublicPlanProposal.modify_plan_requests:type_name -> mantrachain.farming.v1beta1.ModifyPlanRequest
	3,  // 2: mantrachain.farming.v1beta1.PublicPlanProposal.delete_plan_requests:type_name -> mantrachain.farming.v1beta1.DeletePlanRequest
	4,  // 3: mantrachain.farming.v1beta1.AddPlanRequest.staking_coin_weights:type_name -> cosmos.base.v1beta1.DecCoin
	5,  // 4: mantrachain.farming.v1beta1.AddPlanRequest.start_time:type_name -> google.protobuf.Timestamp
	5,  // 5: mantrachain.farming.v1beta1.AddPlanRequest.end_time:type_name -> google.protobuf.Timestamp
	6,  // 6: mantrachain.farming.v1beta1.AddPlanRequest.epoch_amount:type_name -> cosmos.base.v1beta1.Coin
	4,  // 7: mantrachain.farming.v1beta1.ModifyPlanRequest.staking_coin_weights:type_name -> cosmos.base.v1beta1.DecCoin
	5,  // 8: mantrachain.farming.v1beta1.ModifyPlanRequest.start_time:type_name -> google.protobuf.Timestamp
	5,  // 9: mantrachain.farming.v1beta1.ModifyPlanRequest.end_time:type_name -> google.protobuf.Timestamp
	6,  // 10: mantrachain.farming.v1beta1.ModifyPlanRequest.epoch_amount:type_name -> cosmos.base.v1beta1.Coin
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_mantrachain_farming_v1beta1_proposal_proto_init() }
func file_mantrachain_farming_v1beta1_proposal_proto_init() {
	if File_mantrachain_farming_v1beta1_proposal_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicPlanProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_proposal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantrachain_farming_v1beta1_proposal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mantrachain_farming_v1beta1_proposal_proto_goTypes,
		DependencyIndexes: file_mantrachain_farming_v1beta1_proposal_proto_depIdxs,
		MessageInfos:      file_mantrachain_farming_v1beta1_proposal_proto_msgTypes,
	}.Build()
	File_mantrachain_farming_v1beta1_proposal_proto = out.File
	file_mantrachain_farming_v1beta1_proposal_proto_rawDesc = nil
	file_mantrachain_farming_v1beta1_proposal_proto_goTypes = nil
	file_mantrachain_farming_v1beta1_proposal_proto_depIdxs = nil
}
