// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package farmingv1beta1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_GenesisState_3_list)(nil)

type _GenesisState_3_list struct {
	list *[]*PlanRecord
}

func (x *_GenesisState_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PlanRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PlanRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_3_list) AppendMutable() protoreflect.Value {
	v := new(PlanRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_3_list) NewElement() protoreflect.Value {
	v := new(PlanRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*StakingRecord
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StakingRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*StakingRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(StakingRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(StakingRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*QueuedStakingRecord
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*QueuedStakingRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*QueuedStakingRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(QueuedStakingRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(QueuedStakingRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*HistoricalRewardsRecord
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*HistoricalRewardsRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*HistoricalRewardsRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(HistoricalRewardsRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(HistoricalRewardsRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_7_list)(nil)

type _GenesisState_7_list struct {
	list *[]*OutstandingRewardsRecord
}

func (x *_GenesisState_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutstandingRewardsRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutstandingRewardsRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_7_list) AppendMutable() protoreflect.Value {
	v := new(OutstandingRewardsRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_7_list) NewElement() protoreflect.Value {
	v := new(OutstandingRewardsRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_8_list)(nil)

type _GenesisState_8_list struct {
	list *[]*UnharvestedRewardsRecord
}

func (x *_GenesisState_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UnharvestedRewardsRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*UnharvestedRewardsRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_8_list) AppendMutable() protoreflect.Value {
	v := new(UnharvestedRewardsRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_8_list) NewElement() protoreflect.Value {
	v := new(UnharvestedRewardsRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_9_list)(nil)

type _GenesisState_9_list struct {
	list *[]*CurrentEpochRecord
}

func (x *_GenesisState_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurrentEpochRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CurrentEpochRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_9_list) AppendMutable() protoreflect.Value {
	v := new(CurrentEpochRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_9_list) NewElement() protoreflect.Value {
	v := new(CurrentEpochRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_10_list)(nil)

type _GenesisState_10_list struct {
	list *[]*TotalStakingsRecord
}

func (x *_GenesisState_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TotalStakingsRecord)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TotalStakingsRecord)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_10_list) AppendMutable() protoreflect.Value {
	v := new(TotalStakingsRecord)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_10_list) NewElement() protoreflect.Value {
	v := new(TotalStakingsRecord)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_11_list)(nil)

type _GenesisState_11_list struct {
	list *[]*v1beta1.Coin
}

func (x *_GenesisState_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_11_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_11_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_11_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                             protoreflect.MessageDescriptor
	fd_GenesisState_params                      protoreflect.FieldDescriptor
	fd_GenesisState_global_plan_id              protoreflect.FieldDescriptor
	fd_GenesisState_plan_records                protoreflect.FieldDescriptor
	fd_GenesisState_staking_records             protoreflect.FieldDescriptor
	fd_GenesisState_queued_staking_records      protoreflect.FieldDescriptor
	fd_GenesisState_historical_rewards_records  protoreflect.FieldDescriptor
	fd_GenesisState_outstanding_rewards_records protoreflect.FieldDescriptor
	fd_GenesisState_unharvested_rewards_records protoreflect.FieldDescriptor
	fd_GenesisState_current_epoch_records       protoreflect.FieldDescriptor
	fd_GenesisState_total_stakings_records      protoreflect.FieldDescriptor
	fd_GenesisState_reward_pool_coins           protoreflect.FieldDescriptor
	fd_GenesisState_last_epoch_time             protoreflect.FieldDescriptor
	fd_GenesisState_current_epoch_days          protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_GenesisState = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_global_plan_id = md_GenesisState.Fields().ByName("global_plan_id")
	fd_GenesisState_plan_records = md_GenesisState.Fields().ByName("plan_records")
	fd_GenesisState_staking_records = md_GenesisState.Fields().ByName("staking_records")
	fd_GenesisState_queued_staking_records = md_GenesisState.Fields().ByName("queued_staking_records")
	fd_GenesisState_historical_rewards_records = md_GenesisState.Fields().ByName("historical_rewards_records")
	fd_GenesisState_outstanding_rewards_records = md_GenesisState.Fields().ByName("outstanding_rewards_records")
	fd_GenesisState_unharvested_rewards_records = md_GenesisState.Fields().ByName("unharvested_rewards_records")
	fd_GenesisState_current_epoch_records = md_GenesisState.Fields().ByName("current_epoch_records")
	fd_GenesisState_total_stakings_records = md_GenesisState.Fields().ByName("total_stakings_records")
	fd_GenesisState_reward_pool_coins = md_GenesisState.Fields().ByName("reward_pool_coins")
	fd_GenesisState_last_epoch_time = md_GenesisState.Fields().ByName("last_epoch_time")
	fd_GenesisState_current_epoch_days = md_GenesisState.Fields().ByName("current_epoch_days")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if x.GlobalPlanId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GlobalPlanId)
		if !f(fd_GenesisState_global_plan_id, value) {
			return
		}
	}
	if len(x.PlanRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_3_list{list: &x.PlanRecords})
		if !f(fd_GenesisState_plan_records, value) {
			return
		}
	}
	if len(x.StakingRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.StakingRecords})
		if !f(fd_GenesisState_staking_records, value) {
			return
		}
	}
	if len(x.QueuedStakingRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.QueuedStakingRecords})
		if !f(fd_GenesisState_queued_staking_records, value) {
			return
		}
	}
	if len(x.HistoricalRewardsRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.HistoricalRewardsRecords})
		if !f(fd_GenesisState_historical_rewards_records, value) {
			return
		}
	}
	if len(x.OutstandingRewardsRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_7_list{list: &x.OutstandingRewardsRecords})
		if !f(fd_GenesisState_outstanding_rewards_records, value) {
			return
		}
	}
	if len(x.UnharvestedRewardsRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_8_list{list: &x.UnharvestedRewardsRecords})
		if !f(fd_GenesisState_unharvested_rewards_records, value) {
			return
		}
	}
	if len(x.CurrentEpochRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_9_list{list: &x.CurrentEpochRecords})
		if !f(fd_GenesisState_current_epoch_records, value) {
			return
		}
	}
	if len(x.TotalStakingsRecords) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_10_list{list: &x.TotalStakingsRecords})
		if !f(fd_GenesisState_total_stakings_records, value) {
			return
		}
	}
	if len(x.RewardPoolCoins) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_11_list{list: &x.RewardPoolCoins})
		if !f(fd_GenesisState_reward_pool_coins, value) {
			return
		}
	}
	if x.LastEpochTime != nil {
		value := protoreflect.ValueOfMessage(x.LastEpochTime.ProtoReflect())
		if !f(fd_GenesisState_last_epoch_time, value) {
			return
		}
	}
	if x.CurrentEpochDays != uint32(0) {
		value := protoreflect.ValueOfUint32(x.CurrentEpochDays)
		if !f(fd_GenesisState_current_epoch_days, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.GenesisState.params":
		return x.Params != nil
	case "mantrachain.farming.v1beta1.GenesisState.global_plan_id":
		return x.GlobalPlanId != uint64(0)
	case "mantrachain.farming.v1beta1.GenesisState.plan_records":
		return len(x.PlanRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.staking_records":
		return len(x.StakingRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.queued_staking_records":
		return len(x.QueuedStakingRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.historical_rewards_records":
		return len(x.HistoricalRewardsRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records":
		return len(x.OutstandingRewardsRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records":
		return len(x.UnharvestedRewardsRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_records":
		return len(x.CurrentEpochRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.total_stakings_records":
		return len(x.TotalStakingsRecords) != 0
	case "mantrachain.farming.v1beta1.GenesisState.reward_pool_coins":
		return len(x.RewardPoolCoins) != 0
	case "mantrachain.farming.v1beta1.GenesisState.last_epoch_time":
		return x.LastEpochTime != nil
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_days":
		return x.CurrentEpochDays != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.GenesisState"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.GenesisState.params":
		x.Params = nil
	case "mantrachain.farming.v1beta1.GenesisState.global_plan_id":
		x.GlobalPlanId = uint64(0)
	case "mantrachain.farming.v1beta1.GenesisState.plan_records":
		x.PlanRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.staking_records":
		x.StakingRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.queued_staking_records":
		x.QueuedStakingRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.historical_rewards_records":
		x.HistoricalRewardsRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records":
		x.OutstandingRewardsRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records":
		x.UnharvestedRewardsRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_records":
		x.CurrentEpochRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.total_stakings_records":
		x.TotalStakingsRecords = nil
	case "mantrachain.farming.v1beta1.GenesisState.reward_pool_coins":
		x.RewardPoolCoins = nil
	case "mantrachain.farming.v1beta1.GenesisState.last_epoch_time":
		x.LastEpochTime = nil
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_days":
		x.CurrentEpochDays = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.GenesisState"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.GenesisState.global_plan_id":
		value := x.GlobalPlanId
		return protoreflect.ValueOfUint64(value)
	case "mantrachain.farming.v1beta1.GenesisState.plan_records":
		if len(x.PlanRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_3_list{})
		}
		listValue := &_GenesisState_3_list{list: &x.PlanRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.staking_records":
		if len(x.StakingRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.StakingRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.queued_staking_records":
		if len(x.QueuedStakingRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.QueuedStakingRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.historical_rewards_records":
		if len(x.HistoricalRewardsRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.HistoricalRewardsRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records":
		if len(x.OutstandingRewardsRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_7_list{})
		}
		listValue := &_GenesisState_7_list{list: &x.OutstandingRewardsRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records":
		if len(x.UnharvestedRewardsRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_8_list{})
		}
		listValue := &_GenesisState_8_list{list: &x.UnharvestedRewardsRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_records":
		if len(x.CurrentEpochRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_9_list{})
		}
		listValue := &_GenesisState_9_list{list: &x.CurrentEpochRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.total_stakings_records":
		if len(x.TotalStakingsRecords) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_10_list{})
		}
		listValue := &_GenesisState_10_list{list: &x.TotalStakingsRecords}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.reward_pool_coins":
		if len(x.RewardPoolCoins) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_11_list{})
		}
		listValue := &_GenesisState_11_list{list: &x.RewardPoolCoins}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.farming.v1beta1.GenesisState.last_epoch_time":
		value := x.LastEpochTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_days":
		value := x.CurrentEpochDays
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.GenesisState"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "mantrachain.farming.v1beta1.GenesisState.global_plan_id":
		x.GlobalPlanId = value.Uint()
	case "mantrachain.farming.v1beta1.GenesisState.plan_records":
		lv := value.List()
		clv := lv.(*_GenesisState_3_list)
		x.PlanRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.staking_records":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.StakingRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.queued_staking_records":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.QueuedStakingRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.historical_rewards_records":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.HistoricalRewardsRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records":
		lv := value.List()
		clv := lv.(*_GenesisState_7_list)
		x.OutstandingRewardsRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records":
		lv := value.List()
		clv := lv.(*_GenesisState_8_list)
		x.UnharvestedRewardsRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_records":
		lv := value.List()
		clv := lv.(*_GenesisState_9_list)
		x.CurrentEpochRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.total_stakings_records":
		lv := value.List()
		clv := lv.(*_GenesisState_10_list)
		x.TotalStakingsRecords = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.reward_pool_coins":
		lv := value.List()
		clv := lv.(*_GenesisState_11_list)
		x.RewardPoolCoins = *clv.list
	case "mantrachain.farming.v1beta1.GenesisState.last_epoch_time":
		x.LastEpochTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_days":
		x.CurrentEpochDays = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.GenesisState"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "mantrachain.farming.v1beta1.GenesisState.plan_records":
		if x.PlanRecords == nil {
			x.PlanRecords = []*PlanRecord{}
		}
		value := &_GenesisState_3_list{list: &x.PlanRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.staking_records":
		if x.StakingRecords == nil {
			x.StakingRecords = []*StakingRecord{}
		}
		value := &_GenesisState_4_list{list: &x.StakingRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.queued_staking_records":
		if x.QueuedStakingRecords == nil {
			x.QueuedStakingRecords = []*QueuedStakingRecord{}
		}
		value := &_GenesisState_5_list{list: &x.QueuedStakingRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.historical_rewards_records":
		if x.HistoricalRewardsRecords == nil {
			x.HistoricalRewardsRecords = []*HistoricalRewardsRecord{}
		}
		value := &_GenesisState_6_list{list: &x.HistoricalRewardsRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records":
		if x.OutstandingRewardsRecords == nil {
			x.OutstandingRewardsRecords = []*OutstandingRewardsRecord{}
		}
		value := &_GenesisState_7_list{list: &x.OutstandingRewardsRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records":
		if x.UnharvestedRewardsRecords == nil {
			x.UnharvestedRewardsRecords = []*UnharvestedRewardsRecord{}
		}
		value := &_GenesisState_8_list{list: &x.UnharvestedRewardsRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_records":
		if x.CurrentEpochRecords == nil {
			x.CurrentEpochRecords = []*CurrentEpochRecord{}
		}
		value := &_GenesisState_9_list{list: &x.CurrentEpochRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.total_stakings_records":
		if x.TotalStakingsRecords == nil {
			x.TotalStakingsRecords = []*TotalStakingsRecord{}
		}
		value := &_GenesisState_10_list{list: &x.TotalStakingsRecords}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.reward_pool_coins":
		if x.RewardPoolCoins == nil {
			x.RewardPoolCoins = []*v1beta1.Coin{}
		}
		value := &_GenesisState_11_list{list: &x.RewardPoolCoins}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.GenesisState.last_epoch_time":
		if x.LastEpochTime == nil {
			x.LastEpochTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastEpochTime.ProtoReflect())
	case "mantrachain.farming.v1beta1.GenesisState.global_plan_id":
		panic(fmt.Errorf("field global_plan_id of message mantrachain.farming.v1beta1.GenesisState is not mutable"))
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_days":
		panic(fmt.Errorf("field current_epoch_days of message mantrachain.farming.v1beta1.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.GenesisState"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.GenesisState.global_plan_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mantrachain.farming.v1beta1.GenesisState.plan_records":
		list := []*PlanRecord{}
		return protoreflect.ValueOfList(&_GenesisState_3_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.staking_records":
		list := []*StakingRecord{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.queued_staking_records":
		list := []*QueuedStakingRecord{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.historical_rewards_records":
		list := []*HistoricalRewardsRecord{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records":
		list := []*OutstandingRewardsRecord{}
		return protoreflect.ValueOfList(&_GenesisState_7_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records":
		list := []*UnharvestedRewardsRecord{}
		return protoreflect.ValueOfList(&_GenesisState_8_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_records":
		list := []*CurrentEpochRecord{}
		return protoreflect.ValueOfList(&_GenesisState_9_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.total_stakings_records":
		list := []*TotalStakingsRecord{}
		return protoreflect.ValueOfList(&_GenesisState_10_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.reward_pool_coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_GenesisState_11_list{list: &list})
	case "mantrachain.farming.v1beta1.GenesisState.last_epoch_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.GenesisState.current_epoch_days":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.GenesisState"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GlobalPlanId != 0 {
			n += 1 + runtime.Sov(uint64(x.GlobalPlanId))
		}
		if len(x.PlanRecords) > 0 {
			for _, e := range x.PlanRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.StakingRecords) > 0 {
			for _, e := range x.StakingRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.QueuedStakingRecords) > 0 {
			for _, e := range x.QueuedStakingRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.HistoricalRewardsRecords) > 0 {
			for _, e := range x.HistoricalRewardsRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OutstandingRewardsRecords) > 0 {
			for _, e := range x.OutstandingRewardsRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.UnharvestedRewardsRecords) > 0 {
			for _, e := range x.UnharvestedRewardsRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.CurrentEpochRecords) > 0 {
			for _, e := range x.CurrentEpochRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TotalStakingsRecords) > 0 {
			for _, e := range x.TotalStakingsRecords {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.RewardPoolCoins) > 0 {
			for _, e := range x.RewardPoolCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.LastEpochTime != nil {
			l = options.Size(x.LastEpochTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentEpochDays != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentEpochDays))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CurrentEpochDays != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentEpochDays))
			i--
			dAtA[i] = 0x68
		}
		if x.LastEpochTime != nil {
			encoded, err := options.Marshal(x.LastEpochTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.RewardPoolCoins) > 0 {
			for iNdEx := len(x.RewardPoolCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardPoolCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.TotalStakingsRecords) > 0 {
			for iNdEx := len(x.TotalStakingsRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalStakingsRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.CurrentEpochRecords) > 0 {
			for iNdEx := len(x.CurrentEpochRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CurrentEpochRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.UnharvestedRewardsRecords) > 0 {
			for iNdEx := len(x.UnharvestedRewardsRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.UnharvestedRewardsRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.OutstandingRewardsRecords) > 0 {
			for iNdEx := len(x.OutstandingRewardsRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OutstandingRewardsRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.HistoricalRewardsRecords) > 0 {
			for iNdEx := len(x.HistoricalRewardsRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.HistoricalRewardsRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.QueuedStakingRecords) > 0 {
			for iNdEx := len(x.QueuedStakingRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.QueuedStakingRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.StakingRecords) > 0 {
			for iNdEx := len(x.StakingRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StakingRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.PlanRecords) > 0 {
			for iNdEx := len(x.PlanRecords) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PlanRecords[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.GlobalPlanId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GlobalPlanId))
			i--
			dAtA[i] = 0x10
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GlobalPlanId", wireType)
				}
				x.GlobalPlanId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GlobalPlanId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PlanRecords = append(x.PlanRecords, &PlanRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PlanRecords[len(x.PlanRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingRecords = append(x.StakingRecords, &StakingRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StakingRecords[len(x.StakingRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueuedStakingRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QueuedStakingRecords = append(x.QueuedStakingRecords, &QueuedStakingRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.QueuedStakingRecords[len(x.QueuedStakingRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HistoricalRewardsRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HistoricalRewardsRecords = append(x.HistoricalRewardsRecords, &HistoricalRewardsRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.HistoricalRewardsRecords[len(x.HistoricalRewardsRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewardsRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OutstandingRewardsRecords = append(x.OutstandingRewardsRecords, &OutstandingRewardsRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OutstandingRewardsRecords[len(x.OutstandingRewardsRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnharvestedRewardsRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnharvestedRewardsRecords = append(x.UnharvestedRewardsRecords, &UnharvestedRewardsRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnharvestedRewardsRecords[len(x.UnharvestedRewardsRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CurrentEpochRecords = append(x.CurrentEpochRecords, &CurrentEpochRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CurrentEpochRecords[len(x.CurrentEpochRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalStakingsRecords", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalStakingsRecords = append(x.TotalStakingsRecords, &TotalStakingsRecord{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalStakingsRecords[len(x.TotalStakingsRecords)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardPoolCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardPoolCoins = append(x.RewardPoolCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardPoolCoins[len(x.RewardPoolCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastEpochTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastEpochTime == nil {
					x.LastEpochTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastEpochTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentEpochDays", wireType)
				}
				x.CurrentEpochDays = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentEpochDays |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_PlanRecord_2_list)(nil)

type _PlanRecord_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_PlanRecord_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PlanRecord_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_PlanRecord_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_PlanRecord_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_PlanRecord_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PlanRecord_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_PlanRecord_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_PlanRecord_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PlanRecord                    protoreflect.MessageDescriptor
	fd_PlanRecord_plan               protoreflect.FieldDescriptor
	fd_PlanRecord_farming_pool_coins protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_PlanRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("PlanRecord")
	fd_PlanRecord_plan = md_PlanRecord.Fields().ByName("plan")
	fd_PlanRecord_farming_pool_coins = md_PlanRecord.Fields().ByName("farming_pool_coins")
}

var _ protoreflect.Message = (*fastReflection_PlanRecord)(nil)

type fastReflection_PlanRecord PlanRecord

func (x *PlanRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PlanRecord)(x)
}

func (x *PlanRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PlanRecord_messageType fastReflection_PlanRecord_messageType
var _ protoreflect.MessageType = fastReflection_PlanRecord_messageType{}

type fastReflection_PlanRecord_messageType struct{}

func (x fastReflection_PlanRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PlanRecord)(nil)
}
func (x fastReflection_PlanRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_PlanRecord)
}
func (x fastReflection_PlanRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PlanRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PlanRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_PlanRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PlanRecord) Type() protoreflect.MessageType {
	return _fastReflection_PlanRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PlanRecord) New() protoreflect.Message {
	return new(fastReflection_PlanRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PlanRecord) Interface() protoreflect.ProtoMessage {
	return (*PlanRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PlanRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Plan != nil {
		value := protoreflect.ValueOfMessage(x.Plan.ProtoReflect())
		if !f(fd_PlanRecord_plan, value) {
			return
		}
	}
	if len(x.FarmingPoolCoins) != 0 {
		value := protoreflect.ValueOfList(&_PlanRecord_2_list{list: &x.FarmingPoolCoins})
		if !f(fd_PlanRecord_farming_pool_coins, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PlanRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PlanRecord.plan":
		return x.Plan != nil
	case "mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins":
		return len(x.FarmingPoolCoins) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PlanRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PlanRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PlanRecord.plan":
		x.Plan = nil
	case "mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins":
		x.FarmingPoolCoins = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PlanRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PlanRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PlanRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.PlanRecord.plan":
		value := x.Plan
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins":
		if len(x.FarmingPoolCoins) == 0 {
			return protoreflect.ValueOfList(&_PlanRecord_2_list{})
		}
		listValue := &_PlanRecord_2_list{list: &x.FarmingPoolCoins}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PlanRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PlanRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PlanRecord.plan":
		x.Plan = value.Message().Interface().(*anypb.Any)
	case "mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins":
		lv := value.List()
		clv := lv.(*_PlanRecord_2_list)
		x.FarmingPoolCoins = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PlanRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PlanRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PlanRecord.plan":
		if x.Plan == nil {
			x.Plan = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Plan.ProtoReflect())
	case "mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins":
		if x.FarmingPoolCoins == nil {
			x.FarmingPoolCoins = []*v1beta1.Coin{}
		}
		value := &_PlanRecord_2_list{list: &x.FarmingPoolCoins}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PlanRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PlanRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PlanRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.PlanRecord.plan":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_PlanRecord_2_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.PlanRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.PlanRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PlanRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.PlanRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PlanRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PlanRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PlanRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PlanRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PlanRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Plan != nil {
			l = options.Size(x.Plan)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.FarmingPoolCoins) > 0 {
			for _, e := range x.FarmingPoolCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PlanRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.FarmingPoolCoins) > 0 {
			for iNdEx := len(x.FarmingPoolCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FarmingPoolCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Plan != nil {
			encoded, err := options.Marshal(x.Plan)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PlanRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PlanRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PlanRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Plan == nil {
					x.Plan = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Plan); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FarmingPoolCoins = append(x.FarmingPoolCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FarmingPoolCoins[len(x.FarmingPoolCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_StakingRecord                    protoreflect.MessageDescriptor
	fd_StakingRecord_staking_coin_denom protoreflect.FieldDescriptor
	fd_StakingRecord_farmer             protoreflect.FieldDescriptor
	fd_StakingRecord_staking            protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_StakingRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("StakingRecord")
	fd_StakingRecord_staking_coin_denom = md_StakingRecord.Fields().ByName("staking_coin_denom")
	fd_StakingRecord_farmer = md_StakingRecord.Fields().ByName("farmer")
	fd_StakingRecord_staking = md_StakingRecord.Fields().ByName("staking")
}

var _ protoreflect.Message = (*fastReflection_StakingRecord)(nil)

type fastReflection_StakingRecord StakingRecord

func (x *StakingRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_StakingRecord)(x)
}

func (x *StakingRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_StakingRecord_messageType fastReflection_StakingRecord_messageType
var _ protoreflect.MessageType = fastReflection_StakingRecord_messageType{}

type fastReflection_StakingRecord_messageType struct{}

func (x fastReflection_StakingRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_StakingRecord)(nil)
}
func (x fastReflection_StakingRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_StakingRecord)
}
func (x fastReflection_StakingRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_StakingRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_StakingRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_StakingRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_StakingRecord) Type() protoreflect.MessageType {
	return _fastReflection_StakingRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_StakingRecord) New() protoreflect.Message {
	return new(fastReflection_StakingRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_StakingRecord) Interface() protoreflect.ProtoMessage {
	return (*StakingRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_StakingRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_StakingRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.Farmer != "" {
		value := protoreflect.ValueOfString(x.Farmer)
		if !f(fd_StakingRecord_farmer, value) {
			return
		}
	}
	if x.Staking != nil {
		value := protoreflect.ValueOfMessage(x.Staking.ProtoReflect())
		if !f(fd_StakingRecord_staking, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_StakingRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.StakingRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.StakingRecord.farmer":
		return x.Farmer != ""
	case "mantrachain.farming.v1beta1.StakingRecord.staking":
		return x.Staking != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.StakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.StakingRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.StakingRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.StakingRecord.farmer":
		x.Farmer = ""
	case "mantrachain.farming.v1beta1.StakingRecord.staking":
		x.Staking = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.StakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.StakingRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_StakingRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.StakingRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.StakingRecord.farmer":
		value := x.Farmer
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.StakingRecord.staking":
		value := x.Staking
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.StakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.StakingRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.StakingRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.StakingRecord.farmer":
		x.Farmer = value.Interface().(string)
	case "mantrachain.farming.v1beta1.StakingRecord.staking":
		x.Staking = value.Message().Interface().(*Staking)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.StakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.StakingRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.StakingRecord.staking":
		if x.Staking == nil {
			x.Staking = new(Staking)
		}
		return protoreflect.ValueOfMessage(x.Staking.ProtoReflect())
	case "mantrachain.farming.v1beta1.StakingRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.StakingRecord is not mutable"))
	case "mantrachain.farming.v1beta1.StakingRecord.farmer":
		panic(fmt.Errorf("field farmer of message mantrachain.farming.v1beta1.StakingRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.StakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.StakingRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_StakingRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.StakingRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.StakingRecord.farmer":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.StakingRecord.staking":
		m := new(Staking)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.StakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.StakingRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_StakingRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.StakingRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_StakingRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_StakingRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_StakingRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_StakingRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*StakingRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Farmer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Staking != nil {
			l = options.Size(x.Staking)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*StakingRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Staking != nil {
			encoded, err := options.Marshal(x.Staking)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Farmer) > 0 {
			i -= len(x.Farmer)
			copy(dAtA[i:], x.Farmer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Farmer)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*StakingRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StakingRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: StakingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Farmer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Staking", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Staking == nil {
					x.Staking = &Staking{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Staking); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_QueuedStakingRecord                    protoreflect.MessageDescriptor
	fd_QueuedStakingRecord_end_time           protoreflect.FieldDescriptor
	fd_QueuedStakingRecord_staking_coin_denom protoreflect.FieldDescriptor
	fd_QueuedStakingRecord_farmer             protoreflect.FieldDescriptor
	fd_QueuedStakingRecord_queued_staking     protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_QueuedStakingRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("QueuedStakingRecord")
	fd_QueuedStakingRecord_end_time = md_QueuedStakingRecord.Fields().ByName("end_time")
	fd_QueuedStakingRecord_staking_coin_denom = md_QueuedStakingRecord.Fields().ByName("staking_coin_denom")
	fd_QueuedStakingRecord_farmer = md_QueuedStakingRecord.Fields().ByName("farmer")
	fd_QueuedStakingRecord_queued_staking = md_QueuedStakingRecord.Fields().ByName("queued_staking")
}

var _ protoreflect.Message = (*fastReflection_QueuedStakingRecord)(nil)

type fastReflection_QueuedStakingRecord QueuedStakingRecord

func (x *QueuedStakingRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueuedStakingRecord)(x)
}

func (x *QueuedStakingRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueuedStakingRecord_messageType fastReflection_QueuedStakingRecord_messageType
var _ protoreflect.MessageType = fastReflection_QueuedStakingRecord_messageType{}

type fastReflection_QueuedStakingRecord_messageType struct{}

func (x fastReflection_QueuedStakingRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueuedStakingRecord)(nil)
}
func (x fastReflection_QueuedStakingRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_QueuedStakingRecord)
}
func (x fastReflection_QueuedStakingRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueuedStakingRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueuedStakingRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_QueuedStakingRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueuedStakingRecord) Type() protoreflect.MessageType {
	return _fastReflection_QueuedStakingRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueuedStakingRecord) New() protoreflect.Message {
	return new(fastReflection_QueuedStakingRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueuedStakingRecord) Interface() protoreflect.ProtoMessage {
	return (*QueuedStakingRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueuedStakingRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EndTime != nil {
		value := protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
		if !f(fd_QueuedStakingRecord_end_time, value) {
			return
		}
	}
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_QueuedStakingRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.Farmer != "" {
		value := protoreflect.ValueOfString(x.Farmer)
		if !f(fd_QueuedStakingRecord_farmer, value) {
			return
		}
	}
	if x.QueuedStaking != nil {
		value := protoreflect.ValueOfMessage(x.QueuedStaking.ProtoReflect())
		if !f(fd_QueuedStakingRecord_queued_staking, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueuedStakingRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.end_time":
		return x.EndTime != nil
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.farmer":
		return x.Farmer != ""
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking":
		return x.QueuedStaking != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.QueuedStakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.QueuedStakingRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueuedStakingRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.end_time":
		x.EndTime = nil
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.farmer":
		x.Farmer = ""
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking":
		x.QueuedStaking = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.QueuedStakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.QueuedStakingRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueuedStakingRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.end_time":
		value := x.EndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.farmer":
		value := x.Farmer
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking":
		value := x.QueuedStaking
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.QueuedStakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.QueuedStakingRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueuedStakingRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.end_time":
		x.EndTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.farmer":
		x.Farmer = value.Interface().(string)
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking":
		x.QueuedStaking = value.Message().Interface().(*QueuedStaking)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.QueuedStakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.QueuedStakingRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueuedStakingRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.end_time":
		if x.EndTime == nil {
			x.EndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking":
		if x.QueuedStaking == nil {
			x.QueuedStaking = new(QueuedStaking)
		}
		return protoreflect.ValueOfMessage(x.QueuedStaking.ProtoReflect())
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.QueuedStakingRecord is not mutable"))
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.farmer":
		panic(fmt.Errorf("field farmer of message mantrachain.farming.v1beta1.QueuedStakingRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.QueuedStakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.QueuedStakingRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueuedStakingRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.farmer":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking":
		m := new(QueuedStaking)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.QueuedStakingRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.QueuedStakingRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueuedStakingRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.QueuedStakingRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueuedStakingRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueuedStakingRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueuedStakingRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueuedStakingRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueuedStakingRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EndTime != nil {
			l = options.Size(x.EndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Farmer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.QueuedStaking != nil {
			l = options.Size(x.QueuedStaking)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueuedStakingRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.QueuedStaking != nil {
			encoded, err := options.Marshal(x.QueuedStaking)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Farmer) > 0 {
			i -= len(x.Farmer)
			copy(dAtA[i:], x.Farmer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Farmer)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0x12
		}
		if x.EndTime != nil {
			encoded, err := options.Marshal(x.EndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueuedStakingRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueuedStakingRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueuedStakingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EndTime == nil {
					x.EndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Farmer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueuedStaking", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.QueuedStaking == nil {
					x.QueuedStaking = &QueuedStaking{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.QueuedStaking); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_TotalStakingsRecord_9_list)(nil)

type _TotalStakingsRecord_9_list struct {
	list *[]*v1beta1.Coin
}

func (x *_TotalStakingsRecord_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_TotalStakingsRecord_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_TotalStakingsRecord_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_TotalStakingsRecord_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_TotalStakingsRecord_9_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TotalStakingsRecord_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_TotalStakingsRecord_9_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_TotalStakingsRecord_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_TotalStakingsRecord                       protoreflect.MessageDescriptor
	fd_TotalStakingsRecord_staking_coin_denom    protoreflect.FieldDescriptor
	fd_TotalStakingsRecord_amount                protoreflect.FieldDescriptor
	fd_TotalStakingsRecord_staking_reserve_coins protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_TotalStakingsRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("TotalStakingsRecord")
	fd_TotalStakingsRecord_staking_coin_denom = md_TotalStakingsRecord.Fields().ByName("staking_coin_denom")
	fd_TotalStakingsRecord_amount = md_TotalStakingsRecord.Fields().ByName("amount")
	fd_TotalStakingsRecord_staking_reserve_coins = md_TotalStakingsRecord.Fields().ByName("staking_reserve_coins")
}

var _ protoreflect.Message = (*fastReflection_TotalStakingsRecord)(nil)

type fastReflection_TotalStakingsRecord TotalStakingsRecord

func (x *TotalStakingsRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TotalStakingsRecord)(x)
}

func (x *TotalStakingsRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TotalStakingsRecord_messageType fastReflection_TotalStakingsRecord_messageType
var _ protoreflect.MessageType = fastReflection_TotalStakingsRecord_messageType{}

type fastReflection_TotalStakingsRecord_messageType struct{}

func (x fastReflection_TotalStakingsRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TotalStakingsRecord)(nil)
}
func (x fastReflection_TotalStakingsRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_TotalStakingsRecord)
}
func (x fastReflection_TotalStakingsRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TotalStakingsRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TotalStakingsRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_TotalStakingsRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TotalStakingsRecord) Type() protoreflect.MessageType {
	return _fastReflection_TotalStakingsRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TotalStakingsRecord) New() protoreflect.Message {
	return new(fastReflection_TotalStakingsRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TotalStakingsRecord) Interface() protoreflect.ProtoMessage {
	return (*TotalStakingsRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TotalStakingsRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_TotalStakingsRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_TotalStakingsRecord_amount, value) {
			return
		}
	}
	if len(x.StakingReserveCoins) != 0 {
		value := protoreflect.ValueOfList(&_TotalStakingsRecord_9_list{list: &x.StakingReserveCoins})
		if !f(fd_TotalStakingsRecord_staking_reserve_coins, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TotalStakingsRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.amount":
		return x.Amount != ""
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins":
		return len(x.StakingReserveCoins) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.TotalStakingsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.TotalStakingsRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalStakingsRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.amount":
		x.Amount = ""
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins":
		x.StakingReserveCoins = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.TotalStakingsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.TotalStakingsRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TotalStakingsRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins":
		if len(x.StakingReserveCoins) == 0 {
			return protoreflect.ValueOfList(&_TotalStakingsRecord_9_list{})
		}
		listValue := &_TotalStakingsRecord_9_list{list: &x.StakingReserveCoins}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.TotalStakingsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.TotalStakingsRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalStakingsRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.amount":
		x.Amount = value.Interface().(string)
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins":
		lv := value.List()
		clv := lv.(*_TotalStakingsRecord_9_list)
		x.StakingReserveCoins = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.TotalStakingsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.TotalStakingsRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalStakingsRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins":
		if x.StakingReserveCoins == nil {
			x.StakingReserveCoins = []*v1beta1.Coin{}
		}
		value := &_TotalStakingsRecord_9_list{list: &x.StakingReserveCoins}
		return protoreflect.ValueOfList(value)
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.TotalStakingsRecord is not mutable"))
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.amount":
		panic(fmt.Errorf("field amount of message mantrachain.farming.v1beta1.TotalStakingsRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.TotalStakingsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.TotalStakingsRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TotalStakingsRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.amount":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_TotalStakingsRecord_9_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.TotalStakingsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.TotalStakingsRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TotalStakingsRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.TotalStakingsRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TotalStakingsRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TotalStakingsRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TotalStakingsRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TotalStakingsRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TotalStakingsRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.StakingReserveCoins) > 0 {
			for _, e := range x.StakingReserveCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TotalStakingsRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.StakingReserveCoins) > 0 {
			for iNdEx := len(x.StakingReserveCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.StakingReserveCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TotalStakingsRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TotalStakingsRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TotalStakingsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingReserveCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingReserveCoins = append(x.StakingReserveCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StakingReserveCoins[len(x.StakingReserveCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_HistoricalRewardsRecord                    protoreflect.MessageDescriptor
	fd_HistoricalRewardsRecord_staking_coin_denom protoreflect.FieldDescriptor
	fd_HistoricalRewardsRecord_epoch              protoreflect.FieldDescriptor
	fd_HistoricalRewardsRecord_historical_rewards protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_HistoricalRewardsRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("HistoricalRewardsRecord")
	fd_HistoricalRewardsRecord_staking_coin_denom = md_HistoricalRewardsRecord.Fields().ByName("staking_coin_denom")
	fd_HistoricalRewardsRecord_epoch = md_HistoricalRewardsRecord.Fields().ByName("epoch")
	fd_HistoricalRewardsRecord_historical_rewards = md_HistoricalRewardsRecord.Fields().ByName("historical_rewards")
}

var _ protoreflect.Message = (*fastReflection_HistoricalRewardsRecord)(nil)

type fastReflection_HistoricalRewardsRecord HistoricalRewardsRecord

func (x *HistoricalRewardsRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_HistoricalRewardsRecord)(x)
}

func (x *HistoricalRewardsRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_HistoricalRewardsRecord_messageType fastReflection_HistoricalRewardsRecord_messageType
var _ protoreflect.MessageType = fastReflection_HistoricalRewardsRecord_messageType{}

type fastReflection_HistoricalRewardsRecord_messageType struct{}

func (x fastReflection_HistoricalRewardsRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_HistoricalRewardsRecord)(nil)
}
func (x fastReflection_HistoricalRewardsRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_HistoricalRewardsRecord)
}
func (x fastReflection_HistoricalRewardsRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_HistoricalRewardsRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_HistoricalRewardsRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_HistoricalRewardsRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_HistoricalRewardsRecord) Type() protoreflect.MessageType {
	return _fastReflection_HistoricalRewardsRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_HistoricalRewardsRecord) New() protoreflect.Message {
	return new(fastReflection_HistoricalRewardsRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_HistoricalRewardsRecord) Interface() protoreflect.ProtoMessage {
	return (*HistoricalRewardsRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_HistoricalRewardsRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_HistoricalRewardsRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.Epoch != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Epoch)
		if !f(fd_HistoricalRewardsRecord_epoch, value) {
			return
		}
	}
	if x.HistoricalRewards != nil {
		value := protoreflect.ValueOfMessage(x.HistoricalRewards.ProtoReflect())
		if !f(fd_HistoricalRewardsRecord_historical_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_HistoricalRewardsRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.epoch":
		return x.Epoch != uint64(0)
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards":
		return x.HistoricalRewards != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.HistoricalRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.HistoricalRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalRewardsRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.epoch":
		x.Epoch = uint64(0)
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards":
		x.HistoricalRewards = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.HistoricalRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.HistoricalRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_HistoricalRewardsRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.epoch":
		value := x.Epoch
		return protoreflect.ValueOfUint64(value)
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards":
		value := x.HistoricalRewards
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.HistoricalRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.HistoricalRewardsRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalRewardsRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.epoch":
		x.Epoch = value.Uint()
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards":
		x.HistoricalRewards = value.Message().Interface().(*HistoricalRewards)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.HistoricalRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.HistoricalRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalRewardsRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards":
		if x.HistoricalRewards == nil {
			x.HistoricalRewards = new(HistoricalRewards)
		}
		return protoreflect.ValueOfMessage(x.HistoricalRewards.ProtoReflect())
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.HistoricalRewardsRecord is not mutable"))
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.epoch":
		panic(fmt.Errorf("field epoch of message mantrachain.farming.v1beta1.HistoricalRewardsRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.HistoricalRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.HistoricalRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_HistoricalRewardsRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.epoch":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards":
		m := new(HistoricalRewards)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.HistoricalRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.HistoricalRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_HistoricalRewardsRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.HistoricalRewardsRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_HistoricalRewardsRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HistoricalRewardsRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_HistoricalRewardsRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_HistoricalRewardsRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*HistoricalRewardsRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Epoch != 0 {
			n += 1 + runtime.Sov(uint64(x.Epoch))
		}
		if x.HistoricalRewards != nil {
			l = options.Size(x.HistoricalRewards)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*HistoricalRewardsRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.HistoricalRewards != nil {
			encoded, err := options.Marshal(x.HistoricalRewards)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Epoch != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Epoch))
			i--
			dAtA[i] = 0x10
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*HistoricalRewardsRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HistoricalRewardsRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HistoricalRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
				}
				x.Epoch = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Epoch |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HistoricalRewards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.HistoricalRewards == nil {
					x.HistoricalRewards = &HistoricalRewards{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.HistoricalRewards); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OutstandingRewardsRecord                     protoreflect.MessageDescriptor
	fd_OutstandingRewardsRecord_staking_coin_denom  protoreflect.FieldDescriptor
	fd_OutstandingRewardsRecord_outstanding_rewards protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_OutstandingRewardsRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("OutstandingRewardsRecord")
	fd_OutstandingRewardsRecord_staking_coin_denom = md_OutstandingRewardsRecord.Fields().ByName("staking_coin_denom")
	fd_OutstandingRewardsRecord_outstanding_rewards = md_OutstandingRewardsRecord.Fields().ByName("outstanding_rewards")
}

var _ protoreflect.Message = (*fastReflection_OutstandingRewardsRecord)(nil)

type fastReflection_OutstandingRewardsRecord OutstandingRewardsRecord

func (x *OutstandingRewardsRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OutstandingRewardsRecord)(x)
}

func (x *OutstandingRewardsRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OutstandingRewardsRecord_messageType fastReflection_OutstandingRewardsRecord_messageType
var _ protoreflect.MessageType = fastReflection_OutstandingRewardsRecord_messageType{}

type fastReflection_OutstandingRewardsRecord_messageType struct{}

func (x fastReflection_OutstandingRewardsRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OutstandingRewardsRecord)(nil)
}
func (x fastReflection_OutstandingRewardsRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_OutstandingRewardsRecord)
}
func (x fastReflection_OutstandingRewardsRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OutstandingRewardsRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OutstandingRewardsRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_OutstandingRewardsRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OutstandingRewardsRecord) Type() protoreflect.MessageType {
	return _fastReflection_OutstandingRewardsRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OutstandingRewardsRecord) New() protoreflect.Message {
	return new(fastReflection_OutstandingRewardsRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OutstandingRewardsRecord) Interface() protoreflect.ProtoMessage {
	return (*OutstandingRewardsRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OutstandingRewardsRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_OutstandingRewardsRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.OutstandingRewards != nil {
		value := protoreflect.ValueOfMessage(x.OutstandingRewards.ProtoReflect())
		if !f(fd_OutstandingRewardsRecord_outstanding_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OutstandingRewardsRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards":
		return x.OutstandingRewards != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.OutstandingRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.OutstandingRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutstandingRewardsRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards":
		x.OutstandingRewards = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.OutstandingRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.OutstandingRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OutstandingRewardsRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards":
		value := x.OutstandingRewards
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.OutstandingRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.OutstandingRewardsRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutstandingRewardsRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards":
		x.OutstandingRewards = value.Message().Interface().(*OutstandingRewards)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.OutstandingRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.OutstandingRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutstandingRewardsRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards":
		if x.OutstandingRewards == nil {
			x.OutstandingRewards = new(OutstandingRewards)
		}
		return protoreflect.ValueOfMessage(x.OutstandingRewards.ProtoReflect())
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.OutstandingRewardsRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.OutstandingRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.OutstandingRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OutstandingRewardsRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards":
		m := new(OutstandingRewards)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.OutstandingRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.OutstandingRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OutstandingRewardsRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.OutstandingRewardsRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OutstandingRewardsRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutstandingRewardsRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OutstandingRewardsRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OutstandingRewardsRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OutstandingRewardsRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OutstandingRewards != nil {
			l = options.Size(x.OutstandingRewards)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OutstandingRewardsRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.OutstandingRewards != nil {
			encoded, err := options.Marshal(x.OutstandingRewards)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OutstandingRewardsRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutstandingRewardsRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutstandingRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OutstandingRewards == nil {
					x.OutstandingRewards = &OutstandingRewards{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OutstandingRewards); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UnharvestedRewardsRecord                     protoreflect.MessageDescriptor
	fd_UnharvestedRewardsRecord_farmer              protoreflect.FieldDescriptor
	fd_UnharvestedRewardsRecord_staking_coin_denom  protoreflect.FieldDescriptor
	fd_UnharvestedRewardsRecord_unharvested_rewards protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_UnharvestedRewardsRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("UnharvestedRewardsRecord")
	fd_UnharvestedRewardsRecord_farmer = md_UnharvestedRewardsRecord.Fields().ByName("farmer")
	fd_UnharvestedRewardsRecord_staking_coin_denom = md_UnharvestedRewardsRecord.Fields().ByName("staking_coin_denom")
	fd_UnharvestedRewardsRecord_unharvested_rewards = md_UnharvestedRewardsRecord.Fields().ByName("unharvested_rewards")
}

var _ protoreflect.Message = (*fastReflection_UnharvestedRewardsRecord)(nil)

type fastReflection_UnharvestedRewardsRecord UnharvestedRewardsRecord

func (x *UnharvestedRewardsRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UnharvestedRewardsRecord)(x)
}

func (x *UnharvestedRewardsRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UnharvestedRewardsRecord_messageType fastReflection_UnharvestedRewardsRecord_messageType
var _ protoreflect.MessageType = fastReflection_UnharvestedRewardsRecord_messageType{}

type fastReflection_UnharvestedRewardsRecord_messageType struct{}

func (x fastReflection_UnharvestedRewardsRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UnharvestedRewardsRecord)(nil)
}
func (x fastReflection_UnharvestedRewardsRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_UnharvestedRewardsRecord)
}
func (x fastReflection_UnharvestedRewardsRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UnharvestedRewardsRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UnharvestedRewardsRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_UnharvestedRewardsRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UnharvestedRewardsRecord) Type() protoreflect.MessageType {
	return _fastReflection_UnharvestedRewardsRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UnharvestedRewardsRecord) New() protoreflect.Message {
	return new(fastReflection_UnharvestedRewardsRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UnharvestedRewardsRecord) Interface() protoreflect.ProtoMessage {
	return (*UnharvestedRewardsRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UnharvestedRewardsRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Farmer != "" {
		value := protoreflect.ValueOfString(x.Farmer)
		if !f(fd_UnharvestedRewardsRecord_farmer, value) {
			return
		}
	}
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_UnharvestedRewardsRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.UnharvestedRewards != nil {
		value := protoreflect.ValueOfMessage(x.UnharvestedRewards.ProtoReflect())
		if !f(fd_UnharvestedRewardsRecord_unharvested_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UnharvestedRewardsRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.farmer":
		return x.Farmer != ""
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards":
		return x.UnharvestedRewards != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.UnharvestedRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.UnharvestedRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnharvestedRewardsRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.farmer":
		x.Farmer = ""
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards":
		x.UnharvestedRewards = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.UnharvestedRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.UnharvestedRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UnharvestedRewardsRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.farmer":
		value := x.Farmer
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards":
		value := x.UnharvestedRewards
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.UnharvestedRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.UnharvestedRewardsRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnharvestedRewardsRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.farmer":
		x.Farmer = value.Interface().(string)
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards":
		x.UnharvestedRewards = value.Message().Interface().(*UnharvestedRewards)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.UnharvestedRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.UnharvestedRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnharvestedRewardsRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards":
		if x.UnharvestedRewards == nil {
			x.UnharvestedRewards = new(UnharvestedRewards)
		}
		return protoreflect.ValueOfMessage(x.UnharvestedRewards.ProtoReflect())
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.farmer":
		panic(fmt.Errorf("field farmer of message mantrachain.farming.v1beta1.UnharvestedRewardsRecord is not mutable"))
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.UnharvestedRewardsRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.UnharvestedRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.UnharvestedRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UnharvestedRewardsRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.farmer":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards":
		m := new(UnharvestedRewards)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.UnharvestedRewardsRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.UnharvestedRewardsRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UnharvestedRewardsRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.UnharvestedRewardsRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UnharvestedRewardsRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnharvestedRewardsRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UnharvestedRewardsRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UnharvestedRewardsRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UnharvestedRewardsRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Farmer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnharvestedRewards != nil {
			l = options.Size(x.UnharvestedRewards)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UnharvestedRewardsRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.UnharvestedRewards != nil {
			encoded, err := options.Marshal(x.UnharvestedRewards)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Farmer) > 0 {
			i -= len(x.Farmer)
			copy(dAtA[i:], x.Farmer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Farmer)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UnharvestedRewardsRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UnharvestedRewardsRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UnharvestedRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Farmer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnharvestedRewards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UnharvestedRewards == nil {
					x.UnharvestedRewards = &UnharvestedRewards{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnharvestedRewards); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CurrentEpochRecord                    protoreflect.MessageDescriptor
	fd_CurrentEpochRecord_staking_coin_denom protoreflect.FieldDescriptor
	fd_CurrentEpochRecord_current_epoch      protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_farming_v1beta1_genesis_proto_init()
	md_CurrentEpochRecord = File_mantrachain_farming_v1beta1_genesis_proto.Messages().ByName("CurrentEpochRecord")
	fd_CurrentEpochRecord_staking_coin_denom = md_CurrentEpochRecord.Fields().ByName("staking_coin_denom")
	fd_CurrentEpochRecord_current_epoch = md_CurrentEpochRecord.Fields().ByName("current_epoch")
}

var _ protoreflect.Message = (*fastReflection_CurrentEpochRecord)(nil)

type fastReflection_CurrentEpochRecord CurrentEpochRecord

func (x *CurrentEpochRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CurrentEpochRecord)(x)
}

func (x *CurrentEpochRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CurrentEpochRecord_messageType fastReflection_CurrentEpochRecord_messageType
var _ protoreflect.MessageType = fastReflection_CurrentEpochRecord_messageType{}

type fastReflection_CurrentEpochRecord_messageType struct{}

func (x fastReflection_CurrentEpochRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CurrentEpochRecord)(nil)
}
func (x fastReflection_CurrentEpochRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_CurrentEpochRecord)
}
func (x fastReflection_CurrentEpochRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentEpochRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CurrentEpochRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_CurrentEpochRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CurrentEpochRecord) Type() protoreflect.MessageType {
	return _fastReflection_CurrentEpochRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CurrentEpochRecord) New() protoreflect.Message {
	return new(fastReflection_CurrentEpochRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CurrentEpochRecord) Interface() protoreflect.ProtoMessage {
	return (*CurrentEpochRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CurrentEpochRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.StakingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.StakingCoinDenom)
		if !f(fd_CurrentEpochRecord_staking_coin_denom, value) {
			return
		}
	}
	if x.CurrentEpoch != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CurrentEpoch)
		if !f(fd_CurrentEpochRecord_current_epoch, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CurrentEpochRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.staking_coin_denom":
		return x.StakingCoinDenom != ""
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.current_epoch":
		return x.CurrentEpoch != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.CurrentEpochRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.CurrentEpochRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.staking_coin_denom":
		x.StakingCoinDenom = ""
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.current_epoch":
		x.CurrentEpoch = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.CurrentEpochRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.CurrentEpochRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CurrentEpochRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.staking_coin_denom":
		value := x.StakingCoinDenom
		return protoreflect.ValueOfString(value)
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.current_epoch":
		value := x.CurrentEpoch
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.CurrentEpochRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.CurrentEpochRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.staking_coin_denom":
		x.StakingCoinDenom = value.Interface().(string)
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.current_epoch":
		x.CurrentEpoch = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.CurrentEpochRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.CurrentEpochRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.staking_coin_denom":
		panic(fmt.Errorf("field staking_coin_denom of message mantrachain.farming.v1beta1.CurrentEpochRecord is not mutable"))
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.current_epoch":
		panic(fmt.Errorf("field current_epoch of message mantrachain.farming.v1beta1.CurrentEpochRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.CurrentEpochRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.CurrentEpochRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CurrentEpochRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.staking_coin_denom":
		return protoreflect.ValueOfString("")
	case "mantrachain.farming.v1beta1.CurrentEpochRecord.current_epoch":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.farming.v1beta1.CurrentEpochRecord"))
		}
		panic(fmt.Errorf("message mantrachain.farming.v1beta1.CurrentEpochRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CurrentEpochRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.farming.v1beta1.CurrentEpochRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CurrentEpochRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CurrentEpochRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CurrentEpochRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CurrentEpochRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CurrentEpochRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.StakingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentEpoch != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentEpoch))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CurrentEpochRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CurrentEpoch != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentEpoch))
			i--
			dAtA[i] = 0x10
		}
		if len(x.StakingCoinDenom) > 0 {
			i -= len(x.StakingCoinDenom)
			copy(dAtA[i:], x.StakingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StakingCoinDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CurrentEpochRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentEpochRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CurrentEpochRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StakingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
				}
				x.CurrentEpoch = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentEpoch |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mantrachain/farming/v1beta1/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the farming module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines all the parameters of the module.
	Params       *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	GlobalPlanId uint64  `protobuf:"varint,2,opt,name=global_plan_id,json=globalPlanId,proto3" json:"global_plan_id,omitempty"`
	// plan_records defines the plan records used for genesis state
	PlanRecords               []*PlanRecord               `protobuf:"bytes,3,rep,name=plan_records,json=planRecords,proto3" json:"plan_records,omitempty"`
	StakingRecords            []*StakingRecord            `protobuf:"bytes,4,rep,name=staking_records,json=stakingRecords,proto3" json:"staking_records,omitempty"`
	QueuedStakingRecords      []*QueuedStakingRecord      `protobuf:"bytes,5,rep,name=queued_staking_records,json=queuedStakingRecords,proto3" json:"queued_staking_records,omitempty"`
	HistoricalRewardsRecords  []*HistoricalRewardsRecord  `protobuf:"bytes,6,rep,name=historical_rewards_records,json=historicalRewardsRecords,proto3" json:"historical_rewards_records,omitempty"`
	OutstandingRewardsRecords []*OutstandingRewardsRecord `protobuf:"bytes,7,rep,name=outstanding_rewards_records,json=outstandingRewardsRecords,proto3" json:"outstanding_rewards_records,omitempty"`
	UnharvestedRewardsRecords []*UnharvestedRewardsRecord `protobuf:"bytes,8,rep,name=unharvested_rewards_records,json=unharvestedRewardsRecords,proto3" json:"unharvested_rewards_records,omitempty"`
	CurrentEpochRecords       []*CurrentEpochRecord       `protobuf:"bytes,9,rep,name=current_epoch_records,json=currentEpochRecords,proto3" json:"current_epoch_records,omitempty"`
	TotalStakingsRecords      []*TotalStakingsRecord      `protobuf:"bytes,10,rep,name=total_stakings_records,json=totalStakingsRecords,proto3" json:"total_stakings_records,omitempty"`
	// reward_pool_coins specifies balance of the reward pool to be distributed in the plans
	// this param is needed for import/export validation
	RewardPoolCoins []*v1beta1.Coin `protobuf:"bytes,11,rep,name=reward_pool_coins,json=rewardPoolCoins,proto3" json:"reward_pool_coins,omitempty"`
	// last_epoch_time specifies the last executed epoch time of the plans
	LastEpochTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=last_epoch_time,json=lastEpochTime,proto3" json:"last_epoch_time,omitempty"`
	// current_epoch_days specifies the epoch used when allocating farming rewards in end blocker
	CurrentEpochDays uint32 `protobuf:"varint,13,opt,name=current_epoch_days,json=currentEpochDays,proto3" json:"current_epoch_days,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetGlobalPlanId() uint64 {
	if x != nil {
		return x.GlobalPlanId
	}
	return 0
}

func (x *GenesisState) GetPlanRecords() []*PlanRecord {
	if x != nil {
		return x.PlanRecords
	}
	return nil
}

func (x *GenesisState) GetStakingRecords() []*StakingRecord {
	if x != nil {
		return x.StakingRecords
	}
	return nil
}

func (x *GenesisState) GetQueuedStakingRecords() []*QueuedStakingRecord {
	if x != nil {
		return x.QueuedStakingRecords
	}
	return nil
}

func (x *GenesisState) GetHistoricalRewardsRecords() []*HistoricalRewardsRecord {
	if x != nil {
		return x.HistoricalRewardsRecords
	}
	return nil
}

func (x *GenesisState) GetOutstandingRewardsRecords() []*OutstandingRewardsRecord {
	if x != nil {
		return x.OutstandingRewardsRecords
	}
	return nil
}

func (x *GenesisState) GetUnharvestedRewardsRecords() []*UnharvestedRewardsRecord {
	if x != nil {
		return x.UnharvestedRewardsRecords
	}
	return nil
}

func (x *GenesisState) GetCurrentEpochRecords() []*CurrentEpochRecord {
	if x != nil {
		return x.CurrentEpochRecords
	}
	return nil
}

func (x *GenesisState) GetTotalStakingsRecords() []*TotalStakingsRecord {
	if x != nil {
		return x.TotalStakingsRecords
	}
	return nil
}

func (x *GenesisState) GetRewardPoolCoins() []*v1beta1.Coin {
	if x != nil {
		return x.RewardPoolCoins
	}
	return nil
}

func (x *GenesisState) GetLastEpochTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEpochTime
	}
	return nil
}

func (x *GenesisState) GetCurrentEpochDays() uint32 {
	if x != nil {
		return x.CurrentEpochDays
	}
	return 0
}

// PlanRecord is used for import/export via genesis json.
type PlanRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plan specifies the plan interface; it can be FixedAmountPlan or RatioPlan
	Plan *anypb.Any `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	// farming_pool_coins specifies balance of the farming pool for the plan
	// this param is needed for import/export validation
	FarmingPoolCoins []*v1beta1.Coin `protobuf:"bytes,2,rep,name=farming_pool_coins,json=farmingPoolCoins,proto3" json:"farming_pool_coins,omitempty"`
}

func (x *PlanRecord) Reset() {
	*x = PlanRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRecord) ProtoMessage() {}

// Deprecated: Use PlanRecord.ProtoReflect.Descriptor instead.
func (*PlanRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *PlanRecord) GetPlan() *anypb.Any {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *PlanRecord) GetFarmingPoolCoins() []*v1beta1.Coin {
	if x != nil {
		return x.FarmingPoolCoins
	}
	return nil
}

// StakingRecord is used for import/export via genesis json.
type StakingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingCoinDenom string   `protobuf:"bytes,1,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	Farmer           string   `protobuf:"bytes,2,opt,name=farmer,proto3" json:"farmer,omitempty"`
	Staking          *Staking `protobuf:"bytes,3,opt,name=staking,proto3" json:"staking,omitempty"`
}

func (x *StakingRecord) Reset() {
	*x = StakingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRecord) ProtoMessage() {}

// Deprecated: Use StakingRecord.ProtoReflect.Descriptor instead.
func (*StakingRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{2}
}

func (x *StakingRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *StakingRecord) GetFarmer() string {
	if x != nil {
		return x.Farmer
	}
	return ""
}

func (x *StakingRecord) GetStaking() *Staking {
	if x != nil {
		return x.Staking
	}
	return nil
}

// QueuedStakingRecord is used for import/export via genesis json.
type QueuedStakingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndTime          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	StakingCoinDenom string                 `protobuf:"bytes,2,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	Farmer           string                 `protobuf:"bytes,3,opt,name=farmer,proto3" json:"farmer,omitempty"`
	QueuedStaking    *QueuedStaking         `protobuf:"bytes,4,opt,name=queued_staking,json=queuedStaking,proto3" json:"queued_staking,omitempty"`
}

func (x *QueuedStakingRecord) Reset() {
	*x = QueuedStakingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedStakingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedStakingRecord) ProtoMessage() {}

// Deprecated: Use QueuedStakingRecord.ProtoReflect.Descriptor instead.
func (*QueuedStakingRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{3}
}

func (x *QueuedStakingRecord) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *QueuedStakingRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *QueuedStakingRecord) GetFarmer() string {
	if x != nil {
		return x.Farmer
	}
	return ""
}

func (x *QueuedStakingRecord) GetQueuedStaking() *QueuedStaking {
	if x != nil {
		return x.QueuedStaking
	}
	return nil
}

// TotalStakingsRecord is used for import/export via genesis json.
type TotalStakingsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingCoinDenom string `protobuf:"bytes,1,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	// amount specifies total amount of the staking for the staking coin denom except queued staking
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
	// staking coin denom is stored this param is needed for import/export validation
	StakingReserveCoins []*v1beta1.Coin `protobuf:"bytes,9,rep,name=staking_reserve_coins,json=stakingReserveCoins,proto3" json:"staking_reserve_coins,omitempty"`
}

func (x *TotalStakingsRecord) Reset() {
	*x = TotalStakingsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalStakingsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalStakingsRecord) ProtoMessage() {}

// Deprecated: Use TotalStakingsRecord.ProtoReflect.Descriptor instead.
func (*TotalStakingsRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{4}
}

func (x *TotalStakingsRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *TotalStakingsRecord) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TotalStakingsRecord) GetStakingReserveCoins() []*v1beta1.Coin {
	if x != nil {
		return x.StakingReserveCoins
	}
	return nil
}

// HistoricalRewardsRecord is used for import/export via genesis json.
type HistoricalRewardsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingCoinDenom  string             `protobuf:"bytes,1,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	Epoch             uint64             `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	HistoricalRewards *HistoricalRewards `protobuf:"bytes,3,opt,name=historical_rewards,json=historicalRewards,proto3" json:"historical_rewards,omitempty"`
}

func (x *HistoricalRewardsRecord) Reset() {
	*x = HistoricalRewardsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalRewardsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalRewardsRecord) ProtoMessage() {}

// Deprecated: Use HistoricalRewardsRecord.ProtoReflect.Descriptor instead.
func (*HistoricalRewardsRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{5}
}

func (x *HistoricalRewardsRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *HistoricalRewardsRecord) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *HistoricalRewardsRecord) GetHistoricalRewards() *HistoricalRewards {
	if x != nil {
		return x.HistoricalRewards
	}
	return nil
}

// OutstandingRewardsRecord is used for import/export via genesis json.
type OutstandingRewardsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingCoinDenom   string              `protobuf:"bytes,1,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	OutstandingRewards *OutstandingRewards `protobuf:"bytes,2,opt,name=outstanding_rewards,json=outstandingRewards,proto3" json:"outstanding_rewards,omitempty"`
}

func (x *OutstandingRewardsRecord) Reset() {
	*x = OutstandingRewardsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutstandingRewardsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutstandingRewardsRecord) ProtoMessage() {}

// Deprecated: Use OutstandingRewardsRecord.ProtoReflect.Descriptor instead.
func (*OutstandingRewardsRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{6}
}

func (x *OutstandingRewardsRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *OutstandingRewardsRecord) GetOutstandingRewards() *OutstandingRewards {
	if x != nil {
		return x.OutstandingRewards
	}
	return nil
}

type UnharvestedRewardsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Farmer             string              `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	StakingCoinDenom   string              `protobuf:"bytes,2,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	UnharvestedRewards *UnharvestedRewards `protobuf:"bytes,3,opt,name=unharvested_rewards,json=unharvestedRewards,proto3" json:"unharvested_rewards,omitempty"`
}

func (x *UnharvestedRewardsRecord) Reset() {
	*x = UnharvestedRewardsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnharvestedRewardsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnharvestedRewardsRecord) ProtoMessage() {}

// Deprecated: Use UnharvestedRewardsRecord.ProtoReflect.Descriptor instead.
func (*UnharvestedRewardsRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{7}
}

func (x *UnharvestedRewardsRecord) GetFarmer() string {
	if x != nil {
		return x.Farmer
	}
	return ""
}

func (x *UnharvestedRewardsRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *UnharvestedRewardsRecord) GetUnharvestedRewards() *UnharvestedRewards {
	if x != nil {
		return x.UnharvestedRewards
	}
	return nil
}

// CurrentEpochRecord is used for import/export via genesis json.
type CurrentEpochRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingCoinDenom string `protobuf:"bytes,1,opt,name=staking_coin_denom,json=stakingCoinDenom,proto3" json:"staking_coin_denom,omitempty"`
	CurrentEpoch     uint64 `protobuf:"varint,2,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
}

func (x *CurrentEpochRecord) Reset() {
	*x = CurrentEpochRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentEpochRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentEpochRecord) ProtoMessage() {}

// Deprecated: Use CurrentEpochRecord.ProtoReflect.Descriptor instead.
func (*CurrentEpochRecord) Descriptor() ([]byte, []int) {
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP(), []int{8}
}

func (x *CurrentEpochRecord) GetStakingCoinDenom() string {
	if x != nil {
		return x.StakingCoinDenom
	}
	return ""
}

func (x *CurrentEpochRecord) GetCurrentEpoch() uint64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

var File_mantrachain_farming_v1beta1_genesis_proto protoreflect.FileDescriptor

var file_mantrachain_farming_v1beta1_genesis_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f,
	0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2f, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x09,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x59,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x6c, 0x0a, 0x16, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x14, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x78, 0x0a, 0x1a, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x7b, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x19, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x7b,
	0x0a, 0x1b, 0x75, 0x6e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x55, 0x6e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x19, 0x75, 0x6e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x69, 0x0a, 0x15, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x6c, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x77, 0x0a, 0x11, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00,
	0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x44, 0x61, 0x79, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0xca, 0x01, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xca, 0xb4, 0x2d, 0x05, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x79, 0x0a, 0x12, 0x66, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30,
	0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x10, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xa5, 0x01, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61,
	0x72, 0x6d, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00,
	0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xff, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72,
	0x6d, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x3a, 0x08, 0x88, 0xa0,
	0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0x85, 0x02, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x35, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x7f, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8,
	0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xcc,
	0x01, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x63,
	0x0a, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xba, 0x01,
	0x0a, 0x18, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x66, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x12, 0x6f, 0x75,
	0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22, 0xd2, 0x01, 0x0a, 0x18, 0x55,
	0x6e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x66, 0x0a,
	0x13, 0x75, 0x6e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x68, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x12, 0x75, 0x6e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0x71, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0,
	0x1f, 0x00, 0x42, 0xfe, 0x01, 0xa8, 0xe2, 0x1e, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x66, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x46, 0x58, 0xaa, 0x02, 0x1b,
	0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x46, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1b, 0x4d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x46, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x27, 0x4d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x46, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5c,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x3a, 0x3a, 0x46, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantrachain_farming_v1beta1_genesis_proto_rawDescOnce sync.Once
	file_mantrachain_farming_v1beta1_genesis_proto_rawDescData = file_mantrachain_farming_v1beta1_genesis_proto_rawDesc
)

func file_mantrachain_farming_v1beta1_genesis_proto_rawDescGZIP() []byte {
	file_mantrachain_farming_v1beta1_genesis_proto_rawDescOnce.Do(func() {
		file_mantrachain_farming_v1beta1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantrachain_farming_v1beta1_genesis_proto_rawDescData)
	})
	return file_mantrachain_farming_v1beta1_genesis_proto_rawDescData
}

var file_mantrachain_farming_v1beta1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mantrachain_farming_v1beta1_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),             // 0: mantrachain.farming.v1beta1.GenesisState
	(*PlanRecord)(nil),               // 1: mantrachain.farming.v1beta1.PlanRecord
	(*StakingRecord)(nil),            // 2: mantrachain.farming.v1beta1.StakingRecord
	(*QueuedStakingRecord)(nil),      // 3: mantrachain.farming.v1beta1.QueuedStakingRecord
	(*TotalStakingsRecord)(nil),      // 4: mantrachain.farming.v1beta1.TotalStakingsRecord
	(*HistoricalRewardsRecord)(nil),  // 5: mantrachain.farming.v1beta1.HistoricalRewardsRecord
	(*OutstandingRewardsRecord)(nil), // 6: mantrachain.farming.v1beta1.OutstandingRewardsRecord
	(*UnharvestedRewardsRecord)(nil), // 7: mantrachain.farming.v1beta1.UnharvestedRewardsRecord
	(*CurrentEpochRecord)(nil),       // 8: mantrachain.farming.v1beta1.CurrentEpochRecord
	(*Params)(nil),                   // 9: mantrachain.farming.v1beta1.Params
	(*v1beta1.Coin)(nil),             // 10: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil),    // 11: google.protobuf.Timestamp
	(*anypb.Any)(nil),                // 12: google.protobuf.Any
	(*Staking)(nil),                  // 13: mantrachain.farming.v1beta1.Staking
	(*QueuedStaking)(nil),            // 14: mantrachain.farming.v1beta1.QueuedStaking
	(*HistoricalRewards)(nil),        // 15: mantrachain.farming.v1beta1.HistoricalRewards
	(*OutstandingRewards)(nil),       // 16: mantrachain.farming.v1beta1.OutstandingRewards
	(*UnharvestedRewards)(nil),       // 17: mantrachain.farming.v1beta1.UnharvestedRewards
}
var file_mantrachain_farming_v1beta1_genesis_proto_depIdxs = []int32{
	9,  // 0: mantrachain.farming.v1beta1.GenesisState.params:type_name -> mantrachain.farming.v1beta1.Params
	1,  // 1: mantrachain.farming.v1beta1.GenesisState.plan_records:type_name -> mantrachain.farming.v1beta1.PlanRecord
	2,  // 2: mantrachain.farming.v1beta1.GenesisState.staking_records:type_name -> mantrachain.farming.v1beta1.StakingRecord
	3,  // 3: mantrachain.farming.v1beta1.GenesisState.queued_staking_records:type_name -> mantrachain.farming.v1beta1.QueuedStakingRecord
	5,  // 4: mantrachain.farming.v1beta1.GenesisState.historical_rewards_records:type_name -> mantrachain.farming.v1beta1.HistoricalRewardsRecord
	6,  // 5: mantrachain.farming.v1beta1.GenesisState.outstanding_rewards_records:type_name -> mantrachain.farming.v1beta1.OutstandingRewardsRecord
	7,  // 6: mantrachain.farming.v1beta1.GenesisState.unharvested_rewards_records:type_name -> mantrachain.farming.v1beta1.UnharvestedRewardsRecord
	8,  // 7: mantrachain.farming.v1beta1.GenesisState.current_epoch_records:type_name -> mantrachain.farming.v1beta1.CurrentEpochRecord
	4,  // 8: mantrachain.farming.v1beta1.GenesisState.total_stakings_records:type_name -> mantrachain.farming.v1beta1.TotalStakingsRecord
	10, // 9: mantrachain.farming.v1beta1.GenesisState.reward_pool_coins:type_name -> cosmos.base.v1beta1.Coin
	11, // 10: mantrachain.farming.v1beta1.GenesisState.last_epoch_time:type_name -> google.protobuf.Timestamp
	12, // 11: mantrachain.farming.v1beta1.PlanRecord.plan:type_name -> google.protobuf.Any
	10, // 12: mantrachain.farming.v1beta1.PlanRecord.farming_pool_coins:type_name -> cosmos.base.v1beta1.Coin
	13, // 13: mantrachain.farming.v1beta1.StakingRecord.staking:type_name -> mantrachain.farming.v1beta1.Staking
	11, // 14: mantrachain.farming.v1beta1.QueuedStakingRecord.end_time:type_name -> google.protobuf.Timestamp
	14, // 15: mantrachain.farming.v1beta1.QueuedStakingRecord.queued_staking:type_name -> mantrachain.farming.v1beta1.QueuedStaking
	10, // 16: mantrachain.farming.v1beta1.TotalStakingsRecord.staking_reserve_coins:type_name -> cosmos.base.v1beta1.Coin
	15, // 17: mantrachain.farming.v1beta1.HistoricalRewardsRecord.historical_rewards:type_name -> mantrachain.farming.v1beta1.HistoricalRewards
	16, // 18: mantrachain.farming.v1beta1.OutstandingRewardsRecord.outstanding_rewards:type_name -> mantrachain.farming.v1beta1.OutstandingRewards
	17, // 19: mantrachain.farming.v1beta1.UnharvestedRewardsRecord.unharvested_rewards:type_name -> mantrachain.farming.v1beta1.UnharvestedRewards
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_mantrachain_farming_v1beta1_genesis_proto_init() }
func file_mantrachain_farming_v1beta1_genesis_proto_init() {
	if File_mantrachain_farming_v1beta1_genesis_proto != nil {
		return
	}
	file_mantrachain_farming_v1beta1_farming_proto_init()
	file_mantrachain_farming_v1beta1_params_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedStakingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalStakingsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalRewardsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutstandingRewardsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnharvestedRewardsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_farming_v1beta1_genesis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentEpochRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantrachain_farming_v1beta1_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mantrachain_farming_v1beta1_genesis_proto_goTypes,
		DependencyIndexes: file_mantrachain_farming_v1beta1_genesis_proto_depIdxs,
		MessageInfos:      file_mantrachain_farming_v1beta1_genesis_proto_msgTypes,
	}.Build()
	File_mantrachain_farming_v1beta1_genesis_proto = out.File
	file_mantrachain_farming_v1beta1_genesis_proto_rawDesc = nil
	file_mantrachain_farming_v1beta1_genesis_proto_goTypes = nil
	file_mantrachain_farming_v1beta1_genesis_proto_depIdxs = nil
}
