// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mantrachain/farming/v1beta1/tx.proto

package farmingv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName          = "/mantrachain.farming.v1beta1.Msg/UpdateParams"
	Msg_CreateFixedAmountPlan_FullMethodName = "/mantrachain.farming.v1beta1.Msg/CreateFixedAmountPlan"
	Msg_CreateRatioPlan_FullMethodName       = "/mantrachain.farming.v1beta1.Msg/CreateRatioPlan"
	Msg_Stake_FullMethodName                 = "/mantrachain.farming.v1beta1.Msg/Stake"
	Msg_Unstake_FullMethodName               = "/mantrachain.farming.v1beta1.Msg/Unstake"
	Msg_Harvest_FullMethodName               = "/mantrachain.farming.v1beta1.Msg/Harvest"
	Msg_RemovePlan_FullMethodName            = "/mantrachain.farming.v1beta1.Msg/RemovePlan"
	Msg_AdvanceEpoch_FullMethodName          = "/mantrachain.farming.v1beta1.Msg/AdvanceEpoch"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateFixedAmountPlan defines a method for creating a new fixed amount
	// farming plan
	CreateFixedAmountPlan(ctx context.Context, in *MsgCreateFixedAmountPlan, opts ...grpc.CallOption) (*MsgCreateFixedAmountPlanResponse, error)
	// CreateRatioPlan defines a method for creating a new ratio farming plan
	CreateRatioPlan(ctx context.Context, in *MsgCreateRatioPlan, opts ...grpc.CallOption) (*MsgCreateRatioPlanResponse, error)
	// Stake defines a method for staking coins into the farming plan
	Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error)
	// Unstake defines a method for unstaking coins from the farming plan
	Unstake(ctx context.Context, in *MsgUnstake, opts ...grpc.CallOption) (*MsgUnstakeResponse, error)
	// Harvest defines a method for claiming farming rewards
	Harvest(ctx context.Context, in *MsgHarvest, opts ...grpc.CallOption) (*MsgHarvestResponse, error)
	// RemovePlan defines a method for removing a terminated plan.
	RemovePlan(ctx context.Context, in *MsgRemovePlan, opts ...grpc.CallOption) (*MsgRemovePlanResponse, error)
	// AdvanceEpoch defines a method for advancing epoch by one, just for testing purpose
	// and shouldn't be used in real world
	AdvanceEpoch(ctx context.Context, in *MsgAdvanceEpoch, opts ...grpc.CallOption) (*MsgAdvanceEpochResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateFixedAmountPlan(ctx context.Context, in *MsgCreateFixedAmountPlan, opts ...grpc.CallOption) (*MsgCreateFixedAmountPlanResponse, error) {
	out := new(MsgCreateFixedAmountPlanResponse)
	err := c.cc.Invoke(ctx, Msg_CreateFixedAmountPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRatioPlan(ctx context.Context, in *MsgCreateRatioPlan, opts ...grpc.CallOption) (*MsgCreateRatioPlanResponse, error) {
	out := new(MsgCreateRatioPlanResponse)
	err := c.cc.Invoke(ctx, Msg_CreateRatioPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error) {
	out := new(MsgStakeResponse)
	err := c.cc.Invoke(ctx, Msg_Stake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Unstake(ctx context.Context, in *MsgUnstake, opts ...grpc.CallOption) (*MsgUnstakeResponse, error) {
	out := new(MsgUnstakeResponse)
	err := c.cc.Invoke(ctx, Msg_Unstake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Harvest(ctx context.Context, in *MsgHarvest, opts ...grpc.CallOption) (*MsgHarvestResponse, error) {
	out := new(MsgHarvestResponse)
	err := c.cc.Invoke(ctx, Msg_Harvest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemovePlan(ctx context.Context, in *MsgRemovePlan, opts ...grpc.CallOption) (*MsgRemovePlanResponse, error) {
	out := new(MsgRemovePlanResponse)
	err := c.cc.Invoke(ctx, Msg_RemovePlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AdvanceEpoch(ctx context.Context, in *MsgAdvanceEpoch, opts ...grpc.CallOption) (*MsgAdvanceEpochResponse, error) {
	out := new(MsgAdvanceEpochResponse)
	err := c.cc.Invoke(ctx, Msg_AdvanceEpoch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateFixedAmountPlan defines a method for creating a new fixed amount
	// farming plan
	CreateFixedAmountPlan(context.Context, *MsgCreateFixedAmountPlan) (*MsgCreateFixedAmountPlanResponse, error)
	// CreateRatioPlan defines a method for creating a new ratio farming plan
	CreateRatioPlan(context.Context, *MsgCreateRatioPlan) (*MsgCreateRatioPlanResponse, error)
	// Stake defines a method for staking coins into the farming plan
	Stake(context.Context, *MsgStake) (*MsgStakeResponse, error)
	// Unstake defines a method for unstaking coins from the farming plan
	Unstake(context.Context, *MsgUnstake) (*MsgUnstakeResponse, error)
	// Harvest defines a method for claiming farming rewards
	Harvest(context.Context, *MsgHarvest) (*MsgHarvestResponse, error)
	// RemovePlan defines a method for removing a terminated plan.
	RemovePlan(context.Context, *MsgRemovePlan) (*MsgRemovePlanResponse, error)
	// AdvanceEpoch defines a method for advancing epoch by one, just for testing purpose
	// and shouldn't be used in real world
	AdvanceEpoch(context.Context, *MsgAdvanceEpoch) (*MsgAdvanceEpochResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateFixedAmountPlan(context.Context, *MsgCreateFixedAmountPlan) (*MsgCreateFixedAmountPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixedAmountPlan not implemented")
}
func (UnimplementedMsgServer) CreateRatioPlan(context.Context, *MsgCreateRatioPlan) (*MsgCreateRatioPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRatioPlan not implemented")
}
func (UnimplementedMsgServer) Stake(context.Context, *MsgStake) (*MsgStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (UnimplementedMsgServer) Unstake(context.Context, *MsgUnstake) (*MsgUnstakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unstake not implemented")
}
func (UnimplementedMsgServer) Harvest(context.Context, *MsgHarvest) (*MsgHarvestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Harvest not implemented")
}
func (UnimplementedMsgServer) RemovePlan(context.Context, *MsgRemovePlan) (*MsgRemovePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlan not implemented")
}
func (UnimplementedMsgServer) AdvanceEpoch(context.Context, *MsgAdvanceEpoch) (*MsgAdvanceEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvanceEpoch not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateFixedAmountPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFixedAmountPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFixedAmountPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateFixedAmountPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFixedAmountPlan(ctx, req.(*MsgCreateFixedAmountPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRatioPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRatioPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRatioPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateRatioPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRatioPlan(ctx, req.(*MsgCreateRatioPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Stake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Stake(ctx, req.(*MsgStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Unstake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnstake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Unstake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Unstake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Unstake(ctx, req.(*MsgUnstake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Harvest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHarvest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Harvest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Harvest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Harvest(ctx, req.(*MsgHarvest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemovePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemovePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemovePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemovePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemovePlan(ctx, req.(*MsgRemovePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AdvanceEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAdvanceEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AdvanceEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AdvanceEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AdvanceEpoch(ctx, req.(*MsgAdvanceEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.farming.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateFixedAmountPlan",
			Handler:    _Msg_CreateFixedAmountPlan_Handler,
		},
		{
			MethodName: "CreateRatioPlan",
			Handler:    _Msg_CreateRatioPlan_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _Msg_Stake_Handler,
		},
		{
			MethodName: "Unstake",
			Handler:    _Msg_Unstake_Handler,
		},
		{
			MethodName: "Harvest",
			Handler:    _Msg_Harvest_Handler,
		},
		{
			MethodName: "RemovePlan",
			Handler:    _Msg_RemovePlan_Handler,
		},
		{
			MethodName: "AdvanceEpoch",
			Handler:    _Msg_AdvanceEpoch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/farming/v1beta1/tx.proto",
}
