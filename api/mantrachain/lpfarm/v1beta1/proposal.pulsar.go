// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package lpfarmv1beta1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_FarmingPlanProposal_3_list)(nil)

type _FarmingPlanProposal_3_list struct {
	list *[]*CreatePlanRequest
}

func (x *_FarmingPlanProposal_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FarmingPlanProposal_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_FarmingPlanProposal_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CreatePlanRequest)
	(*x.list)[i] = concreteValue
}

func (x *_FarmingPlanProposal_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*CreatePlanRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FarmingPlanProposal_3_list) AppendMutable() protoreflect.Value {
	v := new(CreatePlanRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmingPlanProposal_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_FarmingPlanProposal_3_list) NewElement() protoreflect.Value {
	v := new(CreatePlanRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmingPlanProposal_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_FarmingPlanProposal_4_list)(nil)

type _FarmingPlanProposal_4_list struct {
	list *[]*TerminatePlanRequest
}

func (x *_FarmingPlanProposal_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FarmingPlanProposal_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_FarmingPlanProposal_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TerminatePlanRequest)
	(*x.list)[i] = concreteValue
}

func (x *_FarmingPlanProposal_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TerminatePlanRequest)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FarmingPlanProposal_4_list) AppendMutable() protoreflect.Value {
	v := new(TerminatePlanRequest)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmingPlanProposal_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_FarmingPlanProposal_4_list) NewElement() protoreflect.Value {
	v := new(TerminatePlanRequest)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FarmingPlanProposal_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_FarmingPlanProposal                         protoreflect.MessageDescriptor
	fd_FarmingPlanProposal_title                   protoreflect.FieldDescriptor
	fd_FarmingPlanProposal_description             protoreflect.FieldDescriptor
	fd_FarmingPlanProposal_create_plan_requests    protoreflect.FieldDescriptor
	fd_FarmingPlanProposal_terminate_plan_requests protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_lpfarm_v1beta1_proposal_proto_init()
	md_FarmingPlanProposal = File_mantrachain_lpfarm_v1beta1_proposal_proto.Messages().ByName("FarmingPlanProposal")
	fd_FarmingPlanProposal_title = md_FarmingPlanProposal.Fields().ByName("title")
	fd_FarmingPlanProposal_description = md_FarmingPlanProposal.Fields().ByName("description")
	fd_FarmingPlanProposal_create_plan_requests = md_FarmingPlanProposal.Fields().ByName("create_plan_requests")
	fd_FarmingPlanProposal_terminate_plan_requests = md_FarmingPlanProposal.Fields().ByName("terminate_plan_requests")
}

var _ protoreflect.Message = (*fastReflection_FarmingPlanProposal)(nil)

type fastReflection_FarmingPlanProposal FarmingPlanProposal

func (x *FarmingPlanProposal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FarmingPlanProposal)(x)
}

func (x *FarmingPlanProposal) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FarmingPlanProposal_messageType fastReflection_FarmingPlanProposal_messageType
var _ protoreflect.MessageType = fastReflection_FarmingPlanProposal_messageType{}

type fastReflection_FarmingPlanProposal_messageType struct{}

func (x fastReflection_FarmingPlanProposal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FarmingPlanProposal)(nil)
}
func (x fastReflection_FarmingPlanProposal_messageType) New() protoreflect.Message {
	return new(fastReflection_FarmingPlanProposal)
}
func (x fastReflection_FarmingPlanProposal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FarmingPlanProposal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FarmingPlanProposal) Descriptor() protoreflect.MessageDescriptor {
	return md_FarmingPlanProposal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FarmingPlanProposal) Type() protoreflect.MessageType {
	return _fastReflection_FarmingPlanProposal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FarmingPlanProposal) New() protoreflect.Message {
	return new(fastReflection_FarmingPlanProposal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FarmingPlanProposal) Interface() protoreflect.ProtoMessage {
	return (*FarmingPlanProposal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FarmingPlanProposal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Title != "" {
		value := protoreflect.ValueOfString(x.Title)
		if !f(fd_FarmingPlanProposal_title, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_FarmingPlanProposal_description, value) {
			return
		}
	}
	if len(x.CreatePlanRequests) != 0 {
		value := protoreflect.ValueOfList(&_FarmingPlanProposal_3_list{list: &x.CreatePlanRequests})
		if !f(fd_FarmingPlanProposal_create_plan_requests, value) {
			return
		}
	}
	if len(x.TerminatePlanRequests) != 0 {
		value := protoreflect.ValueOfList(&_FarmingPlanProposal_4_list{list: &x.TerminatePlanRequests})
		if !f(fd_FarmingPlanProposal_terminate_plan_requests, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FarmingPlanProposal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.title":
		return x.Title != ""
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.description":
		return x.Description != ""
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests":
		return len(x.CreatePlanRequests) != 0
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests":
		return len(x.TerminatePlanRequests) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.FarmingPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.FarmingPlanProposal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmingPlanProposal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.title":
		x.Title = ""
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.description":
		x.Description = ""
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests":
		x.CreatePlanRequests = nil
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests":
		x.TerminatePlanRequests = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.FarmingPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.FarmingPlanProposal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FarmingPlanProposal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.title":
		value := x.Title
		return protoreflect.ValueOfString(value)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests":
		if len(x.CreatePlanRequests) == 0 {
			return protoreflect.ValueOfList(&_FarmingPlanProposal_3_list{})
		}
		listValue := &_FarmingPlanProposal_3_list{list: &x.CreatePlanRequests}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests":
		if len(x.TerminatePlanRequests) == 0 {
			return protoreflect.ValueOfList(&_FarmingPlanProposal_4_list{})
		}
		listValue := &_FarmingPlanProposal_4_list{list: &x.TerminatePlanRequests}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.FarmingPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.FarmingPlanProposal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmingPlanProposal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.title":
		x.Title = value.Interface().(string)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.description":
		x.Description = value.Interface().(string)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests":
		lv := value.List()
		clv := lv.(*_FarmingPlanProposal_3_list)
		x.CreatePlanRequests = *clv.list
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests":
		lv := value.List()
		clv := lv.(*_FarmingPlanProposal_4_list)
		x.TerminatePlanRequests = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.FarmingPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.FarmingPlanProposal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmingPlanProposal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests":
		if x.CreatePlanRequests == nil {
			x.CreatePlanRequests = []*CreatePlanRequest{}
		}
		value := &_FarmingPlanProposal_3_list{list: &x.CreatePlanRequests}
		return protoreflect.ValueOfList(value)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests":
		if x.TerminatePlanRequests == nil {
			x.TerminatePlanRequests = []*TerminatePlanRequest{}
		}
		value := &_FarmingPlanProposal_4_list{list: &x.TerminatePlanRequests}
		return protoreflect.ValueOfList(value)
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.title":
		panic(fmt.Errorf("field title of message mantrachain.lpfarm.v1beta1.FarmingPlanProposal is not mutable"))
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.description":
		panic(fmt.Errorf("field description of message mantrachain.lpfarm.v1beta1.FarmingPlanProposal is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.FarmingPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.FarmingPlanProposal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FarmingPlanProposal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.title":
		return protoreflect.ValueOfString("")
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.description":
		return protoreflect.ValueOfString("")
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests":
		list := []*CreatePlanRequest{}
		return protoreflect.ValueOfList(&_FarmingPlanProposal_3_list{list: &list})
	case "mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests":
		list := []*TerminatePlanRequest{}
		return protoreflect.ValueOfList(&_FarmingPlanProposal_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.FarmingPlanProposal"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.FarmingPlanProposal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FarmingPlanProposal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.lpfarm.v1beta1.FarmingPlanProposal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FarmingPlanProposal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FarmingPlanProposal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FarmingPlanProposal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FarmingPlanProposal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FarmingPlanProposal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Title)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.CreatePlanRequests) > 0 {
			for _, e := range x.CreatePlanRequests {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.TerminatePlanRequests) > 0 {
			for _, e := range x.TerminatePlanRequests {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FarmingPlanProposal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TerminatePlanRequests) > 0 {
			for iNdEx := len(x.TerminatePlanRequests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TerminatePlanRequests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.CreatePlanRequests) > 0 {
			for iNdEx := len(x.CreatePlanRequests) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.CreatePlanRequests[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Title) > 0 {
			i -= len(x.Title)
			copy(dAtA[i:], x.Title)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Title)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FarmingPlanProposal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FarmingPlanProposal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FarmingPlanProposal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Title = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CreatePlanRequests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CreatePlanRequests = append(x.CreatePlanRequests, &CreatePlanRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CreatePlanRequests[len(x.CreatePlanRequests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TerminatePlanRequests", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TerminatePlanRequests = append(x.TerminatePlanRequests, &TerminatePlanRequest{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TerminatePlanRequests[len(x.TerminatePlanRequests)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_CreatePlanRequest_3_list)(nil)

type _CreatePlanRequest_3_list struct {
	list *[]*RewardAllocation
}

func (x *_CreatePlanRequest_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_CreatePlanRequest_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_CreatePlanRequest_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RewardAllocation)
	(*x.list)[i] = concreteValue
}

func (x *_CreatePlanRequest_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*RewardAllocation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_CreatePlanRequest_3_list) AppendMutable() protoreflect.Value {
	v := new(RewardAllocation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CreatePlanRequest_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_CreatePlanRequest_3_list) NewElement() protoreflect.Value {
	v := new(RewardAllocation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_CreatePlanRequest_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_CreatePlanRequest                      protoreflect.MessageDescriptor
	fd_CreatePlanRequest_description          protoreflect.FieldDescriptor
	fd_CreatePlanRequest_farming_pool_address protoreflect.FieldDescriptor
	fd_CreatePlanRequest_reward_allocations   protoreflect.FieldDescriptor
	fd_CreatePlanRequest_start_time           protoreflect.FieldDescriptor
	fd_CreatePlanRequest_end_time             protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_lpfarm_v1beta1_proposal_proto_init()
	md_CreatePlanRequest = File_mantrachain_lpfarm_v1beta1_proposal_proto.Messages().ByName("CreatePlanRequest")
	fd_CreatePlanRequest_description = md_CreatePlanRequest.Fields().ByName("description")
	fd_CreatePlanRequest_farming_pool_address = md_CreatePlanRequest.Fields().ByName("farming_pool_address")
	fd_CreatePlanRequest_reward_allocations = md_CreatePlanRequest.Fields().ByName("reward_allocations")
	fd_CreatePlanRequest_start_time = md_CreatePlanRequest.Fields().ByName("start_time")
	fd_CreatePlanRequest_end_time = md_CreatePlanRequest.Fields().ByName("end_time")
}

var _ protoreflect.Message = (*fastReflection_CreatePlanRequest)(nil)

type fastReflection_CreatePlanRequest CreatePlanRequest

func (x *CreatePlanRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CreatePlanRequest)(x)
}

func (x *CreatePlanRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CreatePlanRequest_messageType fastReflection_CreatePlanRequest_messageType
var _ protoreflect.MessageType = fastReflection_CreatePlanRequest_messageType{}

type fastReflection_CreatePlanRequest_messageType struct{}

func (x fastReflection_CreatePlanRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CreatePlanRequest)(nil)
}
func (x fastReflection_CreatePlanRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_CreatePlanRequest)
}
func (x fastReflection_CreatePlanRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CreatePlanRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CreatePlanRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_CreatePlanRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CreatePlanRequest) Type() protoreflect.MessageType {
	return _fastReflection_CreatePlanRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CreatePlanRequest) New() protoreflect.Message {
	return new(fastReflection_CreatePlanRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CreatePlanRequest) Interface() protoreflect.ProtoMessage {
	return (*CreatePlanRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CreatePlanRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_CreatePlanRequest_description, value) {
			return
		}
	}
	if x.FarmingPoolAddress != "" {
		value := protoreflect.ValueOfString(x.FarmingPoolAddress)
		if !f(fd_CreatePlanRequest_farming_pool_address, value) {
			return
		}
	}
	if len(x.RewardAllocations) != 0 {
		value := protoreflect.ValueOfList(&_CreatePlanRequest_3_list{list: &x.RewardAllocations})
		if !f(fd_CreatePlanRequest_reward_allocations, value) {
			return
		}
	}
	if x.StartTime != nil {
		value := protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
		if !f(fd_CreatePlanRequest_start_time, value) {
			return
		}
	}
	if x.EndTime != nil {
		value := protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
		if !f(fd_CreatePlanRequest_end_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CreatePlanRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.description":
		return x.Description != ""
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.farming_pool_address":
		return x.FarmingPoolAddress != ""
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations":
		return len(x.RewardAllocations) != 0
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time":
		return x.StartTime != nil
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time":
		return x.EndTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.CreatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.CreatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePlanRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.description":
		x.Description = ""
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.farming_pool_address":
		x.FarmingPoolAddress = ""
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations":
		x.RewardAllocations = nil
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time":
		x.StartTime = nil
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time":
		x.EndTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.CreatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.CreatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CreatePlanRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.farming_pool_address":
		value := x.FarmingPoolAddress
		return protoreflect.ValueOfString(value)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations":
		if len(x.RewardAllocations) == 0 {
			return protoreflect.ValueOfList(&_CreatePlanRequest_3_list{})
		}
		listValue := &_CreatePlanRequest_3_list{list: &x.RewardAllocations}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time":
		value := x.StartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time":
		value := x.EndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.CreatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.CreatePlanRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePlanRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.description":
		x.Description = value.Interface().(string)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.farming_pool_address":
		x.FarmingPoolAddress = value.Interface().(string)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations":
		lv := value.List()
		clv := lv.(*_CreatePlanRequest_3_list)
		x.RewardAllocations = *clv.list
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time":
		x.StartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time":
		x.EndTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.CreatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.CreatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePlanRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations":
		if x.RewardAllocations == nil {
			x.RewardAllocations = []*RewardAllocation{}
		}
		value := &_CreatePlanRequest_3_list{list: &x.RewardAllocations}
		return protoreflect.ValueOfList(value)
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time":
		if x.StartTime == nil {
			x.StartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time":
		if x.EndTime == nil {
			x.EndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EndTime.ProtoReflect())
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.description":
		panic(fmt.Errorf("field description of message mantrachain.lpfarm.v1beta1.CreatePlanRequest is not mutable"))
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.farming_pool_address":
		panic(fmt.Errorf("field farming_pool_address of message mantrachain.lpfarm.v1beta1.CreatePlanRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.CreatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.CreatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CreatePlanRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.description":
		return protoreflect.ValueOfString("")
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.farming_pool_address":
		return protoreflect.ValueOfString("")
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations":
		list := []*RewardAllocation{}
		return protoreflect.ValueOfList(&_CreatePlanRequest_3_list{list: &list})
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.CreatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.CreatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CreatePlanRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.lpfarm.v1beta1.CreatePlanRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CreatePlanRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CreatePlanRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CreatePlanRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CreatePlanRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CreatePlanRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FarmingPoolAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RewardAllocations) > 0 {
			for _, e := range x.RewardAllocations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.StartTime != nil {
			l = options.Size(x.StartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EndTime != nil {
			l = options.Size(x.EndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CreatePlanRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EndTime != nil {
			encoded, err := options.Marshal(x.EndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.StartTime != nil {
			encoded, err := options.Marshal(x.StartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RewardAllocations) > 0 {
			for iNdEx := len(x.RewardAllocations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardAllocations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.FarmingPoolAddress) > 0 {
			i -= len(x.FarmingPoolAddress)
			copy(dAtA[i:], x.FarmingPoolAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FarmingPoolAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CreatePlanRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CreatePlanRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CreatePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardAllocations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardAllocations = append(x.RewardAllocations, &RewardAllocation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardAllocations[len(x.RewardAllocations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StartTime == nil {
					x.StartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EndTime == nil {
					x.EndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TerminatePlanRequest         protoreflect.MessageDescriptor
	fd_TerminatePlanRequest_plan_id protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_lpfarm_v1beta1_proposal_proto_init()
	md_TerminatePlanRequest = File_mantrachain_lpfarm_v1beta1_proposal_proto.Messages().ByName("TerminatePlanRequest")
	fd_TerminatePlanRequest_plan_id = md_TerminatePlanRequest.Fields().ByName("plan_id")
}

var _ protoreflect.Message = (*fastReflection_TerminatePlanRequest)(nil)

type fastReflection_TerminatePlanRequest TerminatePlanRequest

func (x *TerminatePlanRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TerminatePlanRequest)(x)
}

func (x *TerminatePlanRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TerminatePlanRequest_messageType fastReflection_TerminatePlanRequest_messageType
var _ protoreflect.MessageType = fastReflection_TerminatePlanRequest_messageType{}

type fastReflection_TerminatePlanRequest_messageType struct{}

func (x fastReflection_TerminatePlanRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TerminatePlanRequest)(nil)
}
func (x fastReflection_TerminatePlanRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_TerminatePlanRequest)
}
func (x fastReflection_TerminatePlanRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TerminatePlanRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TerminatePlanRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_TerminatePlanRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TerminatePlanRequest) Type() protoreflect.MessageType {
	return _fastReflection_TerminatePlanRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TerminatePlanRequest) New() protoreflect.Message {
	return new(fastReflection_TerminatePlanRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TerminatePlanRequest) Interface() protoreflect.ProtoMessage {
	return (*TerminatePlanRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TerminatePlanRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PlanId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PlanId)
		if !f(fd_TerminatePlanRequest_plan_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TerminatePlanRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.TerminatePlanRequest.plan_id":
		return x.PlanId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.TerminatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.TerminatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TerminatePlanRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.TerminatePlanRequest.plan_id":
		x.PlanId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.TerminatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.TerminatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TerminatePlanRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.lpfarm.v1beta1.TerminatePlanRequest.plan_id":
		value := x.PlanId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.TerminatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.TerminatePlanRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TerminatePlanRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.TerminatePlanRequest.plan_id":
		x.PlanId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.TerminatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.TerminatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TerminatePlanRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.TerminatePlanRequest.plan_id":
		panic(fmt.Errorf("field plan_id of message mantrachain.lpfarm.v1beta1.TerminatePlanRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.TerminatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.TerminatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TerminatePlanRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.lpfarm.v1beta1.TerminatePlanRequest.plan_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.lpfarm.v1beta1.TerminatePlanRequest"))
		}
		panic(fmt.Errorf("message mantrachain.lpfarm.v1beta1.TerminatePlanRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TerminatePlanRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.lpfarm.v1beta1.TerminatePlanRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TerminatePlanRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TerminatePlanRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TerminatePlanRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TerminatePlanRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TerminatePlanRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PlanId != 0 {
			n += 1 + runtime.Sov(uint64(x.PlanId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TerminatePlanRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PlanId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PlanId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TerminatePlanRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TerminatePlanRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TerminatePlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
				}
				x.PlanId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PlanId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mantrachain/lpfarm/v1beta1/proposal.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FarmingPlanProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title                 string                  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description           string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CreatePlanRequests    []*CreatePlanRequest    `protobuf:"bytes,3,rep,name=create_plan_requests,json=createPlanRequests,proto3" json:"create_plan_requests,omitempty"`
	TerminatePlanRequests []*TerminatePlanRequest `protobuf:"bytes,4,rep,name=terminate_plan_requests,json=terminatePlanRequests,proto3" json:"terminate_plan_requests,omitempty"`
}

func (x *FarmingPlanProposal) Reset() {
	*x = FarmingPlanProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FarmingPlanProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmingPlanProposal) ProtoMessage() {}

// Deprecated: Use FarmingPlanProposal.ProtoReflect.Descriptor instead.
func (*FarmingPlanProposal) Descriptor() ([]byte, []int) {
	return file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescGZIP(), []int{0}
}

func (x *FarmingPlanProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FarmingPlanProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FarmingPlanProposal) GetCreatePlanRequests() []*CreatePlanRequest {
	if x != nil {
		return x.CreatePlanRequests
	}
	return nil
}

func (x *FarmingPlanProposal) GetTerminatePlanRequests() []*TerminatePlanRequest {
	if x != nil {
		return x.TerminatePlanRequests
	}
	return nil
}

type CreatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description        string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	FarmingPoolAddress string                 `protobuf:"bytes,2,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty"`
	RewardAllocations  []*RewardAllocation    `protobuf:"bytes,3,rep,name=reward_allocations,json=rewardAllocations,proto3" json:"reward_allocations,omitempty"`
	StartTime          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *CreatePlanRequest) Reset() {
	*x = CreatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRequest) ProtoMessage() {}

// Deprecated: Use CreatePlanRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRequest) Descriptor() ([]byte, []int) {
	return file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePlanRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlanRequest) GetFarmingPoolAddress() string {
	if x != nil {
		return x.FarmingPoolAddress
	}
	return ""
}

func (x *CreatePlanRequest) GetRewardAllocations() []*RewardAllocation {
	if x != nil {
		return x.RewardAllocations
	}
	return nil
}

func (x *CreatePlanRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CreatePlanRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type TerminatePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (x *TerminatePlanRequest) Reset() {
	*x = TerminatePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminatePlanRequest) ProtoMessage() {}

// Deprecated: Use TerminatePlanRequest.ProtoReflect.Descriptor instead.
func (*TerminatePlanRequest) Descriptor() ([]byte, []int) {
	return file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescGZIP(), []int{2}
}

func (x *TerminatePlanRequest) GetPlanId() uint64 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

var File_mantrachain_lpfarm_v1beta1_proposal_proto protoreflect.FileDescriptor

var file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x70,
	0x66, 0x61, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6c, 0x70, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6c, 0x70, 0x66, 0x61,
	0x72, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x6c, 0x70, 0x66, 0x61, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x02, 0x0a, 0x13, 0x46, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6c, 0x70, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x6e,
	0x0a, 0x17, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6c, 0x70,
	0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x3a, 0x04,
	0x98, 0xa0, 0x1f, 0x00, 0x22, 0xd0, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61,
	0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6c, 0x70, 0x66, 0x61, 0x72, 0x6d, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x11,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x42, 0xf8, 0x01, 0xc8, 0xe1, 0x1e, 0x00, 0x0a,
	0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6c, 0x70, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42,
	0x0d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x39, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6c,
	0x70, 0x66, 0x61, 0x72, 0x6d, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x6c, 0x70,
	0x66, 0x61, 0x72, 0x6d, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x4c,
	0x58, 0xaa, 0x02, 0x1a, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x4c, 0x70, 0x66, 0x61, 0x72, 0x6d, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02,
	0x1a, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x4c, 0x70, 0x66,
	0x61, 0x72, 0x6d, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x26, 0x4d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x4c, 0x70, 0x66, 0x61, 0x72, 0x6d,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x3a, 0x3a, 0x4c, 0x70, 0x66, 0x61, 0x72, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescOnce sync.Once
	file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescData = file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDesc
)

func file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescGZIP() []byte {
	file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescOnce.Do(func() {
		file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescData)
	})
	return file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDescData
}

var file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mantrachain_lpfarm_v1beta1_proposal_proto_goTypes = []interface{}{
	(*FarmingPlanProposal)(nil),   // 0: mantrachain.lpfarm.v1beta1.FarmingPlanProposal
	(*CreatePlanRequest)(nil),     // 1: mantrachain.lpfarm.v1beta1.CreatePlanRequest
	(*TerminatePlanRequest)(nil),  // 2: mantrachain.lpfarm.v1beta1.TerminatePlanRequest
	(*RewardAllocation)(nil),      // 3: mantrachain.lpfarm.v1beta1.RewardAllocation
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_mantrachain_lpfarm_v1beta1_proposal_proto_depIdxs = []int32{
	1, // 0: mantrachain.lpfarm.v1beta1.FarmingPlanProposal.create_plan_requests:type_name -> mantrachain.lpfarm.v1beta1.CreatePlanRequest
	2, // 1: mantrachain.lpfarm.v1beta1.FarmingPlanProposal.terminate_plan_requests:type_name -> mantrachain.lpfarm.v1beta1.TerminatePlanRequest
	3, // 2: mantrachain.lpfarm.v1beta1.CreatePlanRequest.reward_allocations:type_name -> mantrachain.lpfarm.v1beta1.RewardAllocation
	4, // 3: mantrachain.lpfarm.v1beta1.CreatePlanRequest.start_time:type_name -> google.protobuf.Timestamp
	4, // 4: mantrachain.lpfarm.v1beta1.CreatePlanRequest.end_time:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_mantrachain_lpfarm_v1beta1_proposal_proto_init() }
func file_mantrachain_lpfarm_v1beta1_proposal_proto_init() {
	if File_mantrachain_lpfarm_v1beta1_proposal_proto != nil {
		return
	}
	file_mantrachain_lpfarm_v1beta1_lpfarm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FarmingPlanProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminatePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mantrachain_lpfarm_v1beta1_proposal_proto_goTypes,
		DependencyIndexes: file_mantrachain_lpfarm_v1beta1_proposal_proto_depIdxs,
		MessageInfos:      file_mantrachain_lpfarm_v1beta1_proposal_proto_msgTypes,
	}.Build()
	File_mantrachain_lpfarm_v1beta1_proposal_proto = out.File
	file_mantrachain_lpfarm_v1beta1_proposal_proto_rawDesc = nil
	file_mantrachain_lpfarm_v1beta1_proposal_proto_goTypes = nil
	file_mantrachain_lpfarm_v1beta1_proposal_proto_depIdxs = nil
}
