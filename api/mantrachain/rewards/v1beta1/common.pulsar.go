// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package rewardsv1beta1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sort "sort"
	sync "sync"
)

var _ protoreflect.List = (*_ProviderPair_3_list)(nil)

type _ProviderPair_3_list struct {
	list *[]*v1beta1.DecCoin
}

func (x *_ProviderPair_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ProviderPair_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ProviderPair_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	(*x.list)[i] = concreteValue
}

func (x *_ProviderPair_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ProviderPair_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ProviderPair_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ProviderPair_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ProviderPair_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ProviderPair_4_list)(nil)

type _ProviderPair_4_list struct {
	list *[]*v1beta1.Coin
}

func (x *_ProviderPair_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ProviderPair_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ProviderPair_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_ProviderPair_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ProviderPair_4_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ProviderPair_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ProviderPair_4_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ProviderPair_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.Map = (*_ProviderPair_5_map)(nil)

type _ProviderPair_5_map struct {
	m *map[uint64]uint64
}

func (x *_ProviderPair_5_map) Len() int {
	if x.m == nil {
		return 0
	}
	return len(*x.m)
}

func (x *_ProviderPair_5_map) Range(f func(protoreflect.MapKey, protoreflect.Value) bool) {
	if x.m == nil {
		return
	}
	for k, v := range *x.m {
		mapKey := (protoreflect.MapKey)(protoreflect.ValueOfUint64(k))
		mapValue := protoreflect.ValueOfUint64(v)
		if !f(mapKey, mapValue) {
			break
		}
	}
}

func (x *_ProviderPair_5_map) Has(key protoreflect.MapKey) bool {
	if x.m == nil {
		return false
	}
	keyUnwrapped := key.Uint()
	concreteValue := keyUnwrapped
	_, ok := (*x.m)[concreteValue]
	return ok
}

func (x *_ProviderPair_5_map) Clear(key protoreflect.MapKey) {
	if x.m == nil {
		return
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	delete(*x.m, concreteKey)
}

func (x *_ProviderPair_5_map) Get(key protoreflect.MapKey) protoreflect.Value {
	if x.m == nil {
		return protoreflect.Value{}
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	v, ok := (*x.m)[concreteKey]
	if !ok {
		return protoreflect.Value{}
	}
	return protoreflect.ValueOfUint64(v)
}

func (x *_ProviderPair_5_map) Set(key protoreflect.MapKey, value protoreflect.Value) {
	if !key.IsValid() || !value.IsValid() {
		panic("invalid key or value provided")
	}
	keyUnwrapped := key.Uint()
	concreteKey := keyUnwrapped
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.m)[concreteKey] = concreteValue
}

func (x *_ProviderPair_5_map) Mutable(key protoreflect.MapKey) protoreflect.Value {
	panic("should not call Mutable on protoreflect.Map whose value is not of type protoreflect.Message")
}

func (x *_ProviderPair_5_map) NewValue() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_ProviderPair_5_map) IsValid() bool {
	return x.m != nil
}

var (
	md_ProviderPair                       protoreflect.MessageDescriptor
	fd_ProviderPair_pairId                protoreflect.FieldDescriptor
	fd_ProviderPair_lastClaimedSnapshotId protoreflect.FieldDescriptor
	fd_ProviderPair_owedRewards           protoreflect.FieldDescriptor
	fd_ProviderPair_balances              protoreflect.FieldDescriptor
	fd_ProviderPair_poolIdToIdx           protoreflect.FieldDescriptor
	fd_ProviderPair_lastDepositTime       protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_rewards_v1beta1_common_proto_init()
	md_ProviderPair = File_mantrachain_rewards_v1beta1_common_proto.Messages().ByName("ProviderPair")
	fd_ProviderPair_pairId = md_ProviderPair.Fields().ByName("pairId")
	fd_ProviderPair_lastClaimedSnapshotId = md_ProviderPair.Fields().ByName("lastClaimedSnapshotId")
	fd_ProviderPair_owedRewards = md_ProviderPair.Fields().ByName("owedRewards")
	fd_ProviderPair_balances = md_ProviderPair.Fields().ByName("balances")
	fd_ProviderPair_poolIdToIdx = md_ProviderPair.Fields().ByName("poolIdToIdx")
	fd_ProviderPair_lastDepositTime = md_ProviderPair.Fields().ByName("lastDepositTime")
}

var _ protoreflect.Message = (*fastReflection_ProviderPair)(nil)

type fastReflection_ProviderPair ProviderPair

func (x *ProviderPair) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProviderPair)(x)
}

func (x *ProviderPair) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_rewards_v1beta1_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProviderPair_messageType fastReflection_ProviderPair_messageType
var _ protoreflect.MessageType = fastReflection_ProviderPair_messageType{}

type fastReflection_ProviderPair_messageType struct{}

func (x fastReflection_ProviderPair_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProviderPair)(nil)
}
func (x fastReflection_ProviderPair_messageType) New() protoreflect.Message {
	return new(fastReflection_ProviderPair)
}
func (x fastReflection_ProviderPair_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProviderPair
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProviderPair) Descriptor() protoreflect.MessageDescriptor {
	return md_ProviderPair
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProviderPair) Type() protoreflect.MessageType {
	return _fastReflection_ProviderPair_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProviderPair) New() protoreflect.Message {
	return new(fastReflection_ProviderPair)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProviderPair) Interface() protoreflect.ProtoMessage {
	return (*ProviderPair)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProviderPair) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PairId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PairId)
		if !f(fd_ProviderPair_pairId, value) {
			return
		}
	}
	if x.LastClaimedSnapshotId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastClaimedSnapshotId)
		if !f(fd_ProviderPair_lastClaimedSnapshotId, value) {
			return
		}
	}
	if len(x.OwedRewards) != 0 {
		value := protoreflect.ValueOfList(&_ProviderPair_3_list{list: &x.OwedRewards})
		if !f(fd_ProviderPair_owedRewards, value) {
			return
		}
	}
	if len(x.Balances) != 0 {
		value := protoreflect.ValueOfList(&_ProviderPair_4_list{list: &x.Balances})
		if !f(fd_ProviderPair_balances, value) {
			return
		}
	}
	if len(x.PoolIdToIdx) != 0 {
		value := protoreflect.ValueOfMap(&_ProviderPair_5_map{m: &x.PoolIdToIdx})
		if !f(fd_ProviderPair_poolIdToIdx, value) {
			return
		}
	}
	if x.LastDepositTime != nil {
		value := protoreflect.ValueOfMessage(x.LastDepositTime.ProtoReflect())
		if !f(fd_ProviderPair_lastDepositTime, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProviderPair) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.ProviderPair.pairId":
		return x.PairId != uint64(0)
	case "mantrachain.rewards.v1beta1.ProviderPair.lastClaimedSnapshotId":
		return x.LastClaimedSnapshotId != uint64(0)
	case "mantrachain.rewards.v1beta1.ProviderPair.owedRewards":
		return len(x.OwedRewards) != 0
	case "mantrachain.rewards.v1beta1.ProviderPair.balances":
		return len(x.Balances) != 0
	case "mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx":
		return len(x.PoolIdToIdx) != 0
	case "mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime":
		return x.LastDepositTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.ProviderPair"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.ProviderPair does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderPair) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.ProviderPair.pairId":
		x.PairId = uint64(0)
	case "mantrachain.rewards.v1beta1.ProviderPair.lastClaimedSnapshotId":
		x.LastClaimedSnapshotId = uint64(0)
	case "mantrachain.rewards.v1beta1.ProviderPair.owedRewards":
		x.OwedRewards = nil
	case "mantrachain.rewards.v1beta1.ProviderPair.balances":
		x.Balances = nil
	case "mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx":
		x.PoolIdToIdx = nil
	case "mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime":
		x.LastDepositTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.ProviderPair"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.ProviderPair does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProviderPair) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.rewards.v1beta1.ProviderPair.pairId":
		value := x.PairId
		return protoreflect.ValueOfUint64(value)
	case "mantrachain.rewards.v1beta1.ProviderPair.lastClaimedSnapshotId":
		value := x.LastClaimedSnapshotId
		return protoreflect.ValueOfUint64(value)
	case "mantrachain.rewards.v1beta1.ProviderPair.owedRewards":
		if len(x.OwedRewards) == 0 {
			return protoreflect.ValueOfList(&_ProviderPair_3_list{})
		}
		listValue := &_ProviderPair_3_list{list: &x.OwedRewards}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.rewards.v1beta1.ProviderPair.balances":
		if len(x.Balances) == 0 {
			return protoreflect.ValueOfList(&_ProviderPair_4_list{})
		}
		listValue := &_ProviderPair_4_list{list: &x.Balances}
		return protoreflect.ValueOfList(listValue)
	case "mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx":
		if len(x.PoolIdToIdx) == 0 {
			return protoreflect.ValueOfMap(&_ProviderPair_5_map{})
		}
		mapValue := &_ProviderPair_5_map{m: &x.PoolIdToIdx}
		return protoreflect.ValueOfMap(mapValue)
	case "mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime":
		value := x.LastDepositTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.ProviderPair"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.ProviderPair does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderPair) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.ProviderPair.pairId":
		x.PairId = value.Uint()
	case "mantrachain.rewards.v1beta1.ProviderPair.lastClaimedSnapshotId":
		x.LastClaimedSnapshotId = value.Uint()
	case "mantrachain.rewards.v1beta1.ProviderPair.owedRewards":
		lv := value.List()
		clv := lv.(*_ProviderPair_3_list)
		x.OwedRewards = *clv.list
	case "mantrachain.rewards.v1beta1.ProviderPair.balances":
		lv := value.List()
		clv := lv.(*_ProviderPair_4_list)
		x.Balances = *clv.list
	case "mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx":
		mv := value.Map()
		cmv := mv.(*_ProviderPair_5_map)
		x.PoolIdToIdx = *cmv.m
	case "mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime":
		x.LastDepositTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.ProviderPair"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.ProviderPair does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderPair) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.ProviderPair.owedRewards":
		if x.OwedRewards == nil {
			x.OwedRewards = []*v1beta1.DecCoin{}
		}
		value := &_ProviderPair_3_list{list: &x.OwedRewards}
		return protoreflect.ValueOfList(value)
	case "mantrachain.rewards.v1beta1.ProviderPair.balances":
		if x.Balances == nil {
			x.Balances = []*v1beta1.Coin{}
		}
		value := &_ProviderPair_4_list{list: &x.Balances}
		return protoreflect.ValueOfList(value)
	case "mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx":
		if x.PoolIdToIdx == nil {
			x.PoolIdToIdx = make(map[uint64]uint64)
		}
		value := &_ProviderPair_5_map{m: &x.PoolIdToIdx}
		return protoreflect.ValueOfMap(value)
	case "mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime":
		if x.LastDepositTime == nil {
			x.LastDepositTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastDepositTime.ProtoReflect())
	case "mantrachain.rewards.v1beta1.ProviderPair.pairId":
		panic(fmt.Errorf("field pairId of message mantrachain.rewards.v1beta1.ProviderPair is not mutable"))
	case "mantrachain.rewards.v1beta1.ProviderPair.lastClaimedSnapshotId":
		panic(fmt.Errorf("field lastClaimedSnapshotId of message mantrachain.rewards.v1beta1.ProviderPair is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.ProviderPair"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.ProviderPair does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProviderPair) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.ProviderPair.pairId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mantrachain.rewards.v1beta1.ProviderPair.lastClaimedSnapshotId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mantrachain.rewards.v1beta1.ProviderPair.owedRewards":
		list := []*v1beta1.DecCoin{}
		return protoreflect.ValueOfList(&_ProviderPair_3_list{list: &list})
	case "mantrachain.rewards.v1beta1.ProviderPair.balances":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_ProviderPair_4_list{list: &list})
	case "mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx":
		m := make(map[uint64]uint64)
		return protoreflect.ValueOfMap(&_ProviderPair_5_map{m: &m})
	case "mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.ProviderPair"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.ProviderPair does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProviderPair) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.rewards.v1beta1.ProviderPair", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProviderPair) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProviderPair) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProviderPair) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProviderPair) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProviderPair)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PairId != 0 {
			n += 1 + runtime.Sov(uint64(x.PairId))
		}
		if x.LastClaimedSnapshotId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastClaimedSnapshotId))
		}
		if len(x.OwedRewards) > 0 {
			for _, e := range x.OwedRewards {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Balances) > 0 {
			for _, e := range x.Balances {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PoolIdToIdx) > 0 {
			SiZeMaP := func(k uint64, v uint64) {
				mapEntrySize := 1 + runtime.Sov(uint64(k)) + 1 + runtime.Sov(uint64(v))
				n += mapEntrySize + 1 + runtime.Sov(uint64(mapEntrySize))
			}
			if options.Deterministic {
				sortme := make([]uint64, 0, len(x.PoolIdToIdx))
				for k := range x.PoolIdToIdx {
					sortme = append(sortme, k)
				}
				sort.Slice(sortme, func(i, j int) bool {
					return sortme[i] < sortme[j]
				})
				for _, k := range sortme {
					v := x.PoolIdToIdx[k]
					SiZeMaP(k, v)
				}
			} else {
				for k, v := range x.PoolIdToIdx {
					SiZeMaP(k, v)
				}
			}
		}
		if x.LastDepositTime != nil {
			l = options.Size(x.LastDepositTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProviderPair)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastDepositTime != nil {
			encoded, err := options.Marshal(x.LastDepositTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.PoolIdToIdx) > 0 {
			MaRsHaLmAp := func(k uint64, v uint64) (protoiface.MarshalOutput, error) {
				baseI := i
				i = runtime.EncodeVarint(dAtA, i, uint64(v))
				i--
				dAtA[i] = 0x10
				i = runtime.EncodeVarint(dAtA, i, uint64(k))
				i--
				dAtA[i] = 0x8
				i = runtime.EncodeVarint(dAtA, i, uint64(baseI-i))
				i--
				dAtA[i] = 0x2a
				return protoiface.MarshalOutput{}, nil
			}
			if options.Deterministic {
				keysForPoolIdToIdx := make([]uint64, 0, len(x.PoolIdToIdx))
				for k := range x.PoolIdToIdx {
					keysForPoolIdToIdx = append(keysForPoolIdToIdx, uint64(k))
				}
				sort.Slice(keysForPoolIdToIdx, func(i, j int) bool {
					return keysForPoolIdToIdx[i] < keysForPoolIdToIdx[j]
				})
				for iNdEx := len(keysForPoolIdToIdx) - 1; iNdEx >= 0; iNdEx-- {
					v := x.PoolIdToIdx[uint64(keysForPoolIdToIdx[iNdEx])]
					out, err := MaRsHaLmAp(keysForPoolIdToIdx[iNdEx], v)
					if err != nil {
						return out, err
					}
				}
			} else {
				for k := range x.PoolIdToIdx {
					v := x.PoolIdToIdx[k]
					out, err := MaRsHaLmAp(k, v)
					if err != nil {
						return out, err
					}
				}
			}
		}
		if len(x.Balances) > 0 {
			for iNdEx := len(x.Balances) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Balances[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if len(x.OwedRewards) > 0 {
			for iNdEx := len(x.OwedRewards) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OwedRewards[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.LastClaimedSnapshotId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastClaimedSnapshotId))
			i--
			dAtA[i] = 0x10
		}
		if x.PairId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PairId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProviderPair)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProviderPair: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProviderPair: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
				}
				x.PairId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PairId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastClaimedSnapshotId", wireType)
				}
				x.LastClaimedSnapshotId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastClaimedSnapshotId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OwedRewards", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OwedRewards = append(x.OwedRewards, &v1beta1.DecCoin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OwedRewards[len(x.OwedRewards)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Balances = append(x.Balances, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Balances[len(x.Balances)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolIdToIdx", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PoolIdToIdx == nil {
					x.PoolIdToIdx = make(map[uint64]uint64)
				}
				var mapkey uint64
				var mapvalue uint64
				for iNdEx < postIndex {
					entryPreIndex := iNdEx
					var wire uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						wire |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					fieldNum := int32(wire >> 3)
					if fieldNum == 1 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapkey |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else if fieldNum == 2 {
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							mapvalue |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
					} else {
						iNdEx = entryPreIndex
						skippy, err := runtime.Skip(dAtA[iNdEx:])
						if err != nil {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
						}
						if (skippy < 0) || (iNdEx+skippy) < 0 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
						}
						if (iNdEx + skippy) > postIndex {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						iNdEx += skippy
					}
				}
				x.PoolIdToIdx[mapkey] = mapvalue
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastDepositTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastDepositTime == nil {
					x.LastDepositTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastDepositTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_SnapshotPool_3_list)(nil)

type _SnapshotPool_3_list struct {
	list *[]*v1beta1.DecCoin
}

func (x *_SnapshotPool_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_SnapshotPool_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_SnapshotPool_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	(*x.list)[i] = concreteValue
}

func (x *_SnapshotPool_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.DecCoin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_SnapshotPool_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SnapshotPool_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_SnapshotPool_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.DecCoin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_SnapshotPool_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_SnapshotPool                 protoreflect.MessageDescriptor
	fd_SnapshotPool_poolId          protoreflect.FieldDescriptor
	fd_SnapshotPool_coinSupply      protoreflect.FieldDescriptor
	fd_SnapshotPool_rewardsPerToken protoreflect.FieldDescriptor
)

func init() {
	file_mantrachain_rewards_v1beta1_common_proto_init()
	md_SnapshotPool = File_mantrachain_rewards_v1beta1_common_proto.Messages().ByName("SnapshotPool")
	fd_SnapshotPool_poolId = md_SnapshotPool.Fields().ByName("poolId")
	fd_SnapshotPool_coinSupply = md_SnapshotPool.Fields().ByName("coinSupply")
	fd_SnapshotPool_rewardsPerToken = md_SnapshotPool.Fields().ByName("rewardsPerToken")
}

var _ protoreflect.Message = (*fastReflection_SnapshotPool)(nil)

type fastReflection_SnapshotPool SnapshotPool

func (x *SnapshotPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SnapshotPool)(x)
}

func (x *SnapshotPool) slowProtoReflect() protoreflect.Message {
	mi := &file_mantrachain_rewards_v1beta1_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SnapshotPool_messageType fastReflection_SnapshotPool_messageType
var _ protoreflect.MessageType = fastReflection_SnapshotPool_messageType{}

type fastReflection_SnapshotPool_messageType struct{}

func (x fastReflection_SnapshotPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SnapshotPool)(nil)
}
func (x fastReflection_SnapshotPool_messageType) New() protoreflect.Message {
	return new(fastReflection_SnapshotPool)
}
func (x fastReflection_SnapshotPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SnapshotPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SnapshotPool) Descriptor() protoreflect.MessageDescriptor {
	return md_SnapshotPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SnapshotPool) Type() protoreflect.MessageType {
	return _fastReflection_SnapshotPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SnapshotPool) New() protoreflect.Message {
	return new(fastReflection_SnapshotPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SnapshotPool) Interface() protoreflect.ProtoMessage {
	return (*SnapshotPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SnapshotPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_SnapshotPool_poolId, value) {
			return
		}
	}
	if x.CoinSupply != "" {
		value := protoreflect.ValueOfString(x.CoinSupply)
		if !f(fd_SnapshotPool_coinSupply, value) {
			return
		}
	}
	if len(x.RewardsPerToken) != 0 {
		value := protoreflect.ValueOfList(&_SnapshotPool_3_list{list: &x.RewardsPerToken})
		if !f(fd_SnapshotPool_rewardsPerToken, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SnapshotPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.SnapshotPool.poolId":
		return x.PoolId != uint64(0)
	case "mantrachain.rewards.v1beta1.SnapshotPool.coinSupply":
		return x.CoinSupply != ""
	case "mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken":
		return len(x.RewardsPerToken) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.SnapshotPool"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.SnapshotPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SnapshotPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.SnapshotPool.poolId":
		x.PoolId = uint64(0)
	case "mantrachain.rewards.v1beta1.SnapshotPool.coinSupply":
		x.CoinSupply = ""
	case "mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken":
		x.RewardsPerToken = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.SnapshotPool"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.SnapshotPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SnapshotPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "mantrachain.rewards.v1beta1.SnapshotPool.poolId":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "mantrachain.rewards.v1beta1.SnapshotPool.coinSupply":
		value := x.CoinSupply
		return protoreflect.ValueOfString(value)
	case "mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken":
		if len(x.RewardsPerToken) == 0 {
			return protoreflect.ValueOfList(&_SnapshotPool_3_list{})
		}
		listValue := &_SnapshotPool_3_list{list: &x.RewardsPerToken}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.SnapshotPool"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.SnapshotPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SnapshotPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.SnapshotPool.poolId":
		x.PoolId = value.Uint()
	case "mantrachain.rewards.v1beta1.SnapshotPool.coinSupply":
		x.CoinSupply = value.Interface().(string)
	case "mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken":
		lv := value.List()
		clv := lv.(*_SnapshotPool_3_list)
		x.RewardsPerToken = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.SnapshotPool"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.SnapshotPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SnapshotPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken":
		if x.RewardsPerToken == nil {
			x.RewardsPerToken = []*v1beta1.DecCoin{}
		}
		value := &_SnapshotPool_3_list{list: &x.RewardsPerToken}
		return protoreflect.ValueOfList(value)
	case "mantrachain.rewards.v1beta1.SnapshotPool.poolId":
		panic(fmt.Errorf("field poolId of message mantrachain.rewards.v1beta1.SnapshotPool is not mutable"))
	case "mantrachain.rewards.v1beta1.SnapshotPool.coinSupply":
		panic(fmt.Errorf("field coinSupply of message mantrachain.rewards.v1beta1.SnapshotPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.SnapshotPool"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.SnapshotPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SnapshotPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "mantrachain.rewards.v1beta1.SnapshotPool.poolId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "mantrachain.rewards.v1beta1.SnapshotPool.coinSupply":
		return protoreflect.ValueOfString("")
	case "mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken":
		list := []*v1beta1.DecCoin{}
		return protoreflect.ValueOfList(&_SnapshotPool_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: mantrachain.rewards.v1beta1.SnapshotPool"))
		}
		panic(fmt.Errorf("message mantrachain.rewards.v1beta1.SnapshotPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SnapshotPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in mantrachain.rewards.v1beta1.SnapshotPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SnapshotPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SnapshotPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SnapshotPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SnapshotPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SnapshotPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.CoinSupply)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RewardsPerToken) > 0 {
			for _, e := range x.RewardsPerToken {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SnapshotPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RewardsPerToken) > 0 {
			for iNdEx := len(x.RewardsPerToken) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardsPerToken[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.CoinSupply) > 0 {
			i -= len(x.CoinSupply)
			copy(dAtA[i:], x.CoinSupply)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CoinSupply)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SnapshotPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SnapshotPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SnapshotPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CoinSupply", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CoinSupply = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsPerToken", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardsPerToken = append(x.RewardsPerToken, &v1beta1.DecCoin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardsPerToken[len(x.RewardsPerToken)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: mantrachain/rewards/v1beta1/common.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ProviderPair
type ProviderPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PairId                uint64                 `protobuf:"varint,1,opt,name=pairId,proto3" json:"pairId,omitempty"`
	LastClaimedSnapshotId uint64                 `protobuf:"varint,2,opt,name=lastClaimedSnapshotId,proto3" json:"lastClaimedSnapshotId,omitempty"`
	OwedRewards           []*v1beta1.DecCoin     `protobuf:"bytes,3,rep,name=owedRewards,proto3" json:"owedRewards,omitempty"`
	Balances              []*v1beta1.Coin        `protobuf:"bytes,4,rep,name=balances,proto3" json:"balances,omitempty"`
	PoolIdToIdx           map[uint64]uint64      `protobuf:"bytes,5,rep,name=poolIdToIdx,proto3" json:"poolIdToIdx,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LastDepositTime       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=lastDepositTime,proto3" json:"lastDepositTime,omitempty"`
}

func (x *ProviderPair) Reset() {
	*x = ProviderPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_rewards_v1beta1_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderPair) ProtoMessage() {}

// Deprecated: Use ProviderPair.ProtoReflect.Descriptor instead.
func (*ProviderPair) Descriptor() ([]byte, []int) {
	return file_mantrachain_rewards_v1beta1_common_proto_rawDescGZIP(), []int{0}
}

func (x *ProviderPair) GetPairId() uint64 {
	if x != nil {
		return x.PairId
	}
	return 0
}

func (x *ProviderPair) GetLastClaimedSnapshotId() uint64 {
	if x != nil {
		return x.LastClaimedSnapshotId
	}
	return 0
}

func (x *ProviderPair) GetOwedRewards() []*v1beta1.DecCoin {
	if x != nil {
		return x.OwedRewards
	}
	return nil
}

func (x *ProviderPair) GetBalances() []*v1beta1.Coin {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *ProviderPair) GetPoolIdToIdx() map[uint64]uint64 {
	if x != nil {
		return x.PoolIdToIdx
	}
	return nil
}

func (x *ProviderPair) GetLastDepositTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDepositTime
	}
	return nil
}

// SnapshotPool
type SnapshotPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId          uint64             `protobuf:"varint,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	CoinSupply      string             `protobuf:"bytes,2,opt,name=coinSupply,proto3" json:"coinSupply,omitempty"`
	RewardsPerToken []*v1beta1.DecCoin `protobuf:"bytes,3,rep,name=rewardsPerToken,proto3" json:"rewardsPerToken,omitempty"`
}

func (x *SnapshotPool) Reset() {
	*x = SnapshotPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mantrachain_rewards_v1beta1_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotPool) ProtoMessage() {}

// Deprecated: Use SnapshotPool.ProtoReflect.Descriptor instead.
func (*SnapshotPool) Descriptor() ([]byte, []int) {
	return file_mantrachain_rewards_v1beta1_common_proto_rawDescGZIP(), []int{1}
}

func (x *SnapshotPool) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *SnapshotPool) GetCoinSupply() string {
	if x != nil {
		return x.CoinSupply
	}
	return ""
}

func (x *SnapshotPool) GetRewardsPerToken() []*v1beta1.DecCoin {
	if x != nil {
		return x.RewardsPerToken
	}
	return nil
}

var File_mantrachain_rewards_v1beta1_common_proto protoreflect.FileDescriptor

var file_mantrachain_rewards_v1beta1_common_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae,
	0x04, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x69, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a,
	0x0b, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x33, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0b, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x67, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0b, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x78, 0x12, 0x4e, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x54, 0x6f, 0x49, 0x64, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22,
	0xee, 0x01, 0x0a, 0x0c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x7b, 0x0a,
	0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x43, 0x6f, 0x69, 0x6e, 0x42, 0x33, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00,
	0x42, 0xfd, 0x01, 0xa8, 0xe2, 0x1e, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x52, 0x58, 0xaa, 0x02, 0x1b, 0x4d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x1b, 0x4d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x27, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1d, 0x4d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mantrachain_rewards_v1beta1_common_proto_rawDescOnce sync.Once
	file_mantrachain_rewards_v1beta1_common_proto_rawDescData = file_mantrachain_rewards_v1beta1_common_proto_rawDesc
)

func file_mantrachain_rewards_v1beta1_common_proto_rawDescGZIP() []byte {
	file_mantrachain_rewards_v1beta1_common_proto_rawDescOnce.Do(func() {
		file_mantrachain_rewards_v1beta1_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_mantrachain_rewards_v1beta1_common_proto_rawDescData)
	})
	return file_mantrachain_rewards_v1beta1_common_proto_rawDescData
}

var file_mantrachain_rewards_v1beta1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mantrachain_rewards_v1beta1_common_proto_goTypes = []interface{}{
	(*ProviderPair)(nil),          // 0: mantrachain.rewards.v1beta1.ProviderPair
	(*SnapshotPool)(nil),          // 1: mantrachain.rewards.v1beta1.SnapshotPool
	nil,                           // 2: mantrachain.rewards.v1beta1.ProviderPair.PoolIdToIdxEntry
	(*v1beta1.DecCoin)(nil),       // 3: cosmos.base.v1beta1.DecCoin
	(*v1beta1.Coin)(nil),          // 4: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_mantrachain_rewards_v1beta1_common_proto_depIdxs = []int32{
	3, // 0: mantrachain.rewards.v1beta1.ProviderPair.owedRewards:type_name -> cosmos.base.v1beta1.DecCoin
	4, // 1: mantrachain.rewards.v1beta1.ProviderPair.balances:type_name -> cosmos.base.v1beta1.Coin
	2, // 2: mantrachain.rewards.v1beta1.ProviderPair.poolIdToIdx:type_name -> mantrachain.rewards.v1beta1.ProviderPair.PoolIdToIdxEntry
	5, // 3: mantrachain.rewards.v1beta1.ProviderPair.lastDepositTime:type_name -> google.protobuf.Timestamp
	3, // 4: mantrachain.rewards.v1beta1.SnapshotPool.rewardsPerToken:type_name -> cosmos.base.v1beta1.DecCoin
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_mantrachain_rewards_v1beta1_common_proto_init() }
func file_mantrachain_rewards_v1beta1_common_proto_init() {
	if File_mantrachain_rewards_v1beta1_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mantrachain_rewards_v1beta1_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mantrachain_rewards_v1beta1_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mantrachain_rewards_v1beta1_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mantrachain_rewards_v1beta1_common_proto_goTypes,
		DependencyIndexes: file_mantrachain_rewards_v1beta1_common_proto_depIdxs,
		MessageInfos:      file_mantrachain_rewards_v1beta1_common_proto_msgTypes,
	}.Build()
	File_mantrachain_rewards_v1beta1_common_proto = out.File
	file_mantrachain_rewards_v1beta1_common_proto_rawDesc = nil
	file_mantrachain_rewards_v1beta1_common_proto_goTypes = nil
	file_mantrachain_rewards_v1beta1_common_proto_depIdxs = nil
}
