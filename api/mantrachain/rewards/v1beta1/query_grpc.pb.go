// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mantrachain/rewards/v1beta1/query.proto

package rewardsv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName        = "/mantrachain.rewards.v1beta1.Query/Params"
	Query_Snapshot_FullMethodName      = "/mantrachain.rewards.v1beta1.Query/Snapshot"
	Query_SnapshotAll_FullMethodName   = "/mantrachain.rewards.v1beta1.Query/SnapshotAll"
	Query_Provider_FullMethodName      = "/mantrachain.rewards.v1beta1.Query/Provider"
	Query_ProviderPairs_FullMethodName = "/mantrachain.rewards.v1beta1.Query/ProviderPairs"
	Query_ProviderAll_FullMethodName   = "/mantrachain.rewards.v1beta1.Query/ProviderAll"
	Query_Rewards_FullMethodName       = "/mantrachain.rewards.v1beta1.Query/Rewards"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Snapshot items.
	Snapshot(ctx context.Context, in *QueryGetSnapshotRequest, opts ...grpc.CallOption) (*QueryGetSnapshotResponse, error)
	// QuerySnapshotAll
	SnapshotAll(ctx context.Context, in *QueryAllSnapshotRequest, opts ...grpc.CallOption) (*QueryAllSnapshotResponse, error)
	// Queries a list of Provider pairs ids.
	Provider(ctx context.Context, in *QueryGetProviderRequest, opts ...grpc.CallOption) (*QueryGetProviderResponse, error)
	// QueryProviderPairs
	ProviderPairs(ctx context.Context, in *QueryGetProviderPairsRequest, opts ...grpc.CallOption) (*QueryGetProviderPairsResponse, error)
	// QueryProviderAll
	ProviderAll(ctx context.Context, in *QueryAllProviderRequest, opts ...grpc.CallOption) (*QueryAllProviderResponse, error)
	// Queries a list of Claim items.
	Rewards(ctx context.Context, in *QueryGetRewardsRequest, opts ...grpc.CallOption) (*QueryGetRewardsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Snapshot(ctx context.Context, in *QueryGetSnapshotRequest, opts ...grpc.CallOption) (*QueryGetSnapshotResponse, error) {
	out := new(QueryGetSnapshotResponse)
	err := c.cc.Invoke(ctx, Query_Snapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SnapshotAll(ctx context.Context, in *QueryAllSnapshotRequest, opts ...grpc.CallOption) (*QueryAllSnapshotResponse, error) {
	out := new(QueryAllSnapshotResponse)
	err := c.cc.Invoke(ctx, Query_SnapshotAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Provider(ctx context.Context, in *QueryGetProviderRequest, opts ...grpc.CallOption) (*QueryGetProviderResponse, error) {
	out := new(QueryGetProviderResponse)
	err := c.cc.Invoke(ctx, Query_Provider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderPairs(ctx context.Context, in *QueryGetProviderPairsRequest, opts ...grpc.CallOption) (*QueryGetProviderPairsResponse, error) {
	out := new(QueryGetProviderPairsResponse)
	err := c.cc.Invoke(ctx, Query_ProviderPairs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderAll(ctx context.Context, in *QueryAllProviderRequest, opts ...grpc.CallOption) (*QueryAllProviderResponse, error) {
	out := new(QueryAllProviderResponse)
	err := c.cc.Invoke(ctx, Query_ProviderAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rewards(ctx context.Context, in *QueryGetRewardsRequest, opts ...grpc.CallOption) (*QueryGetRewardsResponse, error) {
	out := new(QueryGetRewardsResponse)
	err := c.cc.Invoke(ctx, Query_Rewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Snapshot items.
	Snapshot(context.Context, *QueryGetSnapshotRequest) (*QueryGetSnapshotResponse, error)
	// QuerySnapshotAll
	SnapshotAll(context.Context, *QueryAllSnapshotRequest) (*QueryAllSnapshotResponse, error)
	// Queries a list of Provider pairs ids.
	Provider(context.Context, *QueryGetProviderRequest) (*QueryGetProviderResponse, error)
	// QueryProviderPairs
	ProviderPairs(context.Context, *QueryGetProviderPairsRequest) (*QueryGetProviderPairsResponse, error)
	// QueryProviderAll
	ProviderAll(context.Context, *QueryAllProviderRequest) (*QueryAllProviderResponse, error)
	// Queries a list of Claim items.
	Rewards(context.Context, *QueryGetRewardsRequest) (*QueryGetRewardsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Snapshot(context.Context, *QueryGetSnapshotRequest) (*QueryGetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Snapshot not implemented")
}
func (UnimplementedQueryServer) SnapshotAll(context.Context, *QueryAllSnapshotRequest) (*QueryAllSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotAll not implemented")
}
func (UnimplementedQueryServer) Provider(context.Context, *QueryGetProviderRequest) (*QueryGetProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provider not implemented")
}
func (UnimplementedQueryServer) ProviderPairs(context.Context, *QueryGetProviderPairsRequest) (*QueryGetProviderPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderPairs not implemented")
}
func (UnimplementedQueryServer) ProviderAll(context.Context, *QueryAllProviderRequest) (*QueryAllProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderAll not implemented")
}
func (UnimplementedQueryServer) Rewards(context.Context, *QueryGetRewardsRequest) (*QueryGetRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewards not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Snapshot(ctx, req.(*QueryGetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SnapshotAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SnapshotAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SnapshotAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SnapshotAll(ctx, req.(*QueryAllSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Provider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Provider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Provider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Provider(ctx, req.(*QueryGetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProviderPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProviderPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderPairs(ctx, req.(*QueryGetProviderPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProviderAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderAll(ctx, req.(*QueryAllProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Rewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rewards(ctx, req.(*QueryGetRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.rewards.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Snapshot",
			Handler:    _Query_Snapshot_Handler,
		},
		{
			MethodName: "SnapshotAll",
			Handler:    _Query_SnapshotAll_Handler,
		},
		{
			MethodName: "Provider",
			Handler:    _Query_Provider_Handler,
		},
		{
			MethodName: "ProviderPairs",
			Handler:    _Query_ProviderPairs_Handler,
		},
		{
			MethodName: "ProviderAll",
			Handler:    _Query_ProviderAll_Handler,
		},
		{
			MethodName: "Rewards",
			Handler:    _Query_Rewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/rewards/v1beta1/query.proto",
}
