// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1/tx_hash.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxHash struct {
	Index       []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	BridgeIndex []byte `protobuf:"bytes,2,opt,name=bridge_index,json=bridgeIndex,proto3" json:"bridge_index,omitempty" yaml:"bridge_index"`
	TxHash      string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" yaml:"tx_hash"`
	Processed   bool   `protobuf:"varint,4,opt,name=processed,proto3" json:"processed,omitempty" yaml:"processed"`
	Type        string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" yaml:"type"`
}

func (m *TxHash) Reset()         { *m = TxHash{} }
func (m *TxHash) String() string { return proto.CompactTextString(m) }
func (*TxHash) ProtoMessage()    {}
func (*TxHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df35ffc6e44f6d1, []int{0}
}
func (m *TxHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxHash.Merge(m, src)
}
func (m *TxHash) XXX_Size() int {
	return m.Size()
}
func (m *TxHash) XXX_DiscardUnknown() {
	xxx_messageInfo_TxHash.DiscardUnknown(m)
}

var xxx_messageInfo_TxHash proto.InternalMessageInfo

func (m *TxHash) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *TxHash) GetBridgeIndex() []byte {
	if m != nil {
		return m.BridgeIndex
	}
	return nil
}

func (m *TxHash) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TxHash) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

func (m *TxHash) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*TxHash)(nil), "limechain.mantrachain.bridge.v1.TxHash")
}

func init() { proto.RegisterFile("bridge/v1/tx_hash.proto", fileDescriptor_4df35ffc6e44f6d1) }

var fileDescriptor_4df35ffc6e44f6d1 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0x97, 0xff, 0x7f, 0x9b, 0x2e, 0x1b, 0x3a, 0xea, 0x60, 0xc5, 0x43, 0x32, 0x22, 0xc8,
	0x40, 0x68, 0x98, 0xde, 0x76, 0xac, 0x17, 0x05, 0xbd, 0x14, 0x4f, 0x5e, 0x46, 0xb6, 0x85, 0x36,
	0xb0, 0x2e, 0xa5, 0x8d, 0xa3, 0xfb, 0x16, 0x7e, 0x0c, 0x3f, 0x8a, 0xc7, 0x1d, 0x3d, 0x15, 0x69,
	0xbf, 0x41, 0x3e, 0x81, 0x34, 0x29, 0xba, 0xdb, 0x9b, 0x3c, 0xbf, 0xe7, 0xe1, 0xe5, 0x79, 0xe1,
	0x78, 0x99, 0x8a, 0x75, 0xc8, 0xe9, 0x6e, 0x46, 0x55, 0xbe, 0x88, 0x58, 0x16, 0x79, 0x49, 0x2a,
	0x95, 0x74, 0xf0, 0x46, 0xc4, 0x7c, 0x15, 0x31, 0xb1, 0xf5, 0x62, 0xb6, 0x55, 0x29, 0xb3, 0xb3,
	0xc5, 0xbd, 0xdd, 0xec, 0x72, 0x14, 0xca, 0x50, 0x1a, 0x96, 0xd6, 0x93, 0xb5, 0x11, 0x0d, 0x60,
	0xf7, 0x25, 0x7f, 0x60, 0x59, 0xe4, 0x5c, 0xc3, 0x8e, 0xd8, 0xae, 0x79, 0xee, 0x82, 0x09, 0x98,
	0x0e, 0xfc, 0xa1, 0x2e, 0xf0, 0x60, 0xcf, 0xe2, 0xcd, 0x9c, 0x98, 0x6f, 0x12, 0x58, 0xd9, 0x99,
	0xc3, 0x81, 0x4d, 0x5d, 0x58, 0xfc, 0x9f, 0xc1, 0xc7, 0xba, 0xc0, 0x17, 0x16, 0x3f, 0x56, 0x49,
	0xd0, 0xb7, 0xcf, 0x47, 0xe3, 0xbd, 0x81, 0x27, 0xcd, 0xda, 0xee, 0xff, 0x09, 0x98, 0xf6, 0x7c,
	0x47, 0x17, 0xf8, 0xcc, 0xda, 0x1a, 0x81, 0x04, 0x5d, 0x65, 0x17, 0xba, 0x85, 0xbd, 0x24, 0x95,
	0x2b, 0x9e, 0x65, 0x7c, 0xed, 0xb6, 0x27, 0x60, 0x7a, 0xea, 0x8f, 0x74, 0x81, 0x87, 0x16, 0xff,
	0x95, 0x48, 0xf0, 0x87, 0x39, 0x57, 0xb0, 0xad, 0xf6, 0x09, 0x77, 0x3b, 0x26, 0xfd, 0x5c, 0x17,
	0xb8, 0xdf, 0xa4, 0xef, 0x13, 0x4e, 0x02, 0x23, 0xfa, 0xcf, 0x1f, 0x25, 0x02, 0x9f, 0x25, 0x02,
	0x87, 0x12, 0x81, 0xef, 0x12, 0x81, 0xf7, 0x0a, 0xb5, 0x0e, 0x15, 0x6a, 0x7d, 0x55, 0xa8, 0xf5,
	0x4a, 0x43, 0xa1, 0xa2, 0xb7, 0xa5, 0xb7, 0x92, 0x31, 0x7d, 0x12, 0x31, 0xbf, 0xaf, 0x8b, 0xa4,
	0x47, 0xa5, 0xd2, 0x9c, 0x36, 0x57, 0xa8, 0xd3, 0xb2, 0x65, 0xd7, 0x54, 0x79, 0xf7, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x87, 0xfa, 0x77, 0xe0, 0x9c, 0x01, 0x00, 0x00,
}

func (this *TxHash) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxHash)
	if !ok {
		that2, ok := that.(TxHash)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if !bytes.Equal(this.BridgeIndex, that1.BridgeIndex) {
		return false
	}
	if this.TxHash != that1.TxHash {
		return false
	}
	if this.Processed != that1.Processed {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (m *TxHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTxHash(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Processed {
		i--
		if m.Processed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTxHash(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeIndex) > 0 {
		i -= len(m.BridgeIndex)
		copy(dAtA[i:], m.BridgeIndex)
		i = encodeVarintTxHash(dAtA, i, uint64(len(m.BridgeIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTxHash(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxHash(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxHash(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTxHash(uint64(l))
	}
	l = len(m.BridgeIndex)
	if l > 0 {
		n += 1 + l + sovTxHash(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTxHash(uint64(l))
	}
	if m.Processed {
		n += 2
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTxHash(uint64(l))
	}
	return n
}

func sovTxHash(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxHash(x uint64) (n int) {
	return sovTxHash(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxHash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxHash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeIndex", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxHash
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeIndex = append(m.BridgeIndex[:0], dAtA[iNdEx:postIndex]...)
			if m.BridgeIndex == nil {
				m.BridgeIndex = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxHash
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxHash
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxHash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxHash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxHash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxHash(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxHash
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxHash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxHash
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxHash
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxHash
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxHash        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxHash          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxHash = fmt.Errorf("proto: unexpected end of group")
)
