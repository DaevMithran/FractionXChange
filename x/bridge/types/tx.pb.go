// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bridge/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterBridge struct {
	Creator string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Bridge  *MsgBridgeMetadata `protobuf:"bytes,2,opt,name=bridge,proto3" json:"bridge,omitempty"`
}

func (m *MsgRegisterBridge) Reset()         { *m = MsgRegisterBridge{} }
func (m *MsgRegisterBridge) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBridge) ProtoMessage()    {}
func (*MsgRegisterBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{0}
}
func (m *MsgRegisterBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBridge.Merge(m, src)
}
func (m *MsgRegisterBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBridge proto.InternalMessageInfo

func (m *MsgRegisterBridge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterBridge) GetBridge() *MsgBridgeMetadata {
	if m != nil {
		return m.Bridge
	}
	return nil
}

type MsgCw20InitialBalances struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgCw20InitialBalances) Reset()         { *m = MsgCw20InitialBalances{} }
func (m *MsgCw20InitialBalances) String() string { return proto.CompactTextString(m) }
func (*MsgCw20InitialBalances) ProtoMessage()    {}
func (*MsgCw20InitialBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{1}
}
func (m *MsgCw20InitialBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCw20InitialBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCw20InitialBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCw20InitialBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCw20InitialBalances.Merge(m, src)
}
func (m *MsgCw20InitialBalances) XXX_Size() int {
	return m.Size()
}
func (m *MsgCw20InitialBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCw20InitialBalances.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCw20InitialBalances proto.InternalMessageInfo

func (m *MsgCw20InitialBalances) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgCw20InitialBalances) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MsgCw20Mint struct {
	Minter string `protobuf:"bytes,1,opt,name=minter,proto3" json:"minter,omitempty"`
}

func (m *MsgCw20Mint) Reset()         { *m = MsgCw20Mint{} }
func (m *MsgCw20Mint) String() string { return proto.CompactTextString(m) }
func (*MsgCw20Mint) ProtoMessage()    {}
func (*MsgCw20Mint) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{2}
}
func (m *MsgCw20Mint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCw20Mint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCw20Mint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCw20Mint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCw20Mint.Merge(m, src)
}
func (m *MsgCw20Mint) XXX_Size() int {
	return m.Size()
}
func (m *MsgCw20Mint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCw20Mint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCw20Mint proto.InternalMessageInfo

func (m *MsgCw20Mint) GetMinter() string {
	if m != nil {
		return m.Minter
	}
	return ""
}

type MsgBridgeMetadata struct {
	Id                  string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BridgeAccount       string                    `protobuf:"bytes,2,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
	Cw20ContractAddress string                    `protobuf:"bytes,3,opt,name=cw20_contract_address,json=cw20ContractAddress,proto3" json:"cw20_contract_address,omitempty"`
	Cw20Name            string                    `protobuf:"bytes,4,opt,name=cw20_name,json=cw20Name,proto3" json:"cw20_name,omitempty"`
	Cw20Symbol          string                    `protobuf:"bytes,5,opt,name=cw20_symbol,json=cw20Symbol,proto3" json:"cw20_symbol,omitempty"`
	Cw20Decimals        uint32                    `protobuf:"varint,6,opt,name=cw20_decimals,json=cw20Decimals,proto3" json:"cw20_decimals,omitempty"`
	Cw20InitialBalances []*MsgCw20InitialBalances `protobuf:"bytes,7,rep,name=cw20_initial_balances,json=cw20InitialBalances,proto3" json:"cw20_initial_balances,omitempty"`
	Cw20Mint            *MsgCw20Mint              `protobuf:"bytes,8,opt,name=cw20_mint,json=cw20Mint,proto3" json:"cw20_mint,omitempty"`
}

func (m *MsgBridgeMetadata) Reset()         { *m = MsgBridgeMetadata{} }
func (m *MsgBridgeMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgBridgeMetadata) ProtoMessage()    {}
func (*MsgBridgeMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{3}
}
func (m *MsgBridgeMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBridgeMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBridgeMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBridgeMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBridgeMetadata.Merge(m, src)
}
func (m *MsgBridgeMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgBridgeMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBridgeMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBridgeMetadata proto.InternalMessageInfo

func (m *MsgBridgeMetadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MsgBridgeMetadata) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

func (m *MsgBridgeMetadata) GetCw20ContractAddress() string {
	if m != nil {
		return m.Cw20ContractAddress
	}
	return ""
}

func (m *MsgBridgeMetadata) GetCw20Name() string {
	if m != nil {
		return m.Cw20Name
	}
	return ""
}

func (m *MsgBridgeMetadata) GetCw20Symbol() string {
	if m != nil {
		return m.Cw20Symbol
	}
	return ""
}

func (m *MsgBridgeMetadata) GetCw20Decimals() uint32 {
	if m != nil {
		return m.Cw20Decimals
	}
	return 0
}

func (m *MsgBridgeMetadata) GetCw20InitialBalances() []*MsgCw20InitialBalances {
	if m != nil {
		return m.Cw20InitialBalances
	}
	return nil
}

func (m *MsgBridgeMetadata) GetCw20Mint() *MsgCw20Mint {
	if m != nil {
		return m.Cw20Mint
	}
	return nil
}

type MsgRegisterBridgeResponse struct {
	BridgeId            string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	Cw20ContractAddress string `protobuf:"bytes,2,opt,name=cw20_contract_address,json=cw20ContractAddress,proto3" json:"cw20_contract_address,omitempty"`
	BridgeCreator       string `protobuf:"bytes,3,opt,name=bridge_creator,json=bridgeCreator,proto3" json:"bridge_creator,omitempty"`
}

func (m *MsgRegisterBridgeResponse) Reset()         { *m = MsgRegisterBridgeResponse{} }
func (m *MsgRegisterBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBridgeResponse) ProtoMessage()    {}
func (*MsgRegisterBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{4}
}
func (m *MsgRegisterBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBridgeResponse.Merge(m, src)
}
func (m *MsgRegisterBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBridgeResponse proto.InternalMessageInfo

func (m *MsgRegisterBridgeResponse) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgRegisterBridgeResponse) GetCw20ContractAddress() string {
	if m != nil {
		return m.Cw20ContractAddress
	}
	return ""
}

func (m *MsgRegisterBridgeResponse) GetBridgeCreator() string {
	if m != nil {
		return m.BridgeCreator
	}
	return ""
}

type MsgMint struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BridgeId      string `protobuf:"bytes,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeCreator string `protobuf:"bytes,3,opt,name=bridge_creator,json=bridgeCreator,proto3" json:"bridge_creator,omitempty"`
	// TODO: This should be an array, i.e. repeated
	Mint *MsgMintMetadata `protobuf:"bytes,4,opt,name=mint,proto3" json:"mint,omitempty"`
}

func (m *MsgMint) Reset()         { *m = MsgMint{} }
func (m *MsgMint) String() string { return proto.CompactTextString(m) }
func (*MsgMint) ProtoMessage()    {}
func (*MsgMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{5}
}
func (m *MsgMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMint.Merge(m, src)
}
func (m *MsgMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMint proto.InternalMessageInfo

func (m *MsgMint) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMint) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgMint) GetBridgeCreator() string {
	if m != nil {
		return m.BridgeCreator
	}
	return ""
}

func (m *MsgMint) GetMint() *MsgMintMetadata {
	if m != nil {
		return m.Mint
	}
	return nil
}

type MsgMintMetadata struct {
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// TODO: Should be uint128
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	TxHash string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *MsgMintMetadata) Reset()         { *m = MsgMintMetadata{} }
func (m *MsgMintMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgMintMetadata) ProtoMessage()    {}
func (*MsgMintMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{6}
}
func (m *MsgMintMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintMetadata.Merge(m, src)
}
func (m *MsgMintMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintMetadata proto.InternalMessageInfo

func (m *MsgMintMetadata) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgMintMetadata) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgMintMetadata) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type MsgMintResponse struct {
	BridgeId            string `protobuf:"bytes,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	Creator             string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Cw20ContractAddress string `protobuf:"bytes,3,opt,name=cw20_contract_address,json=cw20ContractAddress,proto3" json:"cw20_contract_address,omitempty"`
	BridgeCreator       string `protobuf:"bytes,4,opt,name=bridge_creator,json=bridgeCreator,proto3" json:"bridge_creator,omitempty"`
	Receiver            string `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// TODO: Should be uint128
	Amount uint64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	TxHash string `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Type   string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *MsgMintResponse) Reset()         { *m = MsgMintResponse{} }
func (m *MsgMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintResponse) ProtoMessage()    {}
func (*MsgMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{7}
}
func (m *MsgMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintResponse.Merge(m, src)
}
func (m *MsgMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintResponse proto.InternalMessageInfo

func (m *MsgMintResponse) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgMintResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgMintResponse) GetCw20ContractAddress() string {
	if m != nil {
		return m.Cw20ContractAddress
	}
	return ""
}

func (m *MsgMintResponse) GetBridgeCreator() string {
	if m != nil {
		return m.BridgeCreator
	}
	return ""
}

func (m *MsgMintResponse) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgMintResponse) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgMintResponse) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgMintResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type MsgCreateCw20Contract struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CodeId  uint64 `protobuf:"varint,2,opt,name=codeId,proto3" json:"codeId,omitempty"`
	Ver     string `protobuf:"bytes,3,opt,name=ver,proto3" json:"ver,omitempty"`
	Path    string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *MsgCreateCw20Contract) Reset()         { *m = MsgCreateCw20Contract{} }
func (m *MsgCreateCw20Contract) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCw20Contract) ProtoMessage()    {}
func (*MsgCreateCw20Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{8}
}
func (m *MsgCreateCw20Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCw20Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCw20Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCw20Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCw20Contract.Merge(m, src)
}
func (m *MsgCreateCw20Contract) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCw20Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCw20Contract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCw20Contract proto.InternalMessageInfo

func (m *MsgCreateCw20Contract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCw20Contract) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *MsgCreateCw20Contract) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *MsgCreateCw20Contract) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type MsgCreateCw20ContractResponse struct {
}

func (m *MsgCreateCw20ContractResponse) Reset()         { *m = MsgCreateCw20ContractResponse{} }
func (m *MsgCreateCw20ContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCw20ContractResponse) ProtoMessage()    {}
func (*MsgCreateCw20ContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{9}
}
func (m *MsgCreateCw20ContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCw20ContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCw20ContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCw20ContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCw20ContractResponse.Merge(m, src)
}
func (m *MsgCreateCw20ContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCw20ContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCw20ContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCw20ContractResponse proto.InternalMessageInfo

type MsgUpdateCw20Contract struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CodeId  uint64 `protobuf:"varint,2,opt,name=codeId,proto3" json:"codeId,omitempty"`
	Ver     string `protobuf:"bytes,3,opt,name=ver,proto3" json:"ver,omitempty"`
	Path    string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *MsgUpdateCw20Contract) Reset()         { *m = MsgUpdateCw20Contract{} }
func (m *MsgUpdateCw20Contract) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCw20Contract) ProtoMessage()    {}
func (*MsgUpdateCw20Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{10}
}
func (m *MsgUpdateCw20Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCw20Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCw20Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCw20Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCw20Contract.Merge(m, src)
}
func (m *MsgUpdateCw20Contract) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCw20Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCw20Contract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCw20Contract proto.InternalMessageInfo

func (m *MsgUpdateCw20Contract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCw20Contract) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *MsgUpdateCw20Contract) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *MsgUpdateCw20Contract) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type MsgUpdateCw20ContractResponse struct {
}

func (m *MsgUpdateCw20ContractResponse) Reset()         { *m = MsgUpdateCw20ContractResponse{} }
func (m *MsgUpdateCw20ContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCw20ContractResponse) ProtoMessage()    {}
func (*MsgUpdateCw20ContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{11}
}
func (m *MsgUpdateCw20ContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCw20ContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCw20ContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCw20ContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCw20ContractResponse.Merge(m, src)
}
func (m *MsgUpdateCw20ContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCw20ContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCw20ContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCw20ContractResponse proto.InternalMessageInfo

type MsgDeleteCw20Contract struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgDeleteCw20Contract) Reset()         { *m = MsgDeleteCw20Contract{} }
func (m *MsgDeleteCw20Contract) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCw20Contract) ProtoMessage()    {}
func (*MsgDeleteCw20Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{12}
}
func (m *MsgDeleteCw20Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCw20Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCw20Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCw20Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCw20Contract.Merge(m, src)
}
func (m *MsgDeleteCw20Contract) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCw20Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCw20Contract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCw20Contract proto.InternalMessageInfo

func (m *MsgDeleteCw20Contract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgDeleteCw20ContractResponse struct {
}

func (m *MsgDeleteCw20ContractResponse) Reset()         { *m = MsgDeleteCw20ContractResponse{} }
func (m *MsgDeleteCw20ContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteCw20ContractResponse) ProtoMessage()    {}
func (*MsgDeleteCw20ContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_43fc01c277884dc6, []int{13}
}
func (m *MsgDeleteCw20ContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteCw20ContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteCw20ContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteCw20ContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteCw20ContractResponse.Merge(m, src)
}
func (m *MsgDeleteCw20ContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteCw20ContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteCw20ContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteCw20ContractResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterBridge)(nil), "limechain.mantrachain.bridge.v1.MsgRegisterBridge")
	proto.RegisterType((*MsgCw20InitialBalances)(nil), "limechain.mantrachain.bridge.v1.MsgCw20InitialBalances")
	proto.RegisterType((*MsgCw20Mint)(nil), "limechain.mantrachain.bridge.v1.MsgCw20Mint")
	proto.RegisterType((*MsgBridgeMetadata)(nil), "limechain.mantrachain.bridge.v1.MsgBridgeMetadata")
	proto.RegisterType((*MsgRegisterBridgeResponse)(nil), "limechain.mantrachain.bridge.v1.MsgRegisterBridgeResponse")
	proto.RegisterType((*MsgMint)(nil), "limechain.mantrachain.bridge.v1.MsgMint")
	proto.RegisterType((*MsgMintMetadata)(nil), "limechain.mantrachain.bridge.v1.MsgMintMetadata")
	proto.RegisterType((*MsgMintResponse)(nil), "limechain.mantrachain.bridge.v1.MsgMintResponse")
	proto.RegisterType((*MsgCreateCw20Contract)(nil), "limechain.mantrachain.bridge.v1.MsgCreateCw20Contract")
	proto.RegisterType((*MsgCreateCw20ContractResponse)(nil), "limechain.mantrachain.bridge.v1.MsgCreateCw20ContractResponse")
	proto.RegisterType((*MsgUpdateCw20Contract)(nil), "limechain.mantrachain.bridge.v1.MsgUpdateCw20Contract")
	proto.RegisterType((*MsgUpdateCw20ContractResponse)(nil), "limechain.mantrachain.bridge.v1.MsgUpdateCw20ContractResponse")
	proto.RegisterType((*MsgDeleteCw20Contract)(nil), "limechain.mantrachain.bridge.v1.MsgDeleteCw20Contract")
	proto.RegisterType((*MsgDeleteCw20ContractResponse)(nil), "limechain.mantrachain.bridge.v1.MsgDeleteCw20ContractResponse")
}

func init() { proto.RegisterFile("bridge/v1/tx.proto", fileDescriptor_43fc01c277884dc6) }

var fileDescriptor_43fc01c277884dc6 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x3b, 0x6f, 0x13, 0x4b,
	0x14, 0xce, 0xda, 0x8e, 0x1f, 0xc7, 0x37, 0xb9, 0xf7, 0x0e, 0x4a, 0x58, 0x8c, 0x70, 0xac, 0x45,
	0x91, 0x5c, 0x20, 0x3b, 0x31, 0x12, 0x48, 0x14, 0x48, 0x89, 0x53, 0xe0, 0x08, 0x53, 0x18, 0xd1,
	0x50, 0x60, 0x8d, 0x77, 0x47, 0xeb, 0x11, 0xde, 0x5d, 0x6b, 0x67, 0x92, 0x38, 0x1d, 0x05, 0x25,
	0x05, 0x12, 0x55, 0x7e, 0x04, 0xff, 0x83, 0x32, 0x25, 0x25, 0x4a, 0xfe, 0x08, 0x9a, 0xc7, 0x6e,
	0xd6, 0x8f, 0x85, 0x25, 0x05, 0xdd, 0xcc, 0x99, 0xf3, 0xf8, 0xce, 0x77, 0xbe, 0xb3, 0x36, 0xa0,
	0x51, 0x48, 0x1d, 0x97, 0xb4, 0x4f, 0xf7, 0xdb, 0x7c, 0xd6, 0x9a, 0x86, 0x01, 0x0f, 0xd0, 0xce,
	0x84, 0x7a, 0xc4, 0x1e, 0x63, 0xea, 0xb7, 0x3c, 0xec, 0xf3, 0x10, 0xab, 0xb3, 0xf2, 0x6c, 0x9d,
	0xee, 0xd7, 0xea, 0x37, 0x41, 0xf6, 0xd9, 0xb0, 0xb3, 0x37, 0xb4, 0x03, 0xe9, 0xc6, 0x55, 0x02,
	0xeb, 0x1c, 0xfe, 0xef, 0x33, 0x77, 0x40, 0x5c, 0xca, 0x38, 0x09, 0x0f, 0xa5, 0x33, 0x32, 0xa1,
	0x64, 0x87, 0x04, 0xf3, 0x20, 0x34, 0x8d, 0x86, 0xd1, 0xac, 0x0c, 0xa2, 0x2b, 0x3a, 0x86, 0xa2,
	0x4a, 0x68, 0xe6, 0x1a, 0x46, 0xb3, 0xda, 0xe9, 0xb4, 0x7e, 0x03, 0xa0, 0xd5, 0x67, 0xae, 0xca,
	0xda, 0x27, 0x1c, 0x3b, 0x98, 0xe3, 0x81, 0xce, 0x60, 0x1d, 0xc3, 0x76, 0x9f, 0xb9, 0xdd, 0xb3,
	0xce, 0x5e, 0xcf, 0xa7, 0x9c, 0xe2, 0xc9, 0x21, 0x9e, 0x60, 0xdf, 0x26, 0x4c, 0xd4, 0xc7, 0x8e,
	0x13, 0x12, 0xc6, 0xa2, 0xfa, 0xfa, 0x8a, 0xb6, 0xa1, 0x88, 0xbd, 0xe0, 0xc4, 0xe7, 0xb2, 0x7e,
	0x65, 0xa0, 0x6f, 0xd6, 0x2e, 0x54, 0x75, 0xae, 0x3e, 0xf5, 0xb9, 0x70, 0xf3, 0xa8, 0xcf, 0x49,
	0x84, 0x5f, 0xdf, 0xac, 0x8b, 0xbc, 0x6c, 0x77, 0x1e, 0x10, 0xda, 0x84, 0x1c, 0x75, 0xb4, 0x67,
	0x8e, 0x3a, 0x68, 0x17, 0x36, 0x15, 0xc4, 0x21, 0xb6, 0xed, 0x44, 0xb1, 0x0d, 0x65, 0x3d, 0x50,
	0x46, 0xd4, 0x81, 0x2d, 0xfb, 0x2c, 0xc1, 0xe8, 0x30, 0xc2, 0x9c, 0x97, 0xde, 0x77, 0xc4, 0x63,
	0x57, 0xbf, 0x1d, 0x68, 0xfc, 0xf7, 0xa1, 0x22, 0x63, 0x7c, 0xec, 0x11, 0xb3, 0x20, 0xfd, 0xca,
	0xc2, 0xf0, 0x0a, 0x7b, 0x04, 0xed, 0x40, 0x55, 0x3e, 0xb2, 0x73, 0x6f, 0x14, 0x4c, 0xcc, 0x75,
	0xf9, 0x0c, 0xc2, 0xf4, 0x5a, 0x5a, 0xd0, 0x43, 0xd8, 0x90, 0x0e, 0x0e, 0xb1, 0xa9, 0x87, 0x27,
	0xcc, 0x2c, 0x36, 0x8c, 0xe6, 0xc6, 0xe0, 0x1f, 0x61, 0x3c, 0xd2, 0x36, 0xf4, 0x5e, 0xc3, 0xa2,
	0x8a, 0xd4, 0xe1, 0x48, 0xb3, 0x6a, 0x96, 0x1a, 0xf9, 0x66, 0xb5, 0xf3, 0x34, 0xcb, 0xc4, 0x56,
	0x0c, 0x45, 0xf5, 0xb3, 0x38, 0xa9, 0x9e, 0xee, 0x47, 0xf0, 0x6b, 0x96, 0xa5, 0x24, 0x1e, 0x65,
	0x2d, 0x20, 0x26, 0xa5, 0xba, 0x17, 0x27, 0xeb, 0x8b, 0x01, 0xf7, 0x96, 0xa4, 0x38, 0x20, 0x6c,
	0x1a, 0xf8, 0x8c, 0x08, 0xe2, 0xf4, 0x4c, 0xe2, 0x51, 0x95, 0x95, 0xa1, 0xe7, 0xa4, 0x4f, 0x22,
	0x97, 0x3e, 0x89, 0x9b, 0x21, 0x47, 0x52, 0xcf, 0x27, 0x87, 0xdc, 0x55, 0x46, 0xeb, 0xab, 0x01,
	0xa5, 0x3e, 0x73, 0xa5, 0xaa, 0xd2, 0xd7, 0x62, 0x0e, 0x5d, 0x6e, 0x01, 0x5d, 0xb6, 0x4a, 0xe8,
	0x08, 0x0a, 0x92, 0xc5, 0x82, 0x64, 0x71, 0x2f, 0x0b, 0x8b, 0x02, 0x55, 0xbc, 0x56, 0x32, 0xda,
	0x7a, 0x07, 0xff, 0x2e, 0x3c, 0xa0, 0x1a, 0x94, 0x43, 0x62, 0x13, 0x7a, 0x1a, 0xaf, 0x43, 0x7c,
	0x5f, 0xd8, 0xa7, 0x42, 0xb4, 0x4f, 0xe8, 0x2e, 0x94, 0xf8, 0x6c, 0x38, 0xc6, 0x6c, 0xac, 0xc1,
	0x16, 0xf9, 0xec, 0x05, 0x66, 0x63, 0xeb, 0x63, 0x2e, 0x2e, 0x90, 0x6d, 0x36, 0x09, 0xd2, 0x72,
	0xf3, 0xa4, 0xdd, 0x66, 0x7f, 0x96, 0xb9, 0x2c, 0xac, 0xe2, 0x32, 0xd9, 0xf2, 0x7a, 0x6a, 0xcb,
	0xc5, 0xb4, 0x96, 0x4b, 0xc9, 0x96, 0x11, 0x82, 0x02, 0x3f, 0x9f, 0x12, 0x29, 0xef, 0xca, 0x40,
	0x9e, 0xad, 0x00, 0xb6, 0x84, 0x8a, 0x45, 0x39, 0xd2, 0x4d, 0xe0, 0xfc, 0x85, 0x46, 0xb6, 0xa1,
	0x68, 0x07, 0x0e, 0xe9, 0x39, 0x11, 0xd5, 0xea, 0x86, 0xfe, 0x83, 0xbc, 0x80, 0xa9, 0x9a, 0x16,
	0x47, 0x51, 0x70, 0x8a, 0xf9, 0x58, 0xb7, 0x26, 0xcf, 0xd6, 0x0e, 0x3c, 0x58, 0x59, 0x30, 0x1a,
	0x82, 0x46, 0xf4, 0x66, 0xea, 0xfc, 0x5d, 0x44, 0xcb, 0x05, 0x63, 0x44, 0xfb, 0x12, 0xd1, 0x11,
	0x99, 0x90, 0xac, 0x88, 0x74, 0xce, 0xe5, 0x90, 0x28, 0x67, 0xe7, 0x62, 0x1d, 0xf2, 0x7d, 0xe6,
	0xa2, 0x0f, 0x06, 0x6c, 0x2e, 0xfc, 0x68, 0x65, 0xfa, 0x29, 0x9a, 0x8f, 0xa9, 0x3d, 0xfb, 0xf3,
	0x98, 0x58, 0xf5, 0x23, 0x28, 0xc8, 0xaf, 0x42, 0x33, 0xeb, 0xa6, 0xd6, 0x32, 0xef, 0x74, 0x5c,
	0xe3, 0x93, 0x01, 0x68, 0x85, 0xc8, 0x9e, 0x64, 0xfa, 0xc4, 0x2e, 0xc5, 0xd5, 0x9e, 0xdf, 0x2e,
	0x6e, 0x0e, 0xce, 0x0a, 0x85, 0x65, 0x82, 0xb3, 0x1c, 0x97, 0x0d, 0x4e, 0xba, 0xc0, 0x24, 0x9c,
	0x15, 0xf2, 0xca, 0x04, 0x67, 0x39, 0x2e, 0x1b, 0x9c, 0x74, 0x6d, 0x1e, 0xf6, 0xbe, 0x5d, 0xd5,
	0x8d, 0xcb, 0xab, 0xba, 0xf1, 0xe3, 0xaa, 0x6e, 0x7c, 0xbe, 0xae, 0xaf, 0x5d, 0x5e, 0xd7, 0xd7,
	0xbe, 0x5f, 0xd7, 0xd7, 0xde, 0xb6, 0x5d, 0xca, 0xc7, 0x27, 0xa3, 0x96, 0x1d, 0x78, 0xed, 0x97,
	0xd4, 0x23, 0x5d, 0x91, 0xb7, 0x9d, 0xa8, 0xd1, 0x9e, 0xb5, 0xf5, 0xff, 0x34, 0xf1, 0x75, 0x61,
	0xa3, 0xa2, 0xfc, 0x73, 0xf6, 0xf8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x99, 0xee, 0xf8,
	0xf3, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterBridge(ctx context.Context, in *MsgRegisterBridge, opts ...grpc.CallOption) (*MsgRegisterBridgeResponse, error)
	Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error)
	CreateCw20Contract(ctx context.Context, in *MsgCreateCw20Contract, opts ...grpc.CallOption) (*MsgCreateCw20ContractResponse, error)
	UpdateCw20Contract(ctx context.Context, in *MsgUpdateCw20Contract, opts ...grpc.CallOption) (*MsgUpdateCw20ContractResponse, error)
	DeleteCw20Contract(ctx context.Context, in *MsgDeleteCw20Contract, opts ...grpc.CallOption) (*MsgDeleteCw20ContractResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterBridge(ctx context.Context, in *MsgRegisterBridge, opts ...grpc.CallOption) (*MsgRegisterBridgeResponse, error) {
	out := new(MsgRegisterBridgeResponse)
	err := c.cc.Invoke(ctx, "/limechain.mantrachain.bridge.v1.Msg/RegisterBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Mint(ctx context.Context, in *MsgMint, opts ...grpc.CallOption) (*MsgMintResponse, error) {
	out := new(MsgMintResponse)
	err := c.cc.Invoke(ctx, "/limechain.mantrachain.bridge.v1.Msg/Mint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCw20Contract(ctx context.Context, in *MsgCreateCw20Contract, opts ...grpc.CallOption) (*MsgCreateCw20ContractResponse, error) {
	out := new(MsgCreateCw20ContractResponse)
	err := c.cc.Invoke(ctx, "/limechain.mantrachain.bridge.v1.Msg/CreateCw20Contract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCw20Contract(ctx context.Context, in *MsgUpdateCw20Contract, opts ...grpc.CallOption) (*MsgUpdateCw20ContractResponse, error) {
	out := new(MsgUpdateCw20ContractResponse)
	err := c.cc.Invoke(ctx, "/limechain.mantrachain.bridge.v1.Msg/UpdateCw20Contract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteCw20Contract(ctx context.Context, in *MsgDeleteCw20Contract, opts ...grpc.CallOption) (*MsgDeleteCw20ContractResponse, error) {
	out := new(MsgDeleteCw20ContractResponse)
	err := c.cc.Invoke(ctx, "/limechain.mantrachain.bridge.v1.Msg/DeleteCw20Contract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterBridge(context.Context, *MsgRegisterBridge) (*MsgRegisterBridgeResponse, error)
	Mint(context.Context, *MsgMint) (*MsgMintResponse, error)
	CreateCw20Contract(context.Context, *MsgCreateCw20Contract) (*MsgCreateCw20ContractResponse, error)
	UpdateCw20Contract(context.Context, *MsgUpdateCw20Contract) (*MsgUpdateCw20ContractResponse, error)
	DeleteCw20Contract(context.Context, *MsgDeleteCw20Contract) (*MsgDeleteCw20ContractResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterBridge(ctx context.Context, req *MsgRegisterBridge) (*MsgRegisterBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBridge not implemented")
}
func (*UnimplementedMsgServer) Mint(ctx context.Context, req *MsgMint) (*MsgMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mint not implemented")
}
func (*UnimplementedMsgServer) CreateCw20Contract(ctx context.Context, req *MsgCreateCw20Contract) (*MsgCreateCw20ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCw20Contract not implemented")
}
func (*UnimplementedMsgServer) UpdateCw20Contract(ctx context.Context, req *MsgUpdateCw20Contract) (*MsgUpdateCw20ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCw20Contract not implemented")
}
func (*UnimplementedMsgServer) DeleteCw20Contract(ctx context.Context, req *MsgDeleteCw20Contract) (*MsgDeleteCw20ContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCw20Contract not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limechain.mantrachain.bridge.v1.Msg/RegisterBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterBridge(ctx, req.(*MsgRegisterBridge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Mint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Mint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limechain.mantrachain.bridge.v1.Msg/Mint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Mint(ctx, req.(*MsgMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCw20Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCw20Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCw20Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limechain.mantrachain.bridge.v1.Msg/CreateCw20Contract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCw20Contract(ctx, req.(*MsgCreateCw20Contract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCw20Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCw20Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCw20Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limechain.mantrachain.bridge.v1.Msg/UpdateCw20Contract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCw20Contract(ctx, req.(*MsgUpdateCw20Contract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteCw20Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteCw20Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteCw20Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/limechain.mantrachain.bridge.v1.Msg/DeleteCw20Contract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteCw20Contract(ctx, req.(*MsgDeleteCw20Contract))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "limechain.mantrachain.bridge.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBridge",
			Handler:    _Msg_RegisterBridge_Handler,
		},
		{
			MethodName: "Mint",
			Handler:    _Msg_Mint_Handler,
		},
		{
			MethodName: "CreateCw20Contract",
			Handler:    _Msg_CreateCw20Contract_Handler,
		},
		{
			MethodName: "UpdateCw20Contract",
			Handler:    _Msg_UpdateCw20Contract_Handler,
		},
		{
			MethodName: "DeleteCw20Contract",
			Handler:    _Msg_DeleteCw20Contract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridge/v1/tx.proto",
}

func (m *MsgRegisterBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bridge != nil {
		{
			size, err := m.Bridge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCw20InitialBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCw20InitialBalances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCw20InitialBalances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCw20Mint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCw20Mint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCw20Mint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Minter) > 0 {
		i -= len(m.Minter)
		copy(dAtA[i:], m.Minter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Minter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBridgeMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBridgeMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBridgeMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cw20Mint != nil {
		{
			size, err := m.Cw20Mint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Cw20InitialBalances) > 0 {
		for iNdEx := len(m.Cw20InitialBalances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cw20InitialBalances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Cw20Decimals != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Cw20Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cw20Symbol) > 0 {
		i -= len(m.Cw20Symbol)
		copy(dAtA[i:], m.Cw20Symbol)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cw20Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cw20Name) > 0 {
		i -= len(m.Cw20Name)
		copy(dAtA[i:], m.Cw20Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cw20Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cw20ContractAddress) > 0 {
		i -= len(m.Cw20ContractAddress)
		copy(dAtA[i:], m.Cw20ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cw20ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeCreator) > 0 {
		i -= len(m.BridgeCreator)
		copy(dAtA[i:], m.BridgeCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cw20ContractAddress) > 0 {
		i -= len(m.Cw20ContractAddress)
		copy(dAtA[i:], m.Cw20ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cw20ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mint != nil {
		{
			size, err := m.Mint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.BridgeCreator) > 0 {
		i -= len(m.BridgeCreator)
		copy(dAtA[i:], m.BridgeCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BridgeCreator) > 0 {
		i -= len(m.BridgeCreator)
		copy(dAtA[i:], m.BridgeCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeCreator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cw20ContractAddress) > 0 {
		i -= len(m.Cw20ContractAddress)
		copy(dAtA[i:], m.Cw20ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cw20ContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCw20Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCw20Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCw20Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCw20ContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCw20ContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCw20ContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCw20Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCw20Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCw20Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ver) > 0 {
		i -= len(m.Ver)
		copy(dAtA[i:], m.Ver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Ver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CodeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCw20ContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCw20ContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCw20ContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCw20Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCw20Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCw20Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteCw20ContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteCw20ContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteCw20ContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Bridge != nil {
		l = m.Bridge.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCw20InitialBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCw20Mint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Minter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBridgeMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cw20ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cw20Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cw20Symbol)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Cw20Decimals != 0 {
		n += 1 + sovTx(uint64(m.Cw20Decimals))
	}
	if len(m.Cw20InitialBalances) > 0 {
		for _, e := range m.Cw20InitialBalances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.Cw20Mint != nil {
		l = m.Cw20Mint.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cw20ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Mint != nil {
		l = m.Mint.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cw20ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCw20Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CodeId != 0 {
		n += 1 + sovTx(uint64(m.CodeId))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCw20ContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCw20Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CodeId != 0 {
		n += 1 + sovTx(uint64(m.CodeId))
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCw20ContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteCw20Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteCw20ContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bridge == nil {
				m.Bridge = &MsgBridgeMetadata{}
			}
			if err := m.Bridge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCw20InitialBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCw20InitialBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCw20InitialBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCw20Mint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCw20Mint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCw20Mint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBridgeMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBridgeMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBridgeMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Decimals", wireType)
			}
			m.Cw20Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cw20Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20InitialBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20InitialBalances = append(m.Cw20InitialBalances, &MsgCw20InitialBalances{})
			if err := m.Cw20InitialBalances[len(m.Cw20InitialBalances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20Mint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cw20Mint == nil {
				m.Cw20Mint = &MsgCw20Mint{}
			}
			if err := m.Cw20Mint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mint == nil {
				m.Mint = &MsgMintMetadata{}
			}
			if err := m.Mint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCw20Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCw20Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCw20Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCw20ContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCw20ContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCw20ContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCw20Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCw20Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCw20Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCw20ContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCw20ContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCw20ContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCw20Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCw20Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCw20Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteCw20ContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteCw20ContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteCw20ContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
