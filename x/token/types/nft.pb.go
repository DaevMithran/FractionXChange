// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/token/v1/nft.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Nft struct {
	Index             []byte                                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	Id                string                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Title             string                                        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Images            []*TokenImage                                 `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty" yaml:"images"`
	Url               string                                        `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty" yaml:"url"`
	Description       string                                        `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Links             []*TokenLink                                  `protobuf:"bytes,7,rep,name=links,proto3" json:"links,omitempty" yaml:"links"`
	Attributes        []*TokenAttribute                             `protobuf:"bytes,8,rep,name=attributes,proto3" json:"attributes,omitempty" yaml:"attributes"`
	Creator           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,9,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
	CollectionCreator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,10,opt,name=collection_creator,json=collectionCreator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"collection_creator,omitempty" yaml:"collection_creator"`
	CollectionId      string                                        `protobuf:"bytes,11,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty" yaml:"collection_id"`
	CollectionIndex   []byte                                        `protobuf:"bytes,12,opt,name=collection_index,json=collectionIndex,proto3" json:"collection_index,omitempty" yaml:"collection_index"`
}

func (m *Nft) Reset()         { *m = Nft{} }
func (m *Nft) String() string { return proto.CompactTextString(m) }
func (*Nft) ProtoMessage()    {}
func (*Nft) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f1b7413ccb587, []int{0}
}
func (m *Nft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Nft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Nft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Nft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nft.Merge(m, src)
}
func (m *Nft) XXX_Size() int {
	return m.Size()
}
func (m *Nft) XXX_DiscardUnknown() {
	xxx_messageInfo_Nft.DiscardUnknown(m)
}

var xxx_messageInfo_Nft proto.InternalMessageInfo

func (m *Nft) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Nft) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Nft) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Nft) GetImages() []*TokenImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Nft) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Nft) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Nft) GetLinks() []*TokenLink {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Nft) GetAttributes() []*TokenAttribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Nft) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Nft) GetCollectionCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.CollectionCreator
	}
	return nil
}

func (m *Nft) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *Nft) GetCollectionIndex() []byte {
	if m != nil {
		return m.CollectionIndex
	}
	return nil
}

type ApprovedAddressesList struct {
	List map[string]*ApprovedAddresses `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ApprovedAddressesList) Reset()         { *m = ApprovedAddressesList{} }
func (m *ApprovedAddressesList) String() string { return proto.CompactTextString(m) }
func (*ApprovedAddressesList) ProtoMessage()    {}
func (*ApprovedAddressesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f1b7413ccb587, []int{1}
}
func (m *ApprovedAddressesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApprovedAddressesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApprovedAddressesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApprovedAddressesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovedAddressesList.Merge(m, src)
}
func (m *ApprovedAddressesList) XXX_Size() int {
	return m.Size()
}
func (m *ApprovedAddressesList) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovedAddressesList.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovedAddressesList proto.InternalMessageInfo

func (m *ApprovedAddressesList) GetList() map[string]*ApprovedAddresses {
	if m != nil {
		return m.List
	}
	return nil
}

type ApprovedAddresses struct {
	Addresses map[string][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ApprovedAddresses) Reset()         { *m = ApprovedAddresses{} }
func (m *ApprovedAddresses) String() string { return proto.CompactTextString(m) }
func (*ApprovedAddresses) ProtoMessage()    {}
func (*ApprovedAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_120f1b7413ccb587, []int{2}
}
func (m *ApprovedAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApprovedAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApprovedAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ApprovedAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApprovedAddresses.Merge(m, src)
}
func (m *ApprovedAddresses) XXX_Size() int {
	return m.Size()
}
func (m *ApprovedAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_ApprovedAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_ApprovedAddresses proto.InternalMessageInfo

func (m *ApprovedAddresses) GetAddresses() map[string][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func init() {
	proto.RegisterType((*Nft)(nil), "mantrachain.token.v1.Nft")
	proto.RegisterType((*ApprovedAddressesList)(nil), "mantrachain.token.v1.ApprovedAddressesList")
	proto.RegisterMapType((map[string]*ApprovedAddresses)(nil), "mantrachain.token.v1.ApprovedAddressesList.ListEntry")
	proto.RegisterType((*ApprovedAddresses)(nil), "mantrachain.token.v1.ApprovedAddresses")
	proto.RegisterMapType((map[string][]byte)(nil), "mantrachain.token.v1.ApprovedAddresses.AddressesEntry")
}

func init() { proto.RegisterFile("mantrachain/token/v1/nft.proto", fileDescriptor_120f1b7413ccb587) }

var fileDescriptor_120f1b7413ccb587 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0x97, 0x76, 0xed, 0xde, 0xba, 0xdd, 0xde, 0xd5, 0xea, 0x20, 0x14, 0x91, 0x94, 0x08,
	0xc1, 0x2e, 0x4b, 0xb4, 0x4d, 0xa0, 0x69, 0x62, 0x87, 0x76, 0x62, 0x68, 0x62, 0x4c, 0xc2, 0xda,
	0x09, 0x84, 0x20, 0x4b, 0xbc, 0xce, 0x6a, 0x12, 0x57, 0xb1, 0x5b, 0xad, 0x07, 0xbe, 0x03, 0xdf,
	0x82, 0x7d, 0x10, 0x0e, 0x1c, 0x77, 0xe4, 0x14, 0xa1, 0xee, 0x1b, 0xe4, 0xc8, 0x09, 0xc5, 0x4e,
	0x57, 0xa3, 0x56, 0xd3, 0xc4, 0xa5, 0x75, 0xfc, 0xfc, 0x9f, 0xdf, 0xff, 0x79, 0xe2, 0x27, 0x06,
	0x46, 0xe8, 0x46, 0x3c, 0x76, 0xbd, 0x73, 0x97, 0x44, 0x0e, 0xa7, 0x3d, 0x1c, 0x39, 0xc3, 0x4d,
	0x27, 0x3a, 0xe3, 0x76, 0x3f, 0xa6, 0x9c, 0xc2, 0x86, 0x12, 0xb7, 0x45, 0xdc, 0x1e, 0x6e, 0x36,
	0x1b, 0x5d, 0xda, 0xa5, 0x42, 0xe0, 0x64, 0x2b, 0xa9, 0x6d, 0x3e, 0x9e, 0xcb, 0xf2, 0x68, 0x18,
	0xd2, 0x48, 0x4a, 0xac, 0xcb, 0x32, 0x28, 0x1e, 0x9f, 0x71, 0xf8, 0x14, 0x94, 0x48, 0xe4, 0xe3,
	0x0b, 0x5d, 0x6b, 0x69, 0xeb, 0xb5, 0xce, 0x6a, 0x9a, 0x98, 0xb5, 0x91, 0x1b, 0x06, 0xbb, 0x96,
	0xd8, 0xb6, 0x90, 0x0c, 0xc3, 0x47, 0xa0, 0x40, 0x7c, 0xbd, 0xd0, 0xd2, 0xd6, 0x2b, 0x9d, 0xe5,
	0x34, 0x31, 0x2b, 0xb9, 0xc8, 0xb7, 0x50, 0x81, 0xf8, 0x19, 0x86, 0x13, 0x1e, 0x60, 0xbd, 0x28,
	0x14, 0x0a, 0x46, 0x6c, 0x5b, 0x48, 0x86, 0xe1, 0x1b, 0x50, 0x26, 0xa1, 0xdb, 0xc5, 0x4c, 0x5f,
	0x6c, 0x15, 0xd7, 0xab, 0x5b, 0x2d, 0x7b, 0x5e, 0x5b, 0xf6, 0x49, 0xb6, 0x38, 0xcc, 0x84, 0x9d,
	0x7a, 0x9a, 0x98, 0xcb, 0xb9, 0x99, 0xc8, 0xb4, 0x50, 0x8e, 0x80, 0x2d, 0x50, 0x1c, 0xc4, 0x81,
	0x5e, 0x12, 0x96, 0x2b, 0x69, 0x62, 0x02, 0xa9, 0x1b, 0xc4, 0x81, 0x85, 0xb2, 0x10, 0xdc, 0x01,
	0x55, 0x1f, 0x33, 0x2f, 0x26, 0x7d, 0x4e, 0x68, 0xa4, 0x97, 0x85, 0xf2, 0x5e, 0x9a, 0x98, 0x50,
	0x2a, 0x95, 0xa0, 0x85, 0x54, 0x29, 0x7c, 0x0d, 0x4a, 0x01, 0x89, 0x7a, 0x4c, 0x5f, 0x12, 0x75,
	0x9a, 0xb7, 0xd4, 0x79, 0x44, 0xa2, 0x9e, 0xda, 0xb1, 0xc8, 0xb3, 0x90, 0xcc, 0x87, 0x1f, 0x00,
	0x70, 0x39, 0x8f, 0xc9, 0xe9, 0x80, 0x63, 0xa6, 0xff, 0x27, 0x68, 0x4f, 0x6e, 0xa1, 0xb5, 0x27,
	0xe2, 0xce, 0x5a, 0x9a, 0x98, 0x75, 0x89, 0x9c, 0x12, 0x2c, 0xa4, 0xe0, 0xe0, 0x47, 0xb0, 0xe4,
	0xc5, 0xd8, 0xe5, 0x34, 0xd6, 0x2b, 0xe2, 0xfc, 0xf6, 0xd3, 0xc4, 0x5c, 0x91, 0x39, 0x79, 0xc0,
	0xfa, 0x9d, 0x98, 0x1b, 0x5d, 0xc2, 0xcf, 0x07, 0xa7, 0xb6, 0x47, 0x43, 0xc7, 0xa3, 0x2c, 0xa4,
	0x2c, 0xff, 0xdb, 0x60, 0x7e, 0xcf, 0xe1, 0xa3, 0x3e, 0x66, 0x76, 0xdb, 0xf3, 0xda, 0xbe, 0x1f,
	0x63, 0xc6, 0xd0, 0x84, 0x09, 0xbf, 0x00, 0xe8, 0xd1, 0x20, 0xc0, 0x5e, 0xf6, 0x4a, 0x3e, 0x4d,
	0x9c, 0x80, 0x70, 0x3a, 0x4e, 0x13, 0xf3, 0x41, 0xee, 0x34, 0xa3, 0xf9, 0x07, 0xd3, 0xfa, 0x94,
	0xb2, 0x9f, 0xdb, 0xef, 0x81, 0x65, 0x05, 0x4d, 0x7c, 0xbd, 0x2a, 0xce, 0x4f, 0x4f, 0x13, 0xb3,
	0x31, 0xe3, 0x9c, 0x4d, 0x62, 0x6d, 0xfa, 0x7c, 0xe8, 0xc3, 0x03, 0xb0, 0xaa, 0xc6, 0xc5, 0x94,
	0xd7, 0x44, 0xed, 0x0f, 0xd3, 0xc4, 0xbc, 0x3f, 0x4b, 0x90, 0x03, 0xff, 0xbf, 0x02, 0x11, 0x3b,
	0xdf, 0x35, 0xb0, 0xd6, 0xee, 0xf7, 0x63, 0x3a, 0xc4, 0x7e, 0x5e, 0x2d, 0x66, 0x47, 0x84, 0x71,
	0x78, 0x08, 0x16, 0x03, 0xc2, 0xb8, 0xae, 0x89, 0x53, 0x7d, 0x3e, 0xff, 0x54, 0xe7, 0xa6, 0xda,
	0xd9, 0xcf, 0xab, 0x88, 0xc7, 0x23, 0x24, 0x10, 0xcd, 0xcf, 0xa0, 0x72, 0xb3, 0x05, 0x57, 0x41,
	0xb1, 0x87, 0x47, 0xe2, 0x93, 0xac, 0xa0, 0x6c, 0x09, 0xf7, 0x40, 0x69, 0xe8, 0x06, 0x03, 0x2c,
	0xbe, 0xc0, 0xea, 0xd6, 0xb3, 0x3b, 0x5a, 0x21, 0x99, 0xb5, 0x5b, 0xd8, 0xd1, 0xac, 0x6f, 0x1a,
	0xa8, 0xcf, 0x08, 0xe0, 0x09, 0xa8, 0xb8, 0x93, 0x87, 0xbc, 0x8f, 0x17, 0x77, 0x84, 0xdb, 0x37,
	0x2b, 0xd9, 0xc8, 0x14, 0xd4, 0x7c, 0x09, 0x56, 0xfe, 0x0e, 0xce, 0x69, 0xa9, 0xa1, 0xb6, 0x54,
	0x53, 0x2a, 0xed, 0xbc, 0xbb, 0x1c, 0x1b, 0xda, 0x8f, 0xb1, 0xa1, 0x5d, 0x8d, 0x0d, 0xed, 0xd7,
	0xd8, 0xd0, 0xbe, 0x5e, 0x1b, 0x0b, 0x57, 0xd7, 0xc6, 0xc2, 0xcf, 0x6b, 0x63, 0xe1, 0xfd, 0xb6,
	0x32, 0x57, 0x6f, 0xdb, 0xc7, 0x27, 0xa8, 0xbd, 0x71, 0x40, 0x22, 0x37, 0xf2, 0xb0, 0xa3, 0x5e,
	0x7b, 0x17, 0xf9, 0xc5, 0x27, 0x06, 0xed, 0xb4, 0x2c, 0x6e, 0xbd, 0xed, 0x3f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xe6, 0xdd, 0xd9, 0x66, 0x05, 0x00, 0x00,
}

func (this *Nft) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Nft)
	if !ok {
		that2, ok := that.(Nft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Links) != len(that1.Links) {
		return false
	}
	for i := range this.Links {
		if !this.Links[i].Equal(that1.Links[i]) {
			return false
		}
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if !this.Attributes[i].Equal(that1.Attributes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Creator, that1.Creator) {
		return false
	}
	if !bytes.Equal(this.CollectionCreator, that1.CollectionCreator) {
		return false
	}
	if this.CollectionId != that1.CollectionId {
		return false
	}
	if !bytes.Equal(this.CollectionIndex, that1.CollectionIndex) {
		return false
	}
	return true
}
func (this *ApprovedAddressesList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApprovedAddressesList)
	if !ok {
		that2, ok := that.(ApprovedAddressesList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.List) != len(that1.List) {
		return false
	}
	for i := range this.List {
		if !this.List[i].Equal(that1.List[i]) {
			return false
		}
	}
	return true
}
func (this *ApprovedAddresses) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApprovedAddresses)
	if !ok {
		that2, ok := that.(ApprovedAddresses)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if !bytes.Equal(this.Addresses[i], that1.Addresses[i]) {
			return false
		}
	}
	return true
}
func (m *Nft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Nft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Nft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectionIndex) > 0 {
		i -= len(m.CollectionIndex)
		copy(dAtA[i:], m.CollectionIndex)
		i = encodeVarintNft(dAtA, i, uint64(len(m.CollectionIndex)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintNft(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Attributes) > 0 {
		for iNdEx := len(m.Attributes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attributes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ApprovedAddressesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovedAddressesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApprovedAddressesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k := range m.List {
			v := m.List[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintNft(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNft(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNft(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ApprovedAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApprovedAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ApprovedAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for k := range m.Addresses {
			v := m.Addresses[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintNft(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintNft(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintNft(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Nft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.CollectionIndex)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func (m *ApprovedAddressesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovNft(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovNft(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNft(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ApprovedAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for k, v := range m.Addresses {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovNft(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovNft(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovNft(uint64(mapEntrySize))
		}
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Nft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &TokenImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &TokenLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &TokenAttribute{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = append(m.CollectionCreator[:0], dAtA[iNdEx:postIndex]...)
			if m.CollectionCreator == nil {
				m.CollectionCreator = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIndex", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionIndex = append(m.CollectionIndex[:0], dAtA[iNdEx:postIndex]...)
			if m.CollectionIndex == nil {
				m.CollectionIndex = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApprovedAddressesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovedAddressesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovedAddressesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[string]*ApprovedAddresses)
			}
			var mapkey string
			var mapvalue *ApprovedAddresses
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNft
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNft
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthNft
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthNft
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ApprovedAddresses{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNft(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNft
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApprovedAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApprovedAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApprovedAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Addresses == nil {
				m.Addresses = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowNft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthNft
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthNft
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowNft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthNft
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthNft
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipNft(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthNft
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Addresses[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
