// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/token/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetNftCollectionRequest
type QueryGetNftCollectionRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetNftCollectionRequest) Reset()         { *m = QueryGetNftCollectionRequest{} }
func (m *QueryGetNftCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionRequest) ProtoMessage()    {}
func (*QueryGetNftCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{2}
}
func (m *QueryGetNftCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionRequest.Merge(m, src)
}
func (m *QueryGetNftCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionRequest proto.InternalMessageInfo

func (m *QueryGetNftCollectionRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetNftCollectionRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryGetNftCollectionResponse
type QueryGetNftCollectionResponse struct {
	NftCollection *NftCollection `protobuf:"bytes,1,opt,name=nft_collection,json=nftCollection,proto3" json:"nft_collection,omitempty"`
}

func (m *QueryGetNftCollectionResponse) Reset()         { *m = QueryGetNftCollectionResponse{} }
func (m *QueryGetNftCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionResponse) ProtoMessage()    {}
func (*QueryGetNftCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{3}
}
func (m *QueryGetNftCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionResponse.Merge(m, src)
}
func (m *QueryGetNftCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionResponse proto.InternalMessageInfo

func (m *QueryGetNftCollectionResponse) GetNftCollection() *NftCollection {
	if m != nil {
		return m.NftCollection
	}
	return nil
}

// QueryGetIsApprovedForAllNftsRequest
type QueryGetIsApprovedForAllNftsRequest struct {
	Owner    string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *QueryGetIsApprovedForAllNftsRequest) Reset()         { *m = QueryGetIsApprovedForAllNftsRequest{} }
func (m *QueryGetIsApprovedForAllNftsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIsApprovedForAllNftsRequest) ProtoMessage()    {}
func (*QueryGetIsApprovedForAllNftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{4}
}
func (m *QueryGetIsApprovedForAllNftsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIsApprovedForAllNftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIsApprovedForAllNftsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIsApprovedForAllNftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIsApprovedForAllNftsRequest.Merge(m, src)
}
func (m *QueryGetIsApprovedForAllNftsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIsApprovedForAllNftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIsApprovedForAllNftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIsApprovedForAllNftsRequest proto.InternalMessageInfo

func (m *QueryGetIsApprovedForAllNftsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryGetIsApprovedForAllNftsRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// QueryGetIsApprovedForAllNftsResponse
type QueryGetIsApprovedForAllNftsResponse struct {
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Approved bool   `protobuf:"varint,2,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (m *QueryGetIsApprovedForAllNftsResponse) Reset()         { *m = QueryGetIsApprovedForAllNftsResponse{} }
func (m *QueryGetIsApprovedForAllNftsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIsApprovedForAllNftsResponse) ProtoMessage()    {}
func (*QueryGetIsApprovedForAllNftsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{5}
}
func (m *QueryGetIsApprovedForAllNftsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIsApprovedForAllNftsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIsApprovedForAllNftsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIsApprovedForAllNftsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIsApprovedForAllNftsResponse.Merge(m, src)
}
func (m *QueryGetIsApprovedForAllNftsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIsApprovedForAllNftsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIsApprovedForAllNftsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIsApprovedForAllNftsResponse proto.InternalMessageInfo

func (m *QueryGetIsApprovedForAllNftsResponse) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryGetIsApprovedForAllNftsResponse) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

// QueryGetNftApprovedRequest
type QueryGetNftApprovedRequest struct {
	CollectionCreator string `protobuf:"bytes,1,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId      string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Id                string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetNftApprovedRequest) Reset()         { *m = QueryGetNftApprovedRequest{} }
func (m *QueryGetNftApprovedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftApprovedRequest) ProtoMessage()    {}
func (*QueryGetNftApprovedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{6}
}
func (m *QueryGetNftApprovedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftApprovedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftApprovedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftApprovedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftApprovedRequest.Merge(m, src)
}
func (m *QueryGetNftApprovedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftApprovedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftApprovedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftApprovedRequest proto.InternalMessageInfo

func (m *QueryGetNftApprovedRequest) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftApprovedRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftApprovedRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryGetNftApprovedResponse
type QueryGetNftApprovedResponse struct {
	CollectionCreator string   `protobuf:"bytes,1,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId      string   `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Id                string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Approved          []string `protobuf:"bytes,4,rep,name=approved,proto3" json:"approved,omitempty"`
}

func (m *QueryGetNftApprovedResponse) Reset()         { *m = QueryGetNftApprovedResponse{} }
func (m *QueryGetNftApprovedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftApprovedResponse) ProtoMessage()    {}
func (*QueryGetNftApprovedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{7}
}
func (m *QueryGetNftApprovedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftApprovedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftApprovedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftApprovedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftApprovedResponse.Merge(m, src)
}
func (m *QueryGetNftApprovedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftApprovedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftApprovedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftApprovedResponse proto.InternalMessageInfo

func (m *QueryGetNftApprovedResponse) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftApprovedResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftApprovedResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QueryGetNftApprovedResponse) GetApproved() []string {
	if m != nil {
		return m.Approved
	}
	return nil
}

// QueryGetNftRequest
type QueryGetNftRequest struct {
	CollectionCreator string `protobuf:"bytes,1,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId      string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Id                string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetNftRequest) Reset()         { *m = QueryGetNftRequest{} }
func (m *QueryGetNftRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftRequest) ProtoMessage()    {}
func (*QueryGetNftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{8}
}
func (m *QueryGetNftRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftRequest.Merge(m, src)
}
func (m *QueryGetNftRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftRequest proto.InternalMessageInfo

func (m *QueryGetNftRequest) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryGetNftResponse
type QueryGetNftResponse struct {
	Nft *Nft `protobuf:"bytes,1,opt,name=nft,proto3" json:"nft,omitempty"`
}

func (m *QueryGetNftResponse) Reset()         { *m = QueryGetNftResponse{} }
func (m *QueryGetNftResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftResponse) ProtoMessage()    {}
func (*QueryGetNftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{9}
}
func (m *QueryGetNftResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftResponse.Merge(m, src)
}
func (m *QueryGetNftResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftResponse proto.InternalMessageInfo

func (m *QueryGetNftResponse) GetNft() *Nft {
	if m != nil {
		return m.Nft
	}
	return nil
}

// QueryGetNftCollectionsByCreatorRequest
type QueryGetNftCollectionsByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetNftCollectionsByCreatorRequest) Reset() {
	*m = QueryGetNftCollectionsByCreatorRequest{}
}
func (m *QueryGetNftCollectionsByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionsByCreatorRequest) ProtoMessage()    {}
func (*QueryGetNftCollectionsByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{10}
}
func (m *QueryGetNftCollectionsByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionsByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionsByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionsByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionsByCreatorRequest.Merge(m, src)
}
func (m *QueryGetNftCollectionsByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionsByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionsByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionsByCreatorRequest proto.InternalMessageInfo

func (m *QueryGetNftCollectionsByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetNftCollectionsByCreatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetNftCollectionsByCreatorResponse
type QueryGetNftCollectionsByCreatorResponse struct {
	Creator        string              `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	NftCollections []*NftCollection    `protobuf:"bytes,2,rep,name=nft_collections,json=nftCollections,proto3" json:"nft_collections,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetNftCollectionsByCreatorResponse) Reset() {
	*m = QueryGetNftCollectionsByCreatorResponse{}
}
func (m *QueryGetNftCollectionsByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionsByCreatorResponse) ProtoMessage()    {}
func (*QueryGetNftCollectionsByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{11}
}
func (m *QueryGetNftCollectionsByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionsByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionsByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionsByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionsByCreatorResponse.Merge(m, src)
}
func (m *QueryGetNftCollectionsByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionsByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionsByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionsByCreatorResponse proto.InternalMessageInfo

func (m *QueryGetNftCollectionsByCreatorResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetNftCollectionsByCreatorResponse) GetNftCollections() []*NftCollection {
	if m != nil {
		return m.NftCollections
	}
	return nil
}

func (m *QueryGetNftCollectionsByCreatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllNftCollectionsRequest
type QueryGetAllNftCollectionsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNftCollectionsRequest) Reset()         { *m = QueryGetAllNftCollectionsRequest{} }
func (m *QueryGetAllNftCollectionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNftCollectionsRequest) ProtoMessage()    {}
func (*QueryGetAllNftCollectionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{12}
}
func (m *QueryGetAllNftCollectionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNftCollectionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNftCollectionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNftCollectionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNftCollectionsRequest.Merge(m, src)
}
func (m *QueryGetAllNftCollectionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNftCollectionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNftCollectionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNftCollectionsRequest proto.InternalMessageInfo

func (m *QueryGetAllNftCollectionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetAllNftCollectionsResponse
type QueryGetAllNftCollectionsResponse struct {
	NftCollections []*NftCollection    `protobuf:"bytes,1,rep,name=nft_collections,json=nftCollections,proto3" json:"nft_collections,omitempty"`
	Pagination     *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllNftCollectionsResponse) Reset()         { *m = QueryGetAllNftCollectionsResponse{} }
func (m *QueryGetAllNftCollectionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllNftCollectionsResponse) ProtoMessage()    {}
func (*QueryGetAllNftCollectionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{13}
}
func (m *QueryGetAllNftCollectionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllNftCollectionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllNftCollectionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllNftCollectionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllNftCollectionsResponse.Merge(m, src)
}
func (m *QueryGetAllNftCollectionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllNftCollectionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllNftCollectionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllNftCollectionsResponse proto.InternalMessageInfo

func (m *QueryGetAllNftCollectionsResponse) GetNftCollections() []*NftCollection {
	if m != nil {
		return m.NftCollections
	}
	return nil
}

func (m *QueryGetAllNftCollectionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllCollectionNfts
type QueryGetAllCollectionNftsRequest struct {
	CollectionCreator string `protobuf:"bytes,1,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId      string `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCollectionNftsRequest) Reset()         { *m = QueryGetAllCollectionNftsRequest{} }
func (m *QueryGetAllCollectionNftsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCollectionNftsRequest) ProtoMessage()    {}
func (*QueryGetAllCollectionNftsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{14}
}
func (m *QueryGetAllCollectionNftsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCollectionNftsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCollectionNftsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCollectionNftsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCollectionNftsRequest.Merge(m, src)
}
func (m *QueryGetAllCollectionNftsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCollectionNftsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCollectionNftsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCollectionNftsRequest proto.InternalMessageInfo

func (m *QueryGetAllCollectionNftsRequest) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetAllCollectionNftsRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetAllCollectionNftsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllCollectionNfts
type QueryGetAllCollectionNftsResponse struct {
	CollectionCreator string              `protobuf:"bytes,1,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId      string              `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	Nfts              []*Nft              `protobuf:"bytes,3,rep,name=nfts,proto3" json:"nfts,omitempty"`
	Pagination        *query.PageResponse `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllCollectionNftsResponse) Reset()         { *m = QueryGetAllCollectionNftsResponse{} }
func (m *QueryGetAllCollectionNftsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllCollectionNftsResponse) ProtoMessage()    {}
func (*QueryGetAllCollectionNftsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{15}
}
func (m *QueryGetAllCollectionNftsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllCollectionNftsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllCollectionNftsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllCollectionNftsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllCollectionNftsResponse.Merge(m, src)
}
func (m *QueryGetAllCollectionNftsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllCollectionNftsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllCollectionNftsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllCollectionNftsResponse proto.InternalMessageInfo

func (m *QueryGetAllCollectionNftsResponse) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetAllCollectionNftsResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetAllCollectionNftsResponse) GetNfts() []*Nft {
	if m != nil {
		return m.Nfts
	}
	return nil
}

func (m *QueryGetAllCollectionNftsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySoulBondedNftsCollection
type QueryGetSoulBondedNftsCollectionRequest struct {
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSoulBondedNftsCollectionRequest) Reset() {
	*m = QueryGetSoulBondedNftsCollectionRequest{}
}
func (m *QueryGetSoulBondedNftsCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSoulBondedNftsCollectionRequest) ProtoMessage()    {}
func (*QueryGetSoulBondedNftsCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{16}
}
func (m *QueryGetSoulBondedNftsCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSoulBondedNftsCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSoulBondedNftsCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSoulBondedNftsCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSoulBondedNftsCollectionRequest.Merge(m, src)
}
func (m *QueryGetSoulBondedNftsCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSoulBondedNftsCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSoulBondedNftsCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSoulBondedNftsCollectionRequest proto.InternalMessageInfo

func (m *QueryGetSoulBondedNftsCollectionRequest) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

// QueryGetSoulBondedNftsCollectionResponse
type QueryGetSoulBondedNftsCollectionResponse struct {
	Index                    []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	SoulBondedNftsCollection bool   `protobuf:"varint,2,opt,name=soul_bonded_nfts_collection,json=soulBondedNftsCollection,proto3" json:"soul_bonded_nfts_collection,omitempty"`
}

func (m *QueryGetSoulBondedNftsCollectionResponse) Reset() {
	*m = QueryGetSoulBondedNftsCollectionResponse{}
}
func (m *QueryGetSoulBondedNftsCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSoulBondedNftsCollectionResponse) ProtoMessage()    {}
func (*QueryGetSoulBondedNftsCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{17}
}
func (m *QueryGetSoulBondedNftsCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSoulBondedNftsCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSoulBondedNftsCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSoulBondedNftsCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSoulBondedNftsCollectionResponse.Merge(m, src)
}
func (m *QueryGetSoulBondedNftsCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSoulBondedNftsCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSoulBondedNftsCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSoulBondedNftsCollectionResponse proto.InternalMessageInfo

func (m *QueryGetSoulBondedNftsCollectionResponse) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *QueryGetSoulBondedNftsCollectionResponse) GetSoulBondedNftsCollection() bool {
	if m != nil {
		return m.SoulBondedNftsCollection
	}
	return false
}

// QueryGetRestrictedNftsCollectionRequest
type QueryGetRestrictedNftsCollectionRequest struct {
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetRestrictedNftsCollectionRequest) Reset() {
	*m = QueryGetRestrictedNftsCollectionRequest{}
}
func (m *QueryGetRestrictedNftsCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRestrictedNftsCollectionRequest) ProtoMessage()    {}
func (*QueryGetRestrictedNftsCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{18}
}
func (m *QueryGetRestrictedNftsCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRestrictedNftsCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRestrictedNftsCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRestrictedNftsCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRestrictedNftsCollectionRequest.Merge(m, src)
}
func (m *QueryGetRestrictedNftsCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRestrictedNftsCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRestrictedNftsCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRestrictedNftsCollectionRequest proto.InternalMessageInfo

func (m *QueryGetRestrictedNftsCollectionRequest) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

// QueryGetRestrictedNftsCollectionResponse
type QueryGetRestrictedNftsCollectionResponse struct {
	Index                    []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	RestrictedNftsCollection bool   `protobuf:"varint,2,opt,name=restricted_nfts_collection,json=restrictedNftsCollection,proto3" json:"restricted_nfts_collection,omitempty"`
}

func (m *QueryGetRestrictedNftsCollectionResponse) Reset() {
	*m = QueryGetRestrictedNftsCollectionResponse{}
}
func (m *QueryGetRestrictedNftsCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRestrictedNftsCollectionResponse) ProtoMessage()    {}
func (*QueryGetRestrictedNftsCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{19}
}
func (m *QueryGetRestrictedNftsCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRestrictedNftsCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRestrictedNftsCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRestrictedNftsCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRestrictedNftsCollectionResponse.Merge(m, src)
}
func (m *QueryGetRestrictedNftsCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRestrictedNftsCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRestrictedNftsCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRestrictedNftsCollectionResponse proto.InternalMessageInfo

func (m *QueryGetRestrictedNftsCollectionResponse) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *QueryGetRestrictedNftsCollectionResponse) GetRestrictedNftsCollection() bool {
	if m != nil {
		return m.RestrictedNftsCollection
	}
	return false
}

// QueryGetOpenedNftsCollectionRequest
type QueryGetOpenedNftsCollectionRequest struct {
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetOpenedNftsCollectionRequest) Reset()         { *m = QueryGetOpenedNftsCollectionRequest{} }
func (m *QueryGetOpenedNftsCollectionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOpenedNftsCollectionRequest) ProtoMessage()    {}
func (*QueryGetOpenedNftsCollectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{20}
}
func (m *QueryGetOpenedNftsCollectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOpenedNftsCollectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOpenedNftsCollectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOpenedNftsCollectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOpenedNftsCollectionRequest.Merge(m, src)
}
func (m *QueryGetOpenedNftsCollectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOpenedNftsCollectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOpenedNftsCollectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOpenedNftsCollectionRequest proto.InternalMessageInfo

func (m *QueryGetOpenedNftsCollectionRequest) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

// QueryGetOpenedNftsCollectionResponse
type QueryGetOpenedNftsCollectionResponse struct {
	Index                []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	OpenedNftsCollection bool   `protobuf:"varint,2,opt,name=opened_nfts_collection,json=openedNftsCollection,proto3" json:"opened_nfts_collection,omitempty"`
}

func (m *QueryGetOpenedNftsCollectionResponse) Reset()         { *m = QueryGetOpenedNftsCollectionResponse{} }
func (m *QueryGetOpenedNftsCollectionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOpenedNftsCollectionResponse) ProtoMessage()    {}
func (*QueryGetOpenedNftsCollectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{21}
}
func (m *QueryGetOpenedNftsCollectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOpenedNftsCollectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOpenedNftsCollectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOpenedNftsCollectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOpenedNftsCollectionResponse.Merge(m, src)
}
func (m *QueryGetOpenedNftsCollectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOpenedNftsCollectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOpenedNftsCollectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOpenedNftsCollectionResponse proto.InternalMessageInfo

func (m *QueryGetOpenedNftsCollectionResponse) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *QueryGetOpenedNftsCollectionResponse) GetOpenedNftsCollection() bool {
	if m != nil {
		return m.OpenedNftsCollection
	}
	return false
}

// QueryGetNftCollectionOwnerRequest
type QueryGetNftCollectionOwnerRequest struct {
	Index []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNftCollectionOwnerRequest) Reset()         { *m = QueryGetNftCollectionOwnerRequest{} }
func (m *QueryGetNftCollectionOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionOwnerRequest) ProtoMessage()    {}
func (*QueryGetNftCollectionOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{22}
}
func (m *QueryGetNftCollectionOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionOwnerRequest.Merge(m, src)
}
func (m *QueryGetNftCollectionOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionOwnerRequest proto.InternalMessageInfo

func (m *QueryGetNftCollectionOwnerRequest) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

// QueryGetNftCollectionOwnerResponse
type QueryGetNftCollectionOwnerResponse struct {
	Index              []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	NftCollectionOwner string `protobuf:"bytes,2,opt,name=nft_collection_owner,json=nftCollectionOwner,proto3" json:"nft_collection_owner,omitempty"`
}

func (m *QueryGetNftCollectionOwnerResponse) Reset()         { *m = QueryGetNftCollectionOwnerResponse{} }
func (m *QueryGetNftCollectionOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftCollectionOwnerResponse) ProtoMessage()    {}
func (*QueryGetNftCollectionOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_077c47d63799487f, []int{23}
}
func (m *QueryGetNftCollectionOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftCollectionOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftCollectionOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftCollectionOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftCollectionOwnerResponse.Merge(m, src)
}
func (m *QueryGetNftCollectionOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftCollectionOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftCollectionOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftCollectionOwnerResponse proto.InternalMessageInfo

func (m *QueryGetNftCollectionOwnerResponse) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *QueryGetNftCollectionOwnerResponse) GetNftCollectionOwner() string {
	if m != nil {
		return m.NftCollectionOwner
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mantrachain.token.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mantrachain.token.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetNftCollectionRequest)(nil), "mantrachain.token.v1.QueryGetNftCollectionRequest")
	proto.RegisterType((*QueryGetNftCollectionResponse)(nil), "mantrachain.token.v1.QueryGetNftCollectionResponse")
	proto.RegisterType((*QueryGetIsApprovedForAllNftsRequest)(nil), "mantrachain.token.v1.QueryGetIsApprovedForAllNftsRequest")
	proto.RegisterType((*QueryGetIsApprovedForAllNftsResponse)(nil), "mantrachain.token.v1.QueryGetIsApprovedForAllNftsResponse")
	proto.RegisterType((*QueryGetNftApprovedRequest)(nil), "mantrachain.token.v1.QueryGetNftApprovedRequest")
	proto.RegisterType((*QueryGetNftApprovedResponse)(nil), "mantrachain.token.v1.QueryGetNftApprovedResponse")
	proto.RegisterType((*QueryGetNftRequest)(nil), "mantrachain.token.v1.QueryGetNftRequest")
	proto.RegisterType((*QueryGetNftResponse)(nil), "mantrachain.token.v1.QueryGetNftResponse")
	proto.RegisterType((*QueryGetNftCollectionsByCreatorRequest)(nil), "mantrachain.token.v1.QueryGetNftCollectionsByCreatorRequest")
	proto.RegisterType((*QueryGetNftCollectionsByCreatorResponse)(nil), "mantrachain.token.v1.QueryGetNftCollectionsByCreatorResponse")
	proto.RegisterType((*QueryGetAllNftCollectionsRequest)(nil), "mantrachain.token.v1.QueryGetAllNftCollectionsRequest")
	proto.RegisterType((*QueryGetAllNftCollectionsResponse)(nil), "mantrachain.token.v1.QueryGetAllNftCollectionsResponse")
	proto.RegisterType((*QueryGetAllCollectionNftsRequest)(nil), "mantrachain.token.v1.QueryGetAllCollectionNftsRequest")
	proto.RegisterType((*QueryGetAllCollectionNftsResponse)(nil), "mantrachain.token.v1.QueryGetAllCollectionNftsResponse")
	proto.RegisterType((*QueryGetSoulBondedNftsCollectionRequest)(nil), "mantrachain.token.v1.QueryGetSoulBondedNftsCollectionRequest")
	proto.RegisterType((*QueryGetSoulBondedNftsCollectionResponse)(nil), "mantrachain.token.v1.QueryGetSoulBondedNftsCollectionResponse")
	proto.RegisterType((*QueryGetRestrictedNftsCollectionRequest)(nil), "mantrachain.token.v1.QueryGetRestrictedNftsCollectionRequest")
	proto.RegisterType((*QueryGetRestrictedNftsCollectionResponse)(nil), "mantrachain.token.v1.QueryGetRestrictedNftsCollectionResponse")
	proto.RegisterType((*QueryGetOpenedNftsCollectionRequest)(nil), "mantrachain.token.v1.QueryGetOpenedNftsCollectionRequest")
	proto.RegisterType((*QueryGetOpenedNftsCollectionResponse)(nil), "mantrachain.token.v1.QueryGetOpenedNftsCollectionResponse")
	proto.RegisterType((*QueryGetNftCollectionOwnerRequest)(nil), "mantrachain.token.v1.QueryGetNftCollectionOwnerRequest")
	proto.RegisterType((*QueryGetNftCollectionOwnerResponse)(nil), "mantrachain.token.v1.QueryGetNftCollectionOwnerResponse")
}

func init() { proto.RegisterFile("mantrachain/token/v1/query.proto", fileDescriptor_077c47d63799487f) }

var fileDescriptor_077c47d63799487f = []byte{
	// 1310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xd8, 0x49, 0x48, 0xa7, 0x6d, 0xa0, 0x0f, 0xab, 0xb8, 0xdb, 0x60, 0xd2, 0x4d, 0x94,
	0xa6, 0x85, 0xec, 0xe6, 0x8b, 0xb4, 0xf9, 0xe8, 0x47, 0x1c, 0x91, 0x52, 0x20, 0x49, 0x31, 0x5f,
	0x12, 0x07, 0xa2, 0x8d, 0x3d, 0x71, 0x97, 0x6e, 0x76, 0xdc, 0xdd, 0x4d, 0x48, 0x64, 0x19, 0x10,
	0xdc, 0x38, 0x21, 0x71, 0xe6, 0xce, 0x81, 0x03, 0x37, 0xa4, 0x1e, 0x38, 0xe7, 0x84, 0x82, 0x2a,
	0x21, 0xc4, 0x01, 0x95, 0x04, 0x89, 0x0b, 0x12, 0xff, 0x02, 0xf2, 0xec, 0xac, 0x77, 0x27, 0xde,
	0x0f, 0xdb, 0x10, 0x2e, 0x96, 0x67, 0x77, 0xde, 0x7b, 0xbf, 0xdf, 0x9b, 0x79, 0x6f, 0x7e, 0xb3,
	0x78, 0x70, 0x4b, 0x33, 0x1d, 0x4b, 0x2b, 0xde, 0xd7, 0x74, 0x53, 0x75, 0xe8, 0x03, 0x62, 0xaa,
	0x3b, 0x13, 0xea, 0xc3, 0x6d, 0x62, 0xed, 0x29, 0x15, 0x8b, 0x3a, 0x14, 0x32, 0x81, 0x19, 0x0a,
	0x9b, 0xa1, 0xec, 0x4c, 0x48, 0xe7, 0xb4, 0x2d, 0xdd, 0xa4, 0x2a, 0xfb, 0x75, 0x27, 0x4a, 0x99,
	0x32, 0x2d, 0x53, 0xf6, 0x57, 0xad, 0xff, 0xe3, 0x4f, 0x07, 0xca, 0x94, 0x96, 0x0d, 0xa2, 0x6a,
	0x15, 0x5d, 0xd5, 0x4c, 0x93, 0x3a, 0x9a, 0xa3, 0x53, 0xd3, 0xe6, 0x6f, 0xaf, 0x16, 0xa9, 0xbd,
	0x45, 0x6d, 0x75, 0x43, 0xb3, 0x89, 0x1b, 0x55, 0xdd, 0x99, 0xd8, 0x20, 0x8e, 0x36, 0xa1, 0x56,
	0xb4, 0xb2, 0x6e, 0xb2, 0xc9, 0x7c, 0xee, 0xa5, 0x50, 0xa8, 0x15, 0xcd, 0xd2, 0xb6, 0x3c, 0x77,
	0xb9, 0xd0, 0x29, 0xe6, 0xa6, 0xc3, 0xdf, 0x5f, 0x89, 0x7a, 0xbf, 0x5e, 0xa4, 0x86, 0x41, 0x8a,
	0x7e, 0x34, 0x39, 0x83, 0xe1, 0xcd, 0x3a, 0x9e, 0x7b, 0xcc, 0x7f, 0x81, 0x3c, 0xdc, 0x26, 0xb6,
	0x23, 0xbf, 0x8b, 0x9f, 0x15, 0x9e, 0xda, 0x15, 0x6a, 0xda, 0x04, 0x6e, 0xe1, 0x5e, 0x17, 0x47,
	0x16, 0x0d, 0xa2, 0xd1, 0xd3, 0x93, 0x03, 0x4a, 0x58, 0xd2, 0x14, 0xd7, 0x2a, 0x7f, 0x6a, 0xff,
	0xb7, 0x17, 0xba, 0xbe, 0xf9, 0xf3, 0xbb, 0xab, 0xa8, 0xc0, 0xcd, 0xe4, 0x57, 0xf1, 0x00, 0xf3,
	0x7b, 0x87, 0x38, 0xab, 0x9b, 0xce, 0x52, 0x03, 0x0c, 0x8f, 0x0b, 0x59, 0xfc, 0x54, 0xd1, 0x22,
	0x9a, 0x43, 0x2d, 0x16, 0xe1, 0x54, 0xc1, 0x1b, 0x42, 0x3f, 0x4e, 0xe9, 0xa5, 0x6c, 0x8a, 0x3d,
	0x4c, 0xe9, 0x25, 0xf9, 0x01, 0x7e, 0x3e, 0xc2, 0x13, 0xc7, 0xfa, 0x1a, 0xee, 0x17, 0x09, 0x73,
	0xcc, 0x43, 0xe1, 0x98, 0x45, 0x27, 0x67, 0xcd, 0xe0, 0x50, 0x7e, 0x0f, 0x0f, 0x79, 0xc1, 0xee,
	0xda, 0x8b, 0x95, 0x8a, 0x45, 0x77, 0x48, 0x69, 0x99, 0x5a, 0x8b, 0x86, 0xb1, 0xba, 0xe9, 0x78,
	0x59, 0x83, 0x0c, 0xee, 0xa1, 0x1f, 0x99, 0xc4, 0xc3, 0xee, 0x0e, 0x40, 0xc2, 0x7d, 0xb4, 0x42,
	0x2c, 0x46, 0xca, 0xc5, 0xdf, 0x18, 0xcb, 0x1f, 0xe0, 0xe1, 0x78, 0xc7, 0x9c, 0x4c, 0xd0, 0x07,
	0x12, 0x7d, 0xd4, 0xdf, 0x69, 0xdc, 0x92, 0xf9, 0xef, 0x2b, 0x34, 0xc6, 0xf2, 0xa7, 0x08, 0x4b,
	0x81, 0x34, 0x79, 0x11, 0x3c, 0xc0, 0x63, 0x18, 0xfc, 0xfc, 0xac, 0x8b, 0x99, 0x3f, 0xe7, 0xbf,
	0x59, 0xe2, 0x6b, 0x30, 0x84, 0xcf, 0x06, 0xa6, 0x37, 0x96, 0xe3, 0x8c, 0xff, 0xf0, 0x6e, 0x89,
	0x2f, 0x54, 0xba, 0xb1, 0x50, 0x5f, 0x23, 0x7c, 0x31, 0x14, 0x02, 0xa7, 0xf6, 0x3f, 0x60, 0x10,
	0x52, 0xd4, 0x3d, 0x98, 0xae, 0xa7, 0xaf, 0x91, 0xa2, 0x5d, 0x5e, 0x00, 0x2e, 0xbc, 0x93, 0xcf,
	0x4c, 0x77, 0x23, 0x33, 0x79, 0x5e, 0x64, 0x5e, 0x64, 0x9e, 0x90, 0x17, 0x71, 0xda, 0xdc, 0x74,
	0xf8, 0x6e, 0xbd, 0x10, 0xb9, 0x5b, 0x0b, 0xf5, 0x59, 0xf2, 0x17, 0x08, 0x8f, 0x84, 0xd6, 0x81,
	0x9d, 0xdf, 0xe3, 0xe0, 0x92, 0x6b, 0x6b, 0x19, 0x63, 0xbf, 0x0b, 0x31, 0xe8, 0xa7, 0x27, 0x47,
	0x14, 0xb7, 0x65, 0x29, 0xf5, 0x96, 0xa5, 0xb8, 0x8d, 0x92, 0xb7, 0x2c, 0xe5, 0x9e, 0x56, 0x26,
	0xdc, 0x6b, 0x21, 0x60, 0x29, 0xff, 0x8a, 0xf0, 0xe5, 0x44, 0x30, 0x9c, 0x65, 0x34, 0x9a, 0x37,
	0xf0, 0xd3, 0x62, 0xe1, 0xda, 0xd9, 0xd4, 0x60, 0xba, 0xd5, 0xca, 0xed, 0x17, 0x2a, 0xd7, 0x86,
	0x3b, 0x02, 0xb7, 0x34, 0xe3, 0x76, 0x39, 0x91, 0x9b, 0x0b, 0x52, 0x20, 0xf7, 0x21, 0x1e, 0xf4,
	0xb8, 0xb9, 0xd5, 0x19, 0x88, 0xe2, 0xa5, 0x58, 0x4c, 0x24, 0xea, 0x38, 0x91, 0x8f, 0x10, 0xbe,
	0x14, 0x13, 0x8c, 0xa7, 0x30, 0x24, 0x51, 0xe8, 0xbf, 0x4a, 0x54, 0xaa, 0xf3, 0x44, 0xfd, 0x80,
	0x84, 0x4c, 0xf9, 0x31, 0x82, 0xad, 0xf2, 0x24, 0xea, 0x6b, 0x39, 0x64, 0xa9, 0x3b, 0xc9, 0xfe,
	0xdf, 0x62, 0xf6, 0x8f, 0x13, 0x38, 0xc1, 0xbe, 0x35, 0x86, 0xbb, 0xcd, 0x4d, 0xc7, 0xce, 0xa6,
	0xd9, 0x32, 0xc6, 0xd4, 0x3e, 0x9b, 0x76, 0x6c, 0xc9, 0xba, 0x3b, 0x5f, 0xb2, 0x5b, 0x7e, 0xdd,
	0xbe, 0x45, 0xb7, 0x8d, 0x3c, 0x35, 0x4b, 0xa4, 0x54, 0x67, 0xdb, 0x7c, 0x42, 0x67, 0x70, 0x8f,
	0x6e, 0x96, 0xc8, 0x2e, 0x63, 0x7a, 0xa6, 0xe0, 0x0e, 0xe4, 0x4f, 0xf0, 0x68, 0xb2, 0x03, 0x9e,
	0xb8, 0x50, 0x0f, 0x70, 0x03, 0x5f, 0xb4, 0xe9, 0xb6, 0xb1, 0xbe, 0xc1, 0x4c, 0xd7, 0xeb, 0xfc,
	0x82, 0x67, 0xb7, 0x7b, 0xb0, 0x65, 0xed, 0x08, 0xe7, 0x41, 0x06, 0x05, 0x62, 0x3b, 0x96, 0x5e,
	0x74, 0xda, 0x63, 0xf0, 0xb1, 0xcf, 0x20, 0xda, 0x41, 0x2c, 0x83, 0x05, 0x2c, 0x59, 0x0d, 0xcb,
	0x28, 0x02, 0x56, 0x84, 0x6f, 0x79, 0xde, 0x97, 0x18, 0x6b, 0x15, 0x62, 0xb6, 0x07, 0xde, 0xf2,
	0x65, 0x44, 0xb8, 0x71, 0x2c, 0xf0, 0x69, 0x7c, 0x9e, 0x32, 0xab, 0x08, 0xd0, 0x19, 0x1a, 0xe2,
	0x53, 0x9e, 0xf5, 0x8b, 0x44, 0x68, 0x2c, 0x6b, 0x75, 0xd1, 0x13, 0x0f, 0xd7, 0xc0, 0x72, 0x9c,
	0x69, 0x2c, 0xd8, 0x71, 0x9c, 0x11, 0x9b, 0xde, 0xba, 0x2b, 0xb9, 0xdc, 0x72, 0x02, 0xb3, 0xc9,
	0xdf, 0xe4, 0x5f, 0x80, 0x7b, 0x58, 0x38, 0xf8, 0x1c, 0xe1, 0x5e, 0x57, 0x9b, 0xc2, 0x68, 0x78,
	0x6d, 0x35, 0x4b, 0x61, 0xe9, 0x4a, 0x0b, 0x33, 0x5d, 0xc4, 0xf2, 0xf0, 0x67, 0x8f, 0xff, 0xf8,
	0x2a, 0x95, 0x83, 0x01, 0x35, 0x46, 0xc2, 0xc3, 0x23, 0xc4, 0x15, 0x87, 0xc0, 0x1d, 0x26, 0x63,
	0xe2, 0x44, 0xc8, 0x65, 0x69, 0xaa, 0x2d, 0x1b, 0x8e, 0x72, 0x9e, 0xa1, 0x7c, 0x19, 0xa6, 0xd4,
	0xa8, 0x5b, 0xc2, 0x98, 0x9f, 0x5d, 0xb5, 0xca, 0x3b, 0x5b, 0x4d, 0xad, 0xea, 0xa5, 0x1a, 0x3c,
	0x46, 0x5c, 0xc1, 0x47, 0x9c, 0xef, 0xb0, 0xd0, 0x06, 0xa4, 0x26, 0x8d, 0x22, 0xdd, 0xe8, 0xd0,
	0x9a, 0x53, 0x9b, 0x61, 0xd4, 0xc6, 0x41, 0x69, 0x8f, 0x1a, 0x7c, 0x8f, 0xf0, 0x79, 0x16, 0xa3,
	0xe9, 0xb0, 0x85, 0x99, 0x78, 0x44, 0x51, 0x52, 0x40, 0xba, 0xd6, 0xb6, 0x1d, 0xe7, 0xf0, 0x12,
	0xe3, 0x30, 0x02, 0xc3, 0xad, 0x70, 0x80, 0x6f, 0x11, 0xee, 0xf3, 0xd6, 0x23, 0x76, 0x53, 0x0b,
	0xf2, 0x36, 0x76, 0x53, 0x8b, 0x72, 0x54, 0x7e, 0x9d, 0xe1, 0x79, 0x05, 0x96, 0x22, 0xf1, 0xa8,
	0xd5, 0xe6, 0x83, 0xb0, 0x26, 0x3c, 0xd4, 0x4b, 0x7c, 0xfb, 0xfc, 0x88, 0xf0, 0x33, 0x1e, 0x5c,
	0xef, 0x26, 0x00, 0xe3, 0x89, 0x60, 0x8e, 0xdd, 0x5b, 0xa4, 0x89, 0x36, 0x2c, 0x38, 0x8d, 0x77,
	0x18, 0x8d, 0x35, 0x58, 0x89, 0xa6, 0xe1, 0x5e, 0x09, 0x34, 0xc3, 0x6e, 0x83, 0xd0, 0xcf, 0x08,
	0x5f, 0x60, 0x61, 0xc3, 0xae, 0x6f, 0x30, 0x1b, 0x8f, 0x33, 0xe6, 0x2e, 0x29, 0xcd, 0x75, 0x62,
	0xca, 0xb9, 0xe6, 0x19, 0xd7, 0x05, 0x98, 0x6b, 0x81, 0xeb, 0x98, 0x66, 0x18, 0x6a, 0x95, 0xf5,
	0xd0, 0x9a, 0x5a, 0xf5, 0x2e, 0x95, 0x35, 0xf8, 0x29, 0x50, 0x12, 0xa2, 0x02, 0x6a, 0xa1, 0x24,
	0x42, 0x35, 0x5f, 0x0b, 0x25, 0x11, 0x2e, 0xb5, 0xe4, 0x65, 0xc6, 0xe7, 0x36, 0xdc, 0xfc, 0x77,
	0x5b, 0x10, 0x7e, 0x47, 0xfc, 0xa3, 0x41, 0x94, 0x46, 0x81, 0x84, 0xfe, 0x93, 0x20, 0x8e, 0xa4,
	0x9b, 0x9d, 0x9a, 0x73, 0xa2, 0x8b, 0x8c, 0xe8, 0x3c, 0xcc, 0x86, 0x13, 0x8d, 0x11, 0x48, 0x6a,
	0x95, 0x1d, 0x8f, 0x35, 0x78, 0xe2, 0x71, 0x8c, 0x52, 0x31, 0x49, 0x1c, 0x13, 0xe4, 0x53, 0x12,
	0xc7, 0x24, 0xf1, 0x24, 0xdf, 0x66, 0x1c, 0xe7, 0xe0, 0x7a, 0x38, 0xc7, 0x68, 0x09, 0xd5, 0xa0,
	0x78, 0xe0, 0xd5, 0x5c, 0x98, 0xd6, 0x49, 0xaa, 0xb9, 0x18, 0x71, 0x95, 0x54, 0x73, 0x71, 0xd2,
	0x4a, 0x5e, 0x60, 0xb4, 0x66, 0x60, 0x3a, 0x9c, 0x56, 0xb8, 0xc0, 0x6a, 0x50, 0xda, 0x47, 0xf8,
	0xb9, 0xe6, 0x63, 0x95, 0xe9, 0x17, 0xb8, 0xd6, 0xc6, 0x99, 0x18, 0x14, 0x5f, 0xd2, 0xf5, 0xf6,
	0x0d, 0x39, 0x99, 0x39, 0x46, 0x66, 0x1a, 0x26, 0xd5, 0x16, 0x3e, 0x24, 0xba, 0x02, 0xcc, 0xa3,
	0x92, 0x5f, 0xd9, 0x3f, 0xcc, 0xa1, 0x83, 0xc3, 0x1c, 0x7a, 0x72, 0x98, 0x43, 0x5f, 0x1e, 0xe5,
	0xba, 0x0e, 0x8e, 0x72, 0x5d, 0xbf, 0x1c, 0xe5, 0xba, 0xde, 0x9f, 0x2a, 0xeb, 0xce, 0xfd, 0xed,
	0x0d, 0xa5, 0x48, 0xb7, 0xd4, 0x95, 0xc5, 0xd5, 0xb7, 0x0b, 0x8b, 0x63, 0xcb, 0xba, 0xa9, 0x99,
	0x45, 0x22, 0x84, 0xd9, 0xe5, 0x81, 0x9c, 0xbd, 0x0a, 0xb1, 0x37, 0x7a, 0xd9, 0x67, 0xca, 0xa9,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xcd, 0xd7, 0x1f, 0xc1, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// QueryNftCollection
	QueryNftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error)
	// QueryNftCollectionsByCreator
	QueryNftCollectionsByCreator(ctx context.Context, in *QueryGetNftCollectionsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionsByCreatorResponse, error)
	// QueryAllNftCollections
	QueryAllNftCollections(ctx context.Context, in *QueryGetAllNftCollectionsRequest, opts ...grpc.CallOption) (*QueryGetAllNftCollectionsResponse, error)
	// QueryNft
	QueryNft(ctx context.Context, in *QueryGetNftRequest, opts ...grpc.CallOption) (*QueryGetNftResponse, error)
	// QueryNftApproved
	QueryNftApproved(ctx context.Context, in *QueryGetNftApprovedRequest, opts ...grpc.CallOption) (*QueryGetNftApprovedResponse, error)
	// QueryIsApprovedForAllNfts
	QueryIsApprovedForAllNfts(ctx context.Context, in *QueryGetIsApprovedForAllNftsRequest, opts ...grpc.CallOption) (*QueryGetIsApprovedForAllNftsResponse, error)
	// QueryAllCollectionNfts
	QueryAllCollectionNfts(ctx context.Context, in *QueryGetAllCollectionNftsRequest, opts ...grpc.CallOption) (*QueryGetAllCollectionNftsResponse, error)
	// Queries a list of SoulBondedNftsCollection items.
	QuerySoulBondedNftsCollection(ctx context.Context, in *QueryGetSoulBondedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetSoulBondedNftsCollectionResponse, error)
	// Queries a list of RestrictedNftsCollection items.
	QueryRestrictedNftsCollection(ctx context.Context, in *QueryGetRestrictedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetRestrictedNftsCollectionResponse, error)
	// Queries a list of OpenedNftsCollection items.
	QueryOpenedNftsCollection(ctx context.Context, in *QueryGetOpenedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetOpenedNftsCollectionResponse, error)
	// Queries a list of NftCollectionOwner items.
	QueryNftCollectionOwner(ctx context.Context, in *QueryGetNftCollectionOwnerRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftCollection(ctx context.Context, in *QueryGetNftCollectionRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionResponse, error) {
	out := new(QueryGetNftCollectionResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryNftCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftCollectionsByCreator(ctx context.Context, in *QueryGetNftCollectionsByCreatorRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionsByCreatorResponse, error) {
	out := new(QueryGetNftCollectionsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryNftCollectionsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllNftCollections(ctx context.Context, in *QueryGetAllNftCollectionsRequest, opts ...grpc.CallOption) (*QueryGetAllNftCollectionsResponse, error) {
	out := new(QueryGetAllNftCollectionsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryAllNftCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNft(ctx context.Context, in *QueryGetNftRequest, opts ...grpc.CallOption) (*QueryGetNftResponse, error) {
	out := new(QueryGetNftResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftApproved(ctx context.Context, in *QueryGetNftApprovedRequest, opts ...grpc.CallOption) (*QueryGetNftApprovedResponse, error) {
	out := new(QueryGetNftApprovedResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryNftApproved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryIsApprovedForAllNfts(ctx context.Context, in *QueryGetIsApprovedForAllNftsRequest, opts ...grpc.CallOption) (*QueryGetIsApprovedForAllNftsResponse, error) {
	out := new(QueryGetIsApprovedForAllNftsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryIsApprovedForAllNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllCollectionNfts(ctx context.Context, in *QueryGetAllCollectionNftsRequest, opts ...grpc.CallOption) (*QueryGetAllCollectionNftsResponse, error) {
	out := new(QueryGetAllCollectionNftsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryAllCollectionNfts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySoulBondedNftsCollection(ctx context.Context, in *QueryGetSoulBondedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetSoulBondedNftsCollectionResponse, error) {
	out := new(QueryGetSoulBondedNftsCollectionResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QuerySoulBondedNftsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRestrictedNftsCollection(ctx context.Context, in *QueryGetRestrictedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetRestrictedNftsCollectionResponse, error) {
	out := new(QueryGetRestrictedNftsCollectionResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryRestrictedNftsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOpenedNftsCollection(ctx context.Context, in *QueryGetOpenedNftsCollectionRequest, opts ...grpc.CallOption) (*QueryGetOpenedNftsCollectionResponse, error) {
	out := new(QueryGetOpenedNftsCollectionResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryOpenedNftsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryNftCollectionOwner(ctx context.Context, in *QueryGetNftCollectionOwnerRequest, opts ...grpc.CallOption) (*QueryGetNftCollectionOwnerResponse, error) {
	out := new(QueryGetNftCollectionOwnerResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.token.v1.Query/QueryNftCollectionOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// QueryNftCollection
	QueryNftCollection(context.Context, *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error)
	// QueryNftCollectionsByCreator
	QueryNftCollectionsByCreator(context.Context, *QueryGetNftCollectionsByCreatorRequest) (*QueryGetNftCollectionsByCreatorResponse, error)
	// QueryAllNftCollections
	QueryAllNftCollections(context.Context, *QueryGetAllNftCollectionsRequest) (*QueryGetAllNftCollectionsResponse, error)
	// QueryNft
	QueryNft(context.Context, *QueryGetNftRequest) (*QueryGetNftResponse, error)
	// QueryNftApproved
	QueryNftApproved(context.Context, *QueryGetNftApprovedRequest) (*QueryGetNftApprovedResponse, error)
	// QueryIsApprovedForAllNfts
	QueryIsApprovedForAllNfts(context.Context, *QueryGetIsApprovedForAllNftsRequest) (*QueryGetIsApprovedForAllNftsResponse, error)
	// QueryAllCollectionNfts
	QueryAllCollectionNfts(context.Context, *QueryGetAllCollectionNftsRequest) (*QueryGetAllCollectionNftsResponse, error)
	// Queries a list of SoulBondedNftsCollection items.
	QuerySoulBondedNftsCollection(context.Context, *QueryGetSoulBondedNftsCollectionRequest) (*QueryGetSoulBondedNftsCollectionResponse, error)
	// Queries a list of RestrictedNftsCollection items.
	QueryRestrictedNftsCollection(context.Context, *QueryGetRestrictedNftsCollectionRequest) (*QueryGetRestrictedNftsCollectionResponse, error)
	// Queries a list of OpenedNftsCollection items.
	QueryOpenedNftsCollection(context.Context, *QueryGetOpenedNftsCollectionRequest) (*QueryGetOpenedNftsCollectionResponse, error)
	// Queries a list of NftCollectionOwner items.
	QueryNftCollectionOwner(context.Context, *QueryGetNftCollectionOwnerRequest) (*QueryGetNftCollectionOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryNftCollection(ctx context.Context, req *QueryGetNftCollectionRequest) (*QueryGetNftCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftCollection not implemented")
}
func (*UnimplementedQueryServer) QueryNftCollectionsByCreator(ctx context.Context, req *QueryGetNftCollectionsByCreatorRequest) (*QueryGetNftCollectionsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftCollectionsByCreator not implemented")
}
func (*UnimplementedQueryServer) QueryAllNftCollections(ctx context.Context, req *QueryGetAllNftCollectionsRequest) (*QueryGetAllNftCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllNftCollections not implemented")
}
func (*UnimplementedQueryServer) QueryNft(ctx context.Context, req *QueryGetNftRequest) (*QueryGetNftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNft not implemented")
}
func (*UnimplementedQueryServer) QueryNftApproved(ctx context.Context, req *QueryGetNftApprovedRequest) (*QueryGetNftApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftApproved not implemented")
}
func (*UnimplementedQueryServer) QueryIsApprovedForAllNfts(ctx context.Context, req *QueryGetIsApprovedForAllNftsRequest) (*QueryGetIsApprovedForAllNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIsApprovedForAllNfts not implemented")
}
func (*UnimplementedQueryServer) QueryAllCollectionNfts(ctx context.Context, req *QueryGetAllCollectionNftsRequest) (*QueryGetAllCollectionNftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllCollectionNfts not implemented")
}
func (*UnimplementedQueryServer) QuerySoulBondedNftsCollection(ctx context.Context, req *QueryGetSoulBondedNftsCollectionRequest) (*QueryGetSoulBondedNftsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySoulBondedNftsCollection not implemented")
}
func (*UnimplementedQueryServer) QueryRestrictedNftsCollection(ctx context.Context, req *QueryGetRestrictedNftsCollectionRequest) (*QueryGetRestrictedNftsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRestrictedNftsCollection not implemented")
}
func (*UnimplementedQueryServer) QueryOpenedNftsCollection(ctx context.Context, req *QueryGetOpenedNftsCollectionRequest) (*QueryGetOpenedNftsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOpenedNftsCollection not implemented")
}
func (*UnimplementedQueryServer) QueryNftCollectionOwner(ctx context.Context, req *QueryGetNftCollectionOwnerRequest) (*QueryGetNftCollectionOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNftCollectionOwner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryNftCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftCollection(ctx, req.(*QueryGetNftCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftCollectionsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftCollectionsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryNftCollectionsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftCollectionsByCreator(ctx, req.(*QueryGetNftCollectionsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllNftCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllNftCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllNftCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryAllNftCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllNftCollections(ctx, req.(*QueryGetAllNftCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNft(ctx, req.(*QueryGetNftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryNftApproved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftApproved(ctx, req.(*QueryGetNftApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryIsApprovedForAllNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIsApprovedForAllNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryIsApprovedForAllNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryIsApprovedForAllNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryIsApprovedForAllNfts(ctx, req.(*QueryGetIsApprovedForAllNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllCollectionNfts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllCollectionNftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllCollectionNfts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryAllCollectionNfts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllCollectionNfts(ctx, req.(*QueryGetAllCollectionNftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySoulBondedNftsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSoulBondedNftsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySoulBondedNftsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QuerySoulBondedNftsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySoulBondedNftsCollection(ctx, req.(*QueryGetSoulBondedNftsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRestrictedNftsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRestrictedNftsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRestrictedNftsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryRestrictedNftsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRestrictedNftsCollection(ctx, req.(*QueryGetRestrictedNftsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOpenedNftsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOpenedNftsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOpenedNftsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryOpenedNftsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOpenedNftsCollection(ctx, req.(*QueryGetOpenedNftsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryNftCollectionOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftCollectionOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryNftCollectionOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.token.v1.Query/QueryNftCollectionOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryNftCollectionOwner(ctx, req.(*QueryGetNftCollectionOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.token.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryNftCollection",
			Handler:    _Query_QueryNftCollection_Handler,
		},
		{
			MethodName: "QueryNftCollectionsByCreator",
			Handler:    _Query_QueryNftCollectionsByCreator_Handler,
		},
		{
			MethodName: "QueryAllNftCollections",
			Handler:    _Query_QueryAllNftCollections_Handler,
		},
		{
			MethodName: "QueryNft",
			Handler:    _Query_QueryNft_Handler,
		},
		{
			MethodName: "QueryNftApproved",
			Handler:    _Query_QueryNftApproved_Handler,
		},
		{
			MethodName: "QueryIsApprovedForAllNfts",
			Handler:    _Query_QueryIsApprovedForAllNfts_Handler,
		},
		{
			MethodName: "QueryAllCollectionNfts",
			Handler:    _Query_QueryAllCollectionNfts_Handler,
		},
		{
			MethodName: "QuerySoulBondedNftsCollection",
			Handler:    _Query_QuerySoulBondedNftsCollection_Handler,
		},
		{
			MethodName: "QueryRestrictedNftsCollection",
			Handler:    _Query_QueryRestrictedNftsCollection_Handler,
		},
		{
			MethodName: "QueryOpenedNftsCollection",
			Handler:    _Query_QueryOpenedNftsCollection_Handler,
		},
		{
			MethodName: "QueryNftCollectionOwner",
			Handler:    _Query_QueryNftCollectionOwner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/token/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NftCollection != nil {
		{
			size, err := m.NftCollection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIsApprovedForAllNftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIsApprovedForAllNftsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIsApprovedForAllNftsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIsApprovedForAllNftsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIsApprovedForAllNftsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIsApprovedForAllNftsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftApprovedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftApprovedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftApprovedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftApprovedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftApprovedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftApprovedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Approved) > 0 {
		for iNdEx := len(m.Approved) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Approved[iNdEx])
			copy(dAtA[i:], m.Approved[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Approved[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nft != nil {
		{
			size, err := m.Nft.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionsByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionsByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionsByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionsByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionsByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionsByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftCollections) > 0 {
		for iNdEx := len(m.NftCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNftCollectionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNftCollectionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNftCollectionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllNftCollectionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllNftCollectionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllNftCollectionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NftCollections) > 0 {
		for iNdEx := len(m.NftCollections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftCollections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCollectionNftsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCollectionNftsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCollectionNftsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllCollectionNftsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllCollectionNftsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllCollectionNftsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nfts) > 0 {
		for iNdEx := len(m.Nfts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nfts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSoulBondedNftsCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSoulBondedNftsCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSoulBondedNftsCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSoulBondedNftsCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSoulBondedNftsCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSoulBondedNftsCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SoulBondedNftsCollection {
		i--
		if m.SoulBondedNftsCollection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRestrictedNftsCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRestrictedNftsCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRestrictedNftsCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRestrictedNftsCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRestrictedNftsCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRestrictedNftsCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RestrictedNftsCollection {
		i--
		if m.RestrictedNftsCollection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOpenedNftsCollectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOpenedNftsCollectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOpenedNftsCollectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOpenedNftsCollectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOpenedNftsCollectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOpenedNftsCollectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OpenedNftsCollection {
		i--
		if m.OpenedNftsCollection {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftCollectionOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftCollectionOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftCollectionOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftCollectionOwner) > 0 {
		i -= len(m.NftCollectionOwner)
		copy(dAtA[i:], m.NftCollectionOwner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftCollectionOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNftCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NftCollection != nil {
		l = m.NftCollection.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIsApprovedForAllNftsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIsApprovedForAllNftsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Approved {
		n += 2
	}
	return n
}

func (m *QueryGetNftApprovedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftApprovedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Approved) > 0 {
		for _, s := range m.Approved {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetNftRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nft != nil {
		l = m.Nft.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftCollectionsByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftCollectionsByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.NftCollections) > 0 {
		for _, e := range m.NftCollections {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllNftCollectionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllNftCollectionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftCollections) > 0 {
		for _, e := range m.NftCollections {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCollectionNftsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllCollectionNftsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Nfts) > 0 {
		for _, e := range m.Nfts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSoulBondedNftsCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSoulBondedNftsCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SoulBondedNftsCollection {
		n += 2
	}
	return n
}

func (m *QueryGetRestrictedNftsCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRestrictedNftsCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RestrictedNftsCollection {
		n += 2
	}
	return n
}

func (m *QueryGetOpenedNftsCollectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOpenedNftsCollectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OpenedNftsCollection {
		n += 2
	}
	return n
}

func (m *QueryGetNftCollectionOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftCollectionOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftCollectionOwner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCollection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NftCollection == nil {
				m.NftCollection = &NftCollection{}
			}
			if err := m.NftCollection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIsApprovedForAllNftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIsApprovedForAllNftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIsApprovedForAllNftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIsApprovedForAllNftsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIsApprovedForAllNftsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIsApprovedForAllNftsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftApprovedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftApprovedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftApprovedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftApprovedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftApprovedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftApprovedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approved = append(m.Approved, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nft", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nft == nil {
				m.Nft = &Nft{}
			}
			if err := m.Nft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionsByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionsByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionsByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionsByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionsByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionsByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftCollections = append(m.NftCollections, &NftCollection{})
			if err := m.NftCollections[len(m.NftCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNftCollectionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNftCollectionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNftCollectionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllNftCollectionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllNftCollectionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllNftCollectionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCollections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftCollections = append(m.NftCollections, &NftCollection{})
			if err := m.NftCollections[len(m.NftCollections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCollectionNftsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCollectionNftsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCollectionNftsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllCollectionNftsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllCollectionNftsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllCollectionNftsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nfts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nfts = append(m.Nfts, &Nft{})
			if err := m.Nfts[len(m.Nfts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSoulBondedNftsCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSoulBondedNftsCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSoulBondedNftsCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSoulBondedNftsCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSoulBondedNftsCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSoulBondedNftsCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoulBondedNftsCollection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoulBondedNftsCollection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRestrictedNftsCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRestrictedNftsCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRestrictedNftsCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRestrictedNftsCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRestrictedNftsCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRestrictedNftsCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictedNftsCollection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictedNftsCollection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOpenedNftsCollectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOpenedNftsCollectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOpenedNftsCollectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOpenedNftsCollectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOpenedNftsCollectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOpenedNftsCollectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenedNftsCollection", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenedNftsCollection = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftCollectionOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftCollectionOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftCollectionOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCollectionOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftCollectionOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
