// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/token/v1/nft_collection.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftCollection struct {
	Index    []byte                                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	Images   []*TokenImage                                 `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty" yaml:"images"`
	Url      string                                        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty" yaml:"url"`
	Links    []*TokenLink                                  `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty" yaml:"links"`
	Options  []*TokenOption                                `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty" yaml:"options"`
	Category string                                        `protobuf:"bytes,6,opt,name=category,proto3" json:"category,omitempty" yaml:"category"`
	Opened   bool                                          `protobuf:"varint,7,opt,name=opened,proto3" json:"opened,omitempty" yaml:"opened"`
	Owner    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,8,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty" yaml:"owner"`
	Creator  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,9,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
}

func (m *NftCollection) Reset()         { *m = NftCollection{} }
func (m *NftCollection) String() string { return proto.CompactTextString(m) }
func (*NftCollection) ProtoMessage()    {}
func (*NftCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9e853694fa05167, []int{0}
}
func (m *NftCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftCollection.Merge(m, src)
}
func (m *NftCollection) XXX_Size() int {
	return m.Size()
}
func (m *NftCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_NftCollection.DiscardUnknown(m)
}

var xxx_messageInfo_NftCollection proto.InternalMessageInfo

func (m *NftCollection) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *NftCollection) GetImages() []*TokenImage {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *NftCollection) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *NftCollection) GetLinks() []*TokenLink {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *NftCollection) GetOptions() []*TokenOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NftCollection) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *NftCollection) GetOpened() bool {
	if m != nil {
		return m.Opened
	}
	return false
}

func (m *NftCollection) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *NftCollection) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func init() {
	proto.RegisterType((*NftCollection)(nil), "mantrachain.token.v1.NftCollection")
}

func init() {
	proto.RegisterFile("mantrachain/token/v1/nft_collection.proto", fileDescriptor_e9e853694fa05167)
}

var fileDescriptor_e9e853694fa05167 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0xc0, 0x63, 0xd2, 0xfc, 0xe9, 0xd1, 0x16, 0x38, 0x3a, 0x9c, 0x3a, 0xd8, 0xee, 0x0d, 0x28,
	0x1d, 0x6a, 0xab, 0xb0, 0xb1, 0xc5, 0x19, 0x10, 0x22, 0xa2, 0x92, 0x85, 0x84, 0x84, 0x84, 0x90,
	0x7b, 0xbe, 0xba, 0x56, 0xec, 0x7b, 0xd1, 0xdd, 0xa5, 0x34, 0xdf, 0x82, 0x8f, 0xc1, 0x47, 0x61,
	0xec, 0xc0, 0xc0, 0x64, 0xa1, 0xe4, 0x1b, 0x78, 0x64, 0x42, 0x3e, 0x3b, 0xad, 0x87, 0x2a, 0x43,
	0x27, 0x9f, 0xde, 0xfb, 0xbd, 0xdf, 0xbb, 0xe7, 0x7b, 0xe8, 0x24, 0x8f, 0x84, 0x96, 0x11, 0xbb,
	0x8a, 0x52, 0xe1, 0x6b, 0x98, 0x71, 0xe1, 0x5f, 0x9f, 0xf9, 0xe2, 0x52, 0x7f, 0x63, 0x90, 0x65,
	0x9c, 0xe9, 0x14, 0x84, 0x37, 0x97, 0xa0, 0x01, 0x1f, 0xb6, 0x50, 0xcf, 0xa0, 0xde, 0xf5, 0xd9,
	0xd1, 0x61, 0x02, 0x09, 0x18, 0xc0, 0xaf, 0x4e, 0x35, 0x7b, 0x74, 0xfc, 0xa0, 0x96, 0x41, 0x9e,
	0x6f, 0x74, 0xf4, 0xf7, 0x0e, 0xda, 0xff, 0x78, 0xa9, 0x27, 0x77, 0x6d, 0xf0, 0x2b, 0xd4, 0x4b,
	0x45, 0xcc, 0x6f, 0x88, 0xe5, 0x5a, 0xa3, 0xbd, 0xe0, 0x79, 0x59, 0x38, 0x7b, 0xcb, 0x28, 0xcf,
	0xde, 0x52, 0x13, 0xa6, 0x61, 0x9d, 0xc6, 0x1f, 0x50, 0x3f, 0xcd, 0xa3, 0x84, 0x2b, 0xf2, 0xc4,
	0xed, 0x8e, 0x9e, 0xbe, 0x76, 0xbd, 0x87, 0x6e, 0xe6, 0x7d, 0xaa, 0x0e, 0xef, 0x2b, 0x30, 0x78,
	0x51, 0x16, 0xce, 0x7e, 0xa3, 0x32, 0x95, 0x34, 0x6c, 0x14, 0xd8, 0x45, 0xdd, 0x85, 0xcc, 0x48,
	0xd7, 0xb5, 0x46, 0xbb, 0xc1, 0x41, 0x59, 0x38, 0xa8, 0xe6, 0x16, 0x32, 0xa3, 0x61, 0x95, 0xc2,
	0xef, 0x50, 0x2f, 0x4b, 0xc5, 0x4c, 0x91, 0x1d, 0xd3, 0xcd, 0xd9, 0xd2, 0x6d, 0x9a, 0x8a, 0x59,
	0xfb, 0xde, 0xa6, 0x8e, 0x86, 0x75, 0x3d, 0x3e, 0x47, 0x03, 0x98, 0x57, 0x93, 0x2a, 0xd2, 0x33,
	0xaa, 0xe3, 0x2d, 0xaa, 0x73, 0x43, 0x06, 0xb8, 0x2c, 0x9c, 0x83, 0x5a, 0xd6, 0xd4, 0xd2, 0x70,
	0x63, 0xc1, 0x3e, 0x1a, 0xb2, 0x48, 0xf3, 0x04, 0xe4, 0x92, 0xf4, 0xcd, 0x00, 0x2f, 0xcb, 0xc2,
	0x79, 0x56, 0xe3, 0x9b, 0x0c, 0x0d, 0xef, 0x20, 0x7c, 0x82, 0xfa, 0x30, 0xe7, 0x82, 0xc7, 0x64,
	0xe0, 0x5a, 0xa3, 0x61, 0xfb, 0xbf, 0xd4, 0x71, 0x1a, 0x36, 0x00, 0xfe, 0x8c, 0x7a, 0xf0, 0x5d,
	0x70, 0x49, 0x86, 0xe6, 0x31, 0xc6, 0xf7, 0x43, 0x99, 0x30, 0xfd, 0x57, 0x38, 0xa7, 0x49, 0xaa,
	0xaf, 0x16, 0x17, 0x1e, 0x83, 0xdc, 0x67, 0xa0, 0x72, 0x50, 0xcd, 0xe7, 0x54, 0xc5, 0x33, 0x5f,
	0x2f, 0xe7, 0x5c, 0x79, 0x63, 0xc6, 0xc6, 0x71, 0x2c, 0xb9, 0x52, 0x61, 0xed, 0xc3, 0x5f, 0xd1,
	0x80, 0x49, 0x1e, 0x69, 0x90, 0x64, 0xd7, 0xa8, 0x27, 0xf7, 0x23, 0x36, 0x89, 0x47, 0xc8, 0x37,
	0xce, 0x60, 0xfa, 0x73, 0x65, 0x5b, 0xbf, 0x56, 0xb6, 0x75, 0xbb, 0xb2, 0xad, 0xbf, 0x2b, 0xdb,
	0xfa, 0xb1, 0xb6, 0x3b, 0xb7, 0x6b, 0xbb, 0xf3, 0x67, 0x6d, 0x77, 0xbe, 0x78, 0x2d, 0xeb, 0x34,
	0xcd, 0xf9, 0xc4, 0x2c, 0x68, 0x7b, 0x59, 0x6f, 0x9a, 0x75, 0x35, 0x1d, 0x2e, 0xfa, 0x66, 0x57,
	0xdf, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x84, 0x5b, 0xe3, 0x27, 0x03, 0x00, 0x00,
}

func (this *NftCollection) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NftCollection)
	if !ok {
		that2, ok := that.(NftCollection)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	if this.Url != that1.Url {
		return false
	}
	if len(this.Links) != len(that1.Links) {
		return false
	}
	for i := range this.Links {
		if !this.Links[i].Equal(that1.Links[i]) {
			return false
		}
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if !this.Options[i].Equal(that1.Options[i]) {
			return false
		}
	}
	if this.Category != that1.Category {
		return false
	}
	if this.Opened != that1.Opened {
		return false
	}
	if !bytes.Equal(this.Owner, that1.Owner) {
		return false
	}
	if !bytes.Equal(this.Creator, that1.Creator) {
		return false
	}
	return true
}
func (m *NftCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintNftCollection(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNftCollection(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	if m.Opened {
		i--
		if m.Opened {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintNftCollection(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Links) > 0 {
		for iNdEx := len(m.Links) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Links[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintNftCollection(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNftCollection(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintNftCollection(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNftCollection(dAtA []byte, offset int, v uint64) int {
	offset -= sovNftCollection(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovNftCollection(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovNftCollection(uint64(l))
		}
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovNftCollection(uint64(l))
	}
	if len(m.Links) > 0 {
		for _, e := range m.Links {
			l = e.Size()
			n += 1 + l + sovNftCollection(uint64(l))
		}
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovNftCollection(uint64(l))
		}
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovNftCollection(uint64(l))
	}
	if m.Opened {
		n += 2
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNftCollection(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovNftCollection(uint64(l))
	}
	return n
}

func sovNftCollection(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNftCollection(x uint64) (n int) {
	return sovNftCollection(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNftCollection
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &TokenImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Links", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Links = append(m.Links, &TokenLink{})
			if err := m.Links[len(m.Links)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &TokenOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opened", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opened = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNftCollection
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNftCollection
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNftCollection(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNftCollection
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNftCollection(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNftCollection
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNftCollection
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNftCollection
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNftCollection
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNftCollection
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNftCollection        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNftCollection          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNftCollection = fmt.Errorf("proto: unexpected end of group")
)
