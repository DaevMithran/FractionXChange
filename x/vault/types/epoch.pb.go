// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/vault/v1/epoch.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Epoch struct {
	Index            []byte                                    `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	PrevEpochBlock   int64                                     `protobuf:"varint,2,opt,name=prev_epoch_block,json=prevEpochBlock,proto3" json:"prev_epoch_block,omitempty" yaml:"prev_epoch_block"`
	NextEpochBlock   int64                                     `protobuf:"varint,3,opt,name=next_epoch_block,json=nextEpochBlock,proto3" json:"next_epoch_block,omitempty" yaml:"next_epoch_block"`
	BlockStart       int64                                     `protobuf:"varint,4,opt,name=block_start,json=blockStart,proto3" json:"block_start,omitempty" yaml:"block_start"`
	BlockEnd         int64                                     `protobuf:"varint,5,opt,name=block_end,json=blockEnd,proto3" json:"block_end,omitempty" yaml:"block_end"`
	Staked           github_com_cosmos_cosmos_sdk_types.Dec    `protobuf:"bytes,6,opt,name=staked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"staked" yaml:"staked"`
	Rewards          []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,rep,name=rewards,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rewards" yaml:"rewards"`
	StartAt          int64                                     `protobuf:"varint,8,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty" yaml:"start_at"`
	EndAt            int64                                     `protobuf:"varint,9,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty" yaml:"end_at"`
	StakingChain     string                                    `protobuf:"bytes,10,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty" yaml:"staking_chain"`
	StakingValidator string                                    `protobuf:"bytes,11,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty" yaml:"staking_validator"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdf393959b44d469, []int{0}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Epoch) GetPrevEpochBlock() int64 {
	if m != nil {
		return m.PrevEpochBlock
	}
	return 0
}

func (m *Epoch) GetNextEpochBlock() int64 {
	if m != nil {
		return m.NextEpochBlock
	}
	return 0
}

func (m *Epoch) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *Epoch) GetBlockEnd() int64 {
	if m != nil {
		return m.BlockEnd
	}
	return 0
}

func (m *Epoch) GetRewards() []github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *Epoch) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *Epoch) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *Epoch) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *Epoch) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type LastEpochBlock struct {
	BlockHeight      int64  `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
	Creator          string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	StakingChain     string `protobuf:"bytes,3,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty" yaml:"staking_chain"`
	StakingValidator string `protobuf:"bytes,4,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty" yaml:"staking_validator"`
}

func (m *LastEpochBlock) Reset()         { *m = LastEpochBlock{} }
func (m *LastEpochBlock) String() string { return proto.CompactTextString(m) }
func (*LastEpochBlock) ProtoMessage()    {}
func (*LastEpochBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdf393959b44d469, []int{1}
}
func (m *LastEpochBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastEpochBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastEpochBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastEpochBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastEpochBlock.Merge(m, src)
}
func (m *LastEpochBlock) XXX_Size() int {
	return m.Size()
}
func (m *LastEpochBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_LastEpochBlock.DiscardUnknown(m)
}

var xxx_messageInfo_LastEpochBlock proto.InternalMessageInfo

func (m *LastEpochBlock) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *LastEpochBlock) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *LastEpochBlock) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *LastEpochBlock) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

func init() {
	proto.RegisterType((*Epoch)(nil), "mantrachain.vault.v1.Epoch")
	proto.RegisterType((*LastEpochBlock)(nil), "mantrachain.vault.v1.LastEpochBlock")
}

func init() { proto.RegisterFile("mantrachain/vault/v1/epoch.proto", fileDescriptor_fdf393959b44d469) }

var fileDescriptor_fdf393959b44d469 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6a, 0xdb, 0x4a,
	0x14, 0xb5, 0xe2, 0xd8, 0x4e, 0x26, 0x8e, 0x9f, 0x33, 0x31, 0x2f, 0x7a, 0x79, 0x0f, 0x8d, 0x99,
	0x45, 0x9e, 0x17, 0xad, 0x84, 0xdb, 0x45, 0x21, 0x50, 0x4a, 0x94, 0x06, 0x5a, 0xc8, 0x6a, 0x0a,
	0x2d, 0x74, 0x63, 0xc6, 0xd2, 0x60, 0x8b, 0xd8, 0x92, 0x91, 0x26, 0x6a, 0xb2, 0xef, 0x07, 0xf4,
	0x33, 0xfa, 0x29, 0x59, 0x66, 0x59, 0xba, 0x18, 0x8a, 0xf3, 0x07, 0x5a, 0x76, 0x55, 0xe6, 0x8e,
	0xe2, 0x28, 0xe9, 0xa6, 0xb4, 0x2b, 0xcd, 0x3d, 0xe7, 0xdc, 0x33, 0x57, 0xf7, 0x5e, 0x06, 0xf5,
	0xe7, 0x3c, 0x96, 0x29, 0x0f, 0xa6, 0x3c, 0x8a, 0xbd, 0x9c, 0x9f, 0xcf, 0xa4, 0x97, 0x0f, 0x3d,
	0xb1, 0x48, 0x82, 0xa9, 0xbb, 0x48, 0x13, 0x99, 0xe0, 0x5e, 0x45, 0xe1, 0x82, 0xc2, 0xcd, 0x87,
	0xfb, 0x4e, 0x90, 0x64, 0xf3, 0x24, 0xf3, 0xc6, 0x3c, 0x13, 0x5e, 0x3e, 0x1c, 0x0b, 0xc9, 0x87,
	0x5e, 0x90, 0x44, 0xb1, 0xc9, 0xda, 0xef, 0x4d, 0x92, 0x49, 0x02, 0x47, 0x4f, 0x9f, 0x0c, 0x4a,
	0x55, 0x03, 0x35, 0x4e, 0xb4, 0x37, 0x3e, 0x40, 0x8d, 0x28, 0x0e, 0xc5, 0x85, 0x6d, 0xf5, 0xad,
	0x41, 0xdb, 0xef, 0x16, 0x8a, 0xb4, 0x2f, 0xf9, 0x7c, 0x76, 0x48, 0x01, 0xa6, 0xcc, 0xd0, 0xf8,
	0x04, 0x75, 0x17, 0xa9, 0xc8, 0x47, 0x50, 0xd1, 0x68, 0x3c, 0x4b, 0x82, 0x33, 0x7b, 0xad, 0x6f,
	0x0d, 0xea, 0xfe, 0xbf, 0x85, 0x22, 0x7b, 0x26, 0xe5, 0xa1, 0x82, 0xb2, 0x8e, 0x86, 0xe0, 0x26,
	0x5f, 0x03, 0xda, 0x26, 0x16, 0x17, 0xf2, 0x9e, 0x4d, 0xfd, 0xa1, 0xcd, 0x43, 0x05, 0x65, 0x1d,
	0x0d, 0x55, 0x6c, 0x9e, 0xa1, 0x2d, 0x60, 0x46, 0x99, 0xe4, 0xa9, 0xb4, 0xd7, 0xc1, 0xe1, 0xef,
	0x42, 0x11, 0x6c, 0x1c, 0x2a, 0x24, 0x65, 0x08, 0xa2, 0x37, 0x3a, 0xc0, 0x43, 0xb4, 0x69, 0x38,
	0x11, 0x87, 0x76, 0x03, 0xd2, 0x7a, 0x85, 0x22, 0xdd, 0x6a, 0x9a, 0x88, 0x43, 0xca, 0x36, 0xe0,
	0x7c, 0x12, 0x87, 0xf8, 0x1d, 0x6a, 0x66, 0x92, 0x9f, 0x89, 0xd0, 0x6e, 0xf6, 0xad, 0xc1, 0xa6,
	0xff, 0xe2, 0x4a, 0x91, 0xda, 0x57, 0x45, 0x0e, 0x26, 0x91, 0x9c, 0x9e, 0x8f, 0xdd, 0x20, 0x99,
	0x7b, 0xe5, 0x10, 0xcc, 0xe7, 0x71, 0x16, 0x9e, 0x79, 0xf2, 0x72, 0x21, 0x32, 0xf7, 0xa5, 0x08,
	0x0a, 0x45, 0xb6, 0x8d, 0xbb, 0x71, 0xa1, 0xac, 0xb4, 0xc3, 0x39, 0x6a, 0xa5, 0xe2, 0x03, 0x4f,
	0xc3, 0xcc, 0x6e, 0xf5, 0xeb, 0x83, 0xad, 0x27, 0xff, 0xb8, 0xc6, 0xc0, 0xd5, 0xc3, 0x74, 0xcb,
	0x61, 0xba, 0xc7, 0x49, 0x14, 0xfb, 0x47, 0xfa, 0xd2, 0x42, 0x91, 0x8e, 0xb1, 0x2a, 0xf3, 0xe8,
	0x77, 0x45, 0xfe, 0xff, 0x85, 0x32, 0xb4, 0x05, 0xbb, 0xbd, 0x0c, 0xbb, 0x68, 0x03, 0x3a, 0x33,
	0xe2, 0xd2, 0xde, 0x80, 0x16, 0xec, 0x16, 0x8a, 0xfc, 0xb5, 0x2a, 0x12, 0x18, 0xca, 0x5a, 0x70,
	0x3c, 0x92, 0x78, 0x80, 0x9a, 0x22, 0x0e, 0xb5, 0x7a, 0x13, 0xd4, 0x3b, 0x77, 0xbf, 0x64, 0x70,
	0xca, 0x1a, 0x22, 0x0e, 0x8f, 0x24, 0x7e, 0x8e, 0xb6, 0xf5, 0xbf, 0x45, 0xf1, 0x64, 0x04, 0x6b,
	0x6a, 0x23, 0xe8, 0x98, 0x5d, 0x28, 0xd2, 0xbb, 0xeb, 0xc1, 0x8a, 0xa6, 0xac, 0x5d, 0xc6, 0xc7,
	0x3a, 0xc4, 0xaf, 0xd1, 0xce, 0x2d, 0x9f, 0xf3, 0x59, 0x14, 0x72, 0x99, 0xa4, 0xf6, 0x16, 0x58,
	0xfc, 0x57, 0x28, 0x62, 0xdf, 0xb7, 0x58, 0x49, 0x28, 0xeb, 0x96, 0xd8, 0xdb, 0x15, 0xf4, 0x71,
	0x0d, 0x75, 0x4e, 0x79, 0x56, 0xdd, 0x99, 0x43, 0xd4, 0x36, 0xf3, 0x9d, 0x8a, 0x68, 0x32, 0x95,
	0xb0, 0xf0, 0x75, 0x7f, 0xaf, 0x50, 0x64, 0xb7, 0x3a, 0x7d, 0xc3, 0x52, 0x66, 0x16, 0xec, 0x15,
	0x44, 0xf8, 0x11, 0x6a, 0x05, 0xa9, 0x80, 0x7a, 0xd6, 0xa0, 0x1e, 0x7c, 0x37, 0x8b, 0x92, 0xa0,
	0xec, 0x56, 0xf2, 0x73, 0x1b, 0xea, 0x7f, 0xde, 0x86, 0xf5, 0xdf, 0x69, 0x83, 0x7f, 0xfa, 0x79,
	0xe9, 0x58, 0x57, 0x4b, 0xc7, 0xba, 0x5e, 0x3a, 0xd6, 0xb7, 0xa5, 0x63, 0x7d, 0xba, 0x71, 0x6a,
	0xd7, 0x37, 0x4e, 0xed, 0xcb, 0x8d, 0x53, 0x7b, 0xef, 0x56, 0x56, 0xe7, 0x34, 0x9a, 0x0b, 0xb8,
	0xde, 0xab, 0x3e, 0x44, 0x17, 0xe5, 0x53, 0x04, 0x6b, 0x34, 0x6e, 0xc2, 0xe3, 0xf1, 0xf4, 0x47,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0x18, 0x08, 0x50, 0xac, 0x04, 0x00, 0x00,
}

func (this *Epoch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Epoch)
	if !ok {
		that2, ok := that.(Epoch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if this.PrevEpochBlock != that1.PrevEpochBlock {
		return false
	}
	if this.NextEpochBlock != that1.NextEpochBlock {
		return false
	}
	if this.BlockStart != that1.BlockStart {
		return false
	}
	if this.BlockEnd != that1.BlockEnd {
		return false
	}
	if !this.Staked.Equal(that1.Staked) {
		return false
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(&that1.Rewards[i]) {
			return false
		}
	}
	if this.StartAt != that1.StartAt {
		return false
	}
	if this.EndAt != that1.EndAt {
		return false
	}
	if this.StakingChain != that1.StakingChain {
		return false
	}
	if this.StakingValidator != that1.StakingValidator {
		return false
	}
	return true
}
func (this *LastEpochBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LastEpochBlock)
	if !ok {
		that2, ok := that.(LastEpochBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.StakingChain != that1.StakingChain {
		return false
	}
	if this.StakingValidator != that1.StakingValidator {
		return false
	}
	return true
}
func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x52
	}
	if m.EndAt != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x48
	}
	if m.StartAt != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEpoch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size := m.Staked.Size()
		i -= size
		if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEpoch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.BlockEnd != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.BlockEnd))
		i--
		dAtA[i] = 0x28
	}
	if m.BlockStart != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.BlockStart))
		i--
		dAtA[i] = 0x20
	}
	if m.NextEpochBlock != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.NextEpochBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.PrevEpochBlock != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.PrevEpochBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LastEpochBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastEpochBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastEpochBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEpoch(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEpoch(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEpoch(dAtA []byte, offset int, v uint64) int {
	offset -= sovEpoch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	if m.PrevEpochBlock != 0 {
		n += 1 + sovEpoch(uint64(m.PrevEpochBlock))
	}
	if m.NextEpochBlock != 0 {
		n += 1 + sovEpoch(uint64(m.NextEpochBlock))
	}
	if m.BlockStart != 0 {
		n += 1 + sovEpoch(uint64(m.BlockStart))
	}
	if m.BlockEnd != 0 {
		n += 1 + sovEpoch(uint64(m.BlockEnd))
	}
	l = m.Staked.Size()
	n += 1 + l + sovEpoch(uint64(l))
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovEpoch(uint64(l))
		}
	}
	if m.StartAt != 0 {
		n += 1 + sovEpoch(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovEpoch(uint64(m.EndAt))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	return n
}

func (m *LastEpochBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovEpoch(uint64(m.BlockHeight))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovEpoch(uint64(l))
	}
	return n
}

func sovEpoch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEpoch(x uint64) (n int) {
	return sovEpoch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEpochBlock", wireType)
			}
			m.PrevEpochBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevEpochBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochBlock", wireType)
			}
			m.NextEpochBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockEnd", wireType)
			}
			m.BlockEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastEpochBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastEpochBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastEpochBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEpoch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEpoch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEpoch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEpoch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEpoch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEpoch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEpoch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEpoch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEpoch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEpoch = fmt.Errorf("proto: unexpected end of group")
)
