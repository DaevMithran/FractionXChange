// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateNftStakeStaked struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MarketplaceCreator string `protobuf:"bytes,2,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string `protobuf:"bytes,3,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string `protobuf:"bytes,4,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string `protobuf:"bytes,6,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	StakingChain       string `protobuf:"bytes,7,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator   string `protobuf:"bytes,8,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
	StakedIndex        int64  `protobuf:"varint,9,opt,name=staked_index,json=stakedIndex,proto3" json:"staked_index,omitempty"`
	BlockHeight        int64  `protobuf:"varint,10,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Shares             string `protobuf:"bytes,11,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (m *MsgUpdateNftStakeStaked) Reset()         { *m = MsgUpdateNftStakeStaked{} }
func (m *MsgUpdateNftStakeStaked) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNftStakeStaked) ProtoMessage()    {}
func (*MsgUpdateNftStakeStaked) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{0}
}
func (m *MsgUpdateNftStakeStaked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNftStakeStaked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNftStakeStaked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNftStakeStaked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNftStakeStaked.Merge(m, src)
}
func (m *MsgUpdateNftStakeStaked) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNftStakeStaked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNftStakeStaked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNftStakeStaked proto.InternalMessageInfo

func (m *MsgUpdateNftStakeStaked) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

func (m *MsgUpdateNftStakeStaked) GetStakedIndex() int64 {
	if m != nil {
		return m.StakedIndex
	}
	return 0
}

func (m *MsgUpdateNftStakeStaked) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgUpdateNftStakeStaked) GetShares() string {
	if m != nil {
		return m.Shares
	}
	return ""
}

type MsgUpdateNftStakeStakedResponse struct {
	MarketplaceCreator string `protobuf:"bytes,1,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string `protobuf:"bytes,2,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string `protobuf:"bytes,3,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	StakingChain       string `protobuf:"bytes,6,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator   string `protobuf:"bytes,7,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
	StakedIndex        int64  `protobuf:"varint,8,opt,name=staked_index,json=stakedIndex,proto3" json:"staked_index,omitempty"`
	BlockHeight        int64  `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Shares             string `protobuf:"bytes,10,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (m *MsgUpdateNftStakeStakedResponse) Reset()         { *m = MsgUpdateNftStakeStakedResponse{} }
func (m *MsgUpdateNftStakeStakedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNftStakeStakedResponse) ProtoMessage()    {}
func (*MsgUpdateNftStakeStakedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{1}
}
func (m *MsgUpdateNftStakeStakedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNftStakeStakedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNftStakeStakedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNftStakeStakedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNftStakeStakedResponse.Merge(m, src)
}
func (m *MsgUpdateNftStakeStakedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNftStakeStakedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNftStakeStakedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNftStakeStakedResponse proto.InternalMessageInfo

func (m *MsgUpdateNftStakeStakedResponse) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

func (m *MsgUpdateNftStakeStakedResponse) GetStakedIndex() int64 {
	if m != nil {
		return m.StakedIndex
	}
	return 0
}

func (m *MsgUpdateNftStakeStakedResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgUpdateNftStakeStakedResponse) GetShares() string {
	if m != nil {
		return m.Shares
	}
	return ""
}

type MsgStartEpoch struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BlockStart       int64  `protobuf:"varint,2,opt,name=block_start,json=blockStart,proto3" json:"block_start,omitempty"`
	Reward           string `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	StakingChain     string `protobuf:"bytes,4,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator string `protobuf:"bytes,5,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *MsgStartEpoch) Reset()         { *m = MsgStartEpoch{} }
func (m *MsgStartEpoch) String() string { return proto.CompactTextString(m) }
func (*MsgStartEpoch) ProtoMessage()    {}
func (*MsgStartEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{2}
}
func (m *MsgStartEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartEpoch.Merge(m, src)
}
func (m *MsgStartEpoch) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartEpoch proto.InternalMessageInfo

func (m *MsgStartEpoch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStartEpoch) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *MsgStartEpoch) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *MsgStartEpoch) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *MsgStartEpoch) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type MsgStartEpochResponse struct {
	PrevEpochBlock      int64  `protobuf:"varint,1,opt,name=prev_epoch_block,json=prevEpochBlock,proto3" json:"prev_epoch_block,omitempty"`
	NextEpochBlock      int64  `protobuf:"varint,2,opt,name=next_epoch_block,json=nextEpochBlock,proto3" json:"next_epoch_block,omitempty"`
	BlockStart          int64  `protobuf:"varint,3,opt,name=block_start,json=blockStart,proto3" json:"block_start,omitempty"`
	BlockEnd            int64  `protobuf:"varint,4,opt,name=block_end,json=blockEnd,proto3" json:"block_end,omitempty"`
	Staked              string `protobuf:"bytes,5,opt,name=staked,proto3" json:"staked,omitempty"`
	StakingChain        string `protobuf:"bytes,6,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator    string `protobuf:"bytes,7,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
	Cw20ContractAddress string `protobuf:"bytes,8,opt,name=cw20_contract_address,json=cw20ContractAddress,proto3" json:"cw20_contract_address,omitempty"`
}

func (m *MsgStartEpochResponse) Reset()         { *m = MsgStartEpochResponse{} }
func (m *MsgStartEpochResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartEpochResponse) ProtoMessage()    {}
func (*MsgStartEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{3}
}
func (m *MsgStartEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartEpochResponse.Merge(m, src)
}
func (m *MsgStartEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartEpochResponse proto.InternalMessageInfo

func (m *MsgStartEpochResponse) GetPrevEpochBlock() int64 {
	if m != nil {
		return m.PrevEpochBlock
	}
	return 0
}

func (m *MsgStartEpochResponse) GetNextEpochBlock() int64 {
	if m != nil {
		return m.NextEpochBlock
	}
	return 0
}

func (m *MsgStartEpochResponse) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *MsgStartEpochResponse) GetBlockEnd() int64 {
	if m != nil {
		return m.BlockEnd
	}
	return 0
}

func (m *MsgStartEpochResponse) GetStaked() string {
	if m != nil {
		return m.Staked
	}
	return ""
}

func (m *MsgStartEpochResponse) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *MsgStartEpochResponse) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

func (m *MsgStartEpochResponse) GetCw20ContractAddress() string {
	if m != nil {
		return m.Cw20ContractAddress
	}
	return ""
}

type MsgWithdrawNftRewards struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	MarketplaceCreator string `protobuf:"bytes,2,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string `protobuf:"bytes,3,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string `protobuf:"bytes,4,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string `protobuf:"bytes,6,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Receiver           string `protobuf:"bytes,7,opt,name=receiver,proto3" json:"receiver,omitempty"`
	StakingChain       string `protobuf:"bytes,8,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator   string `protobuf:"bytes,9,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *MsgWithdrawNftRewards) Reset()         { *m = MsgWithdrawNftRewards{} }
func (m *MsgWithdrawNftRewards) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawNftRewards) ProtoMessage()    {}
func (*MsgWithdrawNftRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{4}
}
func (m *MsgWithdrawNftRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawNftRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawNftRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawNftRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawNftRewards.Merge(m, src)
}
func (m *MsgWithdrawNftRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawNftRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawNftRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawNftRewards proto.InternalMessageInfo

func (m *MsgWithdrawNftRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *MsgWithdrawNftRewards) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type MsgWithdrawNftRewardsResponse struct {
	MarketplaceCreator string           `protobuf:"bytes,1,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string           `protobuf:"bytes,2,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string           `protobuf:"bytes,3,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string           `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string           `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Owner              string           `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	Receiver           string           `protobuf:"bytes,7,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Rewards            []*types.Coin    `protobuf:"bytes,8,rep,name=rewards,proto3" json:"rewards,omitempty"`
	Balances           []*types.DecCoin `protobuf:"bytes,9,rep,name=balances,proto3" json:"balances,omitempty"`
	StartAt            int64            `protobuf:"varint,10,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt              int64            `protobuf:"varint,11,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (m *MsgWithdrawNftRewardsResponse) Reset()         { *m = MsgWithdrawNftRewardsResponse{} }
func (m *MsgWithdrawNftRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawNftRewardsResponse) ProtoMessage()    {}
func (*MsgWithdrawNftRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{5}
}
func (m *MsgWithdrawNftRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawNftRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawNftRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawNftRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawNftRewardsResponse.Merge(m, src)
}
func (m *MsgWithdrawNftRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawNftRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawNftRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawNftRewardsResponse proto.InternalMessageInfo

func (m *MsgWithdrawNftRewardsResponse) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgWithdrawNftRewardsResponse) GetRewards() []*types.Coin {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *MsgWithdrawNftRewardsResponse) GetBalances() []*types.DecCoin {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *MsgWithdrawNftRewardsResponse) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *MsgWithdrawNftRewardsResponse) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

type MsgCreateChainValidatorBridge struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain         string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	BridgeId      string `protobuf:"bytes,4,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeAccount string `protobuf:"bytes,5,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
}

func (m *MsgCreateChainValidatorBridge) Reset()         { *m = MsgCreateChainValidatorBridge{} }
func (m *MsgCreateChainValidatorBridge) String() string { return proto.CompactTextString(m) }
func (*MsgCreateChainValidatorBridge) ProtoMessage()    {}
func (*MsgCreateChainValidatorBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{6}
}
func (m *MsgCreateChainValidatorBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateChainValidatorBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateChainValidatorBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateChainValidatorBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateChainValidatorBridge.Merge(m, src)
}
func (m *MsgCreateChainValidatorBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateChainValidatorBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateChainValidatorBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateChainValidatorBridge proto.InternalMessageInfo

func (m *MsgCreateChainValidatorBridge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateChainValidatorBridge) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgCreateChainValidatorBridge) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgCreateChainValidatorBridge) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgCreateChainValidatorBridge) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

type MsgCreateChainValidatorBridgeResponse struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain         string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	BridgeId      string `protobuf:"bytes,4,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeAccount string `protobuf:"bytes,5,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
}

func (m *MsgCreateChainValidatorBridgeResponse) Reset()         { *m = MsgCreateChainValidatorBridgeResponse{} }
func (m *MsgCreateChainValidatorBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateChainValidatorBridgeResponse) ProtoMessage()    {}
func (*MsgCreateChainValidatorBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{7}
}
func (m *MsgCreateChainValidatorBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateChainValidatorBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateChainValidatorBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateChainValidatorBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateChainValidatorBridgeResponse.Merge(m, src)
}
func (m *MsgCreateChainValidatorBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateChainValidatorBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateChainValidatorBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateChainValidatorBridgeResponse proto.InternalMessageInfo

func (m *MsgCreateChainValidatorBridgeResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateChainValidatorBridgeResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgCreateChainValidatorBridgeResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgCreateChainValidatorBridgeResponse) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgCreateChainValidatorBridgeResponse) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

type MsgUpdateChainValidatorBridge struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain         string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	BridgeId      string `protobuf:"bytes,4,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeAccount string `protobuf:"bytes,5,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
}

func (m *MsgUpdateChainValidatorBridge) Reset()         { *m = MsgUpdateChainValidatorBridge{} }
func (m *MsgUpdateChainValidatorBridge) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainValidatorBridge) ProtoMessage()    {}
func (*MsgUpdateChainValidatorBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{8}
}
func (m *MsgUpdateChainValidatorBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainValidatorBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainValidatorBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainValidatorBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainValidatorBridge.Merge(m, src)
}
func (m *MsgUpdateChainValidatorBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainValidatorBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainValidatorBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainValidatorBridge proto.InternalMessageInfo

func (m *MsgUpdateChainValidatorBridge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridge) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridge) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridge) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridge) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

type MsgUpdateChainValidatorBridgeResponse struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain         string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	BridgeId      string `protobuf:"bytes,4,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeAccount string `protobuf:"bytes,5,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
}

func (m *MsgUpdateChainValidatorBridgeResponse) Reset()         { *m = MsgUpdateChainValidatorBridgeResponse{} }
func (m *MsgUpdateChainValidatorBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainValidatorBridgeResponse) ProtoMessage()    {}
func (*MsgUpdateChainValidatorBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{9}
}
func (m *MsgUpdateChainValidatorBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainValidatorBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainValidatorBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainValidatorBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainValidatorBridgeResponse.Merge(m, src)
}
func (m *MsgUpdateChainValidatorBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainValidatorBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainValidatorBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainValidatorBridgeResponse proto.InternalMessageInfo

func (m *MsgUpdateChainValidatorBridgeResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridgeResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridgeResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridgeResponse) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgUpdateChainValidatorBridgeResponse) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

type MsgDeleteChainValidatorBridge struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain     string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *MsgDeleteChainValidatorBridge) Reset()         { *m = MsgDeleteChainValidatorBridge{} }
func (m *MsgDeleteChainValidatorBridge) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteChainValidatorBridge) ProtoMessage()    {}
func (*MsgDeleteChainValidatorBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{10}
}
func (m *MsgDeleteChainValidatorBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteChainValidatorBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteChainValidatorBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteChainValidatorBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteChainValidatorBridge.Merge(m, src)
}
func (m *MsgDeleteChainValidatorBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteChainValidatorBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteChainValidatorBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteChainValidatorBridge proto.InternalMessageInfo

func (m *MsgDeleteChainValidatorBridge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteChainValidatorBridge) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgDeleteChainValidatorBridge) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type MsgDeleteChainValidatorBridgeResponse struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain         string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator     string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	BridgeId      string `protobuf:"bytes,4,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeAccount string `protobuf:"bytes,5,opt,name=bridge_account,json=bridgeAccount,proto3" json:"bridge_account,omitempty"`
}

func (m *MsgDeleteChainValidatorBridgeResponse) Reset()         { *m = MsgDeleteChainValidatorBridgeResponse{} }
func (m *MsgDeleteChainValidatorBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteChainValidatorBridgeResponse) ProtoMessage()    {}
func (*MsgDeleteChainValidatorBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_311d0123a4881c5c, []int{11}
}
func (m *MsgDeleteChainValidatorBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteChainValidatorBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteChainValidatorBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteChainValidatorBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteChainValidatorBridgeResponse.Merge(m, src)
}
func (m *MsgDeleteChainValidatorBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteChainValidatorBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteChainValidatorBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteChainValidatorBridgeResponse proto.InternalMessageInfo

func (m *MsgDeleteChainValidatorBridgeResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeleteChainValidatorBridgeResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgDeleteChainValidatorBridgeResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgDeleteChainValidatorBridgeResponse) GetBridgeId() string {
	if m != nil {
		return m.BridgeId
	}
	return ""
}

func (m *MsgDeleteChainValidatorBridgeResponse) GetBridgeAccount() string {
	if m != nil {
		return m.BridgeAccount
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateNftStakeStaked)(nil), "LimeChain.mantrachain.vault.v1.MsgUpdateNftStakeStaked")
	proto.RegisterType((*MsgUpdateNftStakeStakedResponse)(nil), "LimeChain.mantrachain.vault.v1.MsgUpdateNftStakeStakedResponse")
	proto.RegisterType((*MsgStartEpoch)(nil), "LimeChain.mantrachain.vault.v1.MsgStartEpoch")
	proto.RegisterType((*MsgStartEpochResponse)(nil), "LimeChain.mantrachain.vault.v1.MsgStartEpochResponse")
	proto.RegisterType((*MsgWithdrawNftRewards)(nil), "LimeChain.mantrachain.vault.v1.MsgWithdrawNftRewards")
	proto.RegisterType((*MsgWithdrawNftRewardsResponse)(nil), "LimeChain.mantrachain.vault.v1.MsgWithdrawNftRewardsResponse")
	proto.RegisterType((*MsgCreateChainValidatorBridge)(nil), "LimeChain.mantrachain.vault.v1.MsgCreateChainValidatorBridge")
	proto.RegisterType((*MsgCreateChainValidatorBridgeResponse)(nil), "LimeChain.mantrachain.vault.v1.MsgCreateChainValidatorBridgeResponse")
	proto.RegisterType((*MsgUpdateChainValidatorBridge)(nil), "LimeChain.mantrachain.vault.v1.MsgUpdateChainValidatorBridge")
	proto.RegisterType((*MsgUpdateChainValidatorBridgeResponse)(nil), "LimeChain.mantrachain.vault.v1.MsgUpdateChainValidatorBridgeResponse")
	proto.RegisterType((*MsgDeleteChainValidatorBridge)(nil), "LimeChain.mantrachain.vault.v1.MsgDeleteChainValidatorBridge")
	proto.RegisterType((*MsgDeleteChainValidatorBridgeResponse)(nil), "LimeChain.mantrachain.vault.v1.MsgDeleteChainValidatorBridgeResponse")
}

func init() { proto.RegisterFile("vault/v1/tx.proto", fileDescriptor_311d0123a4881c5c) }

var fileDescriptor_311d0123a4881c5c = []byte{
	// 970 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x66, 0xe3, 0x7f, 0x2f, 0x24, 0x6a, 0xb6, 0x09, 0x6c, 0x4d, 0x71, 0x8b, 0x51, 0xa5,
	0x48, 0xa8, 0xbb, 0x24, 0x55, 0x05, 0x97, 0x0a, 0x25, 0x69, 0xa4, 0x5a, 0x22, 0x3d, 0xb8, 0x02,
	0x24, 0x2e, 0xab, 0xf1, 0xcc, 0xc4, 0x5e, 0x65, 0x3d, 0x6b, 0xed, 0x4c, 0x9c, 0xf0, 0x0d, 0x10,
	0xa7, 0x1e, 0xf8, 0x04, 0x1c, 0xb8, 0x23, 0xc1, 0x81, 0x4f, 0x00, 0xc7, 0x1e, 0x39, 0xa2, 0xe4,
	0x8b, 0xa0, 0x79, 0xb3, 0xbb, 0x76, 0x88, 0xbd, 0xdd, 0x06, 0x81, 0xd2, 0x5c, 0xa2, 0xcc, 0xef,
	0xfd, 0xde, 0xcc, 0x9b, 0xdf, 0x6f, 0xe6, 0x8d, 0x6d, 0x58, 0x1b, 0x93, 0xe3, 0x48, 0xf9, 0xe3,
	0x2d, 0x5f, 0x9d, 0x7a, 0xa3, 0x24, 0x56, 0xb1, 0xd3, 0xfa, 0x22, 0x1c, 0xf2, 0xbd, 0x01, 0x09,
	0x85, 0x37, 0x24, 0x42, 0x25, 0x84, 0xe2, 0xff, 0x48, 0xf4, 0xc6, 0x5b, 0xcd, 0x16, 0x8d, 0xe5,
	0x30, 0x96, 0x7e, 0x8f, 0x48, 0xee, 0x8f, 0xb7, 0x7a, 0x5c, 0x91, 0x2d, 0x9f, 0xc6, 0xa1, 0x30,
	0xf9, 0xed, 0x9f, 0x6c, 0x78, 0xef, 0x40, 0xf6, 0xbf, 0x1c, 0x31, 0xa2, 0xf8, 0xf3, 0x43, 0xf5,
	0x42, 0x91, 0x23, 0x8e, 0x7f, 0x98, 0xe3, 0x42, 0x8d, 0x26, 0x9c, 0xa8, 0x38, 0x71, 0xad, 0xfb,
	0xd6, 0x66, 0xa3, 0x9b, 0x0d, 0x1d, 0x1f, 0x6e, 0x0f, 0x49, 0x72, 0xc4, 0xd5, 0x28, 0x22, 0x94,
	0x07, 0x19, 0x6b, 0x11, 0x59, 0xce, 0x54, 0x68, 0x2f, 0x4d, 0x78, 0x00, 0xab, 0xd3, 0x09, 0x21,
	0x73, 0x6d, 0xe4, 0xae, 0x4c, 0xa1, 0x1d, 0xe6, 0x3c, 0x04, 0x87, 0xc6, 0x51, 0xc4, 0xa9, 0x0a,
	0x63, 0x91, 0x4f, 0xbb, 0x84, 0xd4, 0xb5, 0x49, 0x24, 0x9b, 0xf5, 0x23, 0x58, 0x99, 0xa2, 0x87,
	0xcc, 0xad, 0x20, 0xf3, 0x9d, 0x09, 0xd8, 0x61, 0xce, 0x06, 0x54, 0xc5, 0xa1, 0xd2, 0xd1, 0x2a,
	0x46, 0x2b, 0xe2, 0x50, 0x75, 0x98, 0xce, 0x95, 0x8a, 0x1c, 0x85, 0xa2, 0x1f, 0xa0, 0x64, 0x6e,
	0xcd, 0xe4, 0xa6, 0x20, 0x4a, 0xea, 0x7c, 0x0c, 0x6b, 0x19, 0x69, 0x4c, 0xa2, 0x90, 0x61, 0x39,
	0x75, 0x24, 0xde, 0x4a, 0x03, 0x5f, 0x65, 0xb8, 0xf3, 0x21, 0x60, 0x32, 0x67, 0x41, 0x28, 0x18,
	0x3f, 0x75, 0x1b, 0xf7, 0xad, 0x4d, 0xbb, 0xbb, 0x6c, 0xb0, 0x8e, 0x86, 0x34, 0xa5, 0x17, 0xc5,
	0xf4, 0x28, 0x18, 0xf0, 0xb0, 0x3f, 0x50, 0x2e, 0x18, 0x0a, 0x62, 0xcf, 0x10, 0x72, 0xde, 0x85,
	0xaa, 0x1c, 0x90, 0x84, 0x4b, 0x77, 0x19, 0xd7, 0x49, 0x47, 0xed, 0x1f, 0x6c, 0xb8, 0x37, 0xc7,
	0xa8, 0x2e, 0x97, 0xa3, 0x58, 0x48, 0x3e, 0xcf, 0x16, 0xeb, 0x0d, 0x6c, 0x59, 0x2c, 0x6f, 0x8b,
	0x5d, 0xda, 0x96, 0xa5, 0x42, 0x5b, 0x2a, 0x85, 0xb6, 0x54, 0xcb, 0xda, 0x52, 0x2b, 0x69, 0x4b,
	0xfd, 0xf5, 0xb6, 0x34, 0x8a, 0x6c, 0x81, 0x0b, 0xb6, 0xfc, 0x62, 0xc1, 0xca, 0x81, 0xec, 0xbf,
	0x50, 0x24, 0x51, 0xfb, 0xa3, 0x98, 0x0e, 0x0a, 0x6e, 0xcd, 0x3d, 0x30, 0x53, 0x06, 0x52, 0xb3,
	0x51, 0x6a, 0xbb, 0x0b, 0x08, 0x61, 0xbe, 0x5e, 0x24, 0xe1, 0x27, 0x24, 0xc9, 0x6e, 0x47, 0x3a,
	0xba, 0x2c, 0xca, 0x52, 0x59, 0x51, 0x2a, 0xb3, 0x45, 0x69, 0xff, 0xbe, 0x08, 0x1b, 0x17, 0xca,
	0xce, 0xcf, 0xd0, 0x26, 0xdc, 0x1a, 0x25, 0x7c, 0x1c, 0x70, 0x8d, 0x06, 0x58, 0x1c, 0xee, 0xc3,
	0xee, 0xae, 0x6a, 0x1c, 0xc9, 0xbb, 0x1a, 0xd5, 0x4c, 0xc1, 0x4f, 0xd5, 0x05, 0xa6, 0xd9, 0xd3,
	0xaa, 0xc6, 0xa7, 0x98, 0xff, 0xd8, 0xb8, 0x7d, 0x69, 0xe3, 0xef, 0x43, 0xc3, 0x10, 0xb8, 0x30,
	0xa7, 0xc5, 0xee, 0xd6, 0x11, 0xd8, 0x17, 0x0c, 0xa5, 0x47, 0xb3, 0xd2, 0xdd, 0xa4, 0xa3, 0xff,
	0xe0, 0xa8, 0x6c, 0xc3, 0x06, 0x3d, 0xd9, 0xfe, 0x24, 0xa0, 0x31, 0x76, 0x52, 0x15, 0x10, 0xc6,
	0x12, 0x2e, 0x65, 0x7a, 0xe5, 0x6f, 0xeb, 0xe0, 0x5e, 0x1a, 0xdb, 0x31, 0xa1, 0xf6, 0x99, 0x51,
	0xf2, 0xeb, 0x50, 0x0d, 0x58, 0x42, 0x4e, 0x9e, 0x1f, 0xaa, 0x2e, 0x9a, 0x26, 0x6f, 0x76, 0xfb,
	0x6c, 0x42, 0x3d, 0xe1, 0x94, 0x87, 0x63, 0x9e, 0xc9, 0x99, 0x8f, 0x2f, 0x1b, 0x53, 0x2f, 0x6b,
	0x4c, 0x63, 0xce, 0x71, 0xfd, 0xd5, 0x86, 0x0f, 0x66, 0x8a, 0x7c, 0x93, 0x5a, 0xdf, 0x3a, 0x54,
	0xe2, 0x13, 0xc1, 0x93, 0x4c, 0x68, 0x1c, 0x14, 0x0a, 0xfd, 0x08, 0x6a, 0xa6, 0x43, 0xe8, 0x13,
	0x6a, 0x6f, 0x2e, 0x6f, 0xdf, 0xf1, 0xcc, 0x73, 0xef, 0xe9, 0xe7, 0xde, 0x4b, 0x9f, 0x7b, 0x6f,
	0x2f, 0x0e, 0x45, 0x37, 0x63, 0x3a, 0x9f, 0x41, 0xbd, 0x47, 0x22, 0x22, 0x28, 0x97, 0x6e, 0x03,
	0xb3, 0xee, 0xce, 0xcc, 0x7a, 0xca, 0x29, 0x26, 0xe6, 0x6c, 0xe7, 0x0e, 0xd4, 0xf1, 0x02, 0x07,
	0x24, 0x7b, 0xb9, 0x6a, 0x38, 0xde, 0x51, 0x7a, 0x4b, 0x5c, 0x30, 0x1d, 0x58, 0xc6, 0x40, 0x85,
	0x0b, 0xb6, 0xa3, 0xda, 0x3f, 0x5b, 0xe8, 0x1b, 0xaa, 0x63, 0x3e, 0xa5, 0xe4, 0x9e, 0xee, 0x26,
	0x21, 0xeb, 0xf3, 0x82, 0x4b, 0xb2, 0x0e, 0x15, 0x73, 0x7a, 0x8c, 0x2f, 0x66, 0xe0, 0xdc, 0x85,
	0xc6, 0xe4, 0xb8, 0x18, 0x1b, 0x26, 0x00, 0xf6, 0x11, 0x9c, 0x77, 0x22, 0x7d, 0xdd, 0x00, 0x1d,
	0xa6, 0x1d, 0x4f, 0x83, 0x84, 0xd2, 0xf8, 0x58, 0xa8, 0x54, 0xfe, 0x15, 0x83, 0xee, 0x18, 0xb0,
	0xfd, 0x9b, 0x05, 0x0f, 0x0a, 0x6b, 0xce, 0xcf, 0xdc, 0xf5, 0xab, 0x3d, 0xd5, 0xdb, 0x7c, 0x48,
	0x78, 0xbb, 0xf4, 0x9e, 0x5f, 0xf3, 0x35, 0xd6, 0x7b, 0x88, 0x72, 0x3f, 0xe5, 0x11, 0xff, 0x3f,
	0xe4, 0xce, 0xa4, 0x9a, 0xbf, 0xde, 0xf5, 0x95, 0x6a, 0xfb, 0xbb, 0x1a, 0xd8, 0x07, 0xb2, 0xef,
	0x7c, 0x6f, 0x81, 0x33, 0xe3, 0xb1, 0x7c, 0xec, 0x15, 0x7f, 0x91, 0xf1, 0x66, 0xb6, 0xff, 0xe6,
	0x93, 0x2b, 0xa5, 0xe5, 0x32, 0x25, 0x00, 0x53, 0x9f, 0xdc, 0x1e, 0x96, 0x98, 0x6c, 0x42, 0x6f,
	0x3e, 0x7e, 0x23, 0x7a, 0xbe, 0xe6, 0x4b, 0x0b, 0xd6, 0x67, 0x7e, 0xdd, 0xfa, 0xb4, 0xc4, 0x7c,
	0xb3, 0x12, 0x9b, 0x9f, 0x5f, 0x31, 0x31, 0x2f, 0xe9, 0x47, 0x0b, 0x9a, 0x05, 0x3d, 0xba, 0x8c,
	0xc8, 0xf3, 0xd3, 0x9b, 0xfb, 0xff, 0x2a, 0xfd, 0x42, 0x91, 0x05, 0x8d, 0xed, 0x49, 0x69, 0x11,
	0xae, 0x5c, 0x64, 0x89, 0x16, 0xa5, 0x8b, 0x2c, 0x68, 0x07, 0x65, 0x8a, 0x9c, 0x9f, 0x5e, 0xaa,
	0xc8, 0xd7, 0x37, 0x87, 0xdd, 0x67, 0x7f, 0x9c, 0xb5, 0xac, 0x57, 0x67, 0x2d, 0xeb, 0xaf, 0xb3,
	0x96, 0xf5, 0xf2, 0xbc, 0xb5, 0xf0, 0xea, 0xbc, 0xb5, 0xf0, 0xe7, 0x79, 0x6b, 0xe1, 0x1b, 0xaf,
	0x1f, 0xaa, 0xc1, 0x71, 0xcf, 0xa3, 0xf1, 0xd0, 0xcf, 0x97, 0xf2, 0xa7, 0x96, 0xf2, 0x4f, 0x7d,
	0xf3, 0x1b, 0x84, 0xfa, 0x76, 0xc4, 0x65, 0xaf, 0x8a, 0x3f, 0x22, 0x3c, 0xfa, 0x3b, 0x00, 0x00,
	0xff, 0xff, 0x33, 0x2d, 0x83, 0xf2, 0x99, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	WithdrawNftRewards(ctx context.Context, in *MsgWithdrawNftRewards, opts ...grpc.CallOption) (*MsgWithdrawNftRewardsResponse, error)
	StartEpoch(ctx context.Context, in *MsgStartEpoch, opts ...grpc.CallOption) (*MsgStartEpochResponse, error)
	UpdateNftStakeStaked(ctx context.Context, in *MsgUpdateNftStakeStaked, opts ...grpc.CallOption) (*MsgUpdateNftStakeStakedResponse, error)
	CreateChainValidatorBridge(ctx context.Context, in *MsgCreateChainValidatorBridge, opts ...grpc.CallOption) (*MsgCreateChainValidatorBridgeResponse, error)
	UpdateChainValidatorBridge(ctx context.Context, in *MsgUpdateChainValidatorBridge, opts ...grpc.CallOption) (*MsgUpdateChainValidatorBridgeResponse, error)
	DeleteChainValidatorBridge(ctx context.Context, in *MsgDeleteChainValidatorBridge, opts ...grpc.CallOption) (*MsgDeleteChainValidatorBridgeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) WithdrawNftRewards(ctx context.Context, in *MsgWithdrawNftRewards, opts ...grpc.CallOption) (*MsgWithdrawNftRewardsResponse, error) {
	out := new(MsgWithdrawNftRewardsResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Msg/WithdrawNftRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartEpoch(ctx context.Context, in *MsgStartEpoch, opts ...grpc.CallOption) (*MsgStartEpochResponse, error) {
	out := new(MsgStartEpochResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Msg/StartEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateNftStakeStaked(ctx context.Context, in *MsgUpdateNftStakeStaked, opts ...grpc.CallOption) (*MsgUpdateNftStakeStakedResponse, error) {
	out := new(MsgUpdateNftStakeStakedResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Msg/UpdateNftStakeStaked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateChainValidatorBridge(ctx context.Context, in *MsgCreateChainValidatorBridge, opts ...grpc.CallOption) (*MsgCreateChainValidatorBridgeResponse, error) {
	out := new(MsgCreateChainValidatorBridgeResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Msg/CreateChainValidatorBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChainValidatorBridge(ctx context.Context, in *MsgUpdateChainValidatorBridge, opts ...grpc.CallOption) (*MsgUpdateChainValidatorBridgeResponse, error) {
	out := new(MsgUpdateChainValidatorBridgeResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Msg/UpdateChainValidatorBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteChainValidatorBridge(ctx context.Context, in *MsgDeleteChainValidatorBridge, opts ...grpc.CallOption) (*MsgDeleteChainValidatorBridgeResponse, error) {
	out := new(MsgDeleteChainValidatorBridgeResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Msg/DeleteChainValidatorBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	WithdrawNftRewards(context.Context, *MsgWithdrawNftRewards) (*MsgWithdrawNftRewardsResponse, error)
	StartEpoch(context.Context, *MsgStartEpoch) (*MsgStartEpochResponse, error)
	UpdateNftStakeStaked(context.Context, *MsgUpdateNftStakeStaked) (*MsgUpdateNftStakeStakedResponse, error)
	CreateChainValidatorBridge(context.Context, *MsgCreateChainValidatorBridge) (*MsgCreateChainValidatorBridgeResponse, error)
	UpdateChainValidatorBridge(context.Context, *MsgUpdateChainValidatorBridge) (*MsgUpdateChainValidatorBridgeResponse, error)
	DeleteChainValidatorBridge(context.Context, *MsgDeleteChainValidatorBridge) (*MsgDeleteChainValidatorBridgeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) WithdrawNftRewards(ctx context.Context, req *MsgWithdrawNftRewards) (*MsgWithdrawNftRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawNftRewards not implemented")
}
func (*UnimplementedMsgServer) StartEpoch(ctx context.Context, req *MsgStartEpoch) (*MsgStartEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEpoch not implemented")
}
func (*UnimplementedMsgServer) UpdateNftStakeStaked(ctx context.Context, req *MsgUpdateNftStakeStaked) (*MsgUpdateNftStakeStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNftStakeStaked not implemented")
}
func (*UnimplementedMsgServer) CreateChainValidatorBridge(ctx context.Context, req *MsgCreateChainValidatorBridge) (*MsgCreateChainValidatorBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChainValidatorBridge not implemented")
}
func (*UnimplementedMsgServer) UpdateChainValidatorBridge(ctx context.Context, req *MsgUpdateChainValidatorBridge) (*MsgUpdateChainValidatorBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChainValidatorBridge not implemented")
}
func (*UnimplementedMsgServer) DeleteChainValidatorBridge(ctx context.Context, req *MsgDeleteChainValidatorBridge) (*MsgDeleteChainValidatorBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChainValidatorBridge not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_WithdrawNftRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawNftRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawNftRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Msg/WithdrawNftRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawNftRewards(ctx, req.(*MsgWithdrawNftRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Msg/StartEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartEpoch(ctx, req.(*MsgStartEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateNftStakeStaked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNftStakeStaked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateNftStakeStaked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Msg/UpdateNftStakeStaked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateNftStakeStaked(ctx, req.(*MsgUpdateNftStakeStaked))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateChainValidatorBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateChainValidatorBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateChainValidatorBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Msg/CreateChainValidatorBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateChainValidatorBridge(ctx, req.(*MsgCreateChainValidatorBridge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChainValidatorBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChainValidatorBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChainValidatorBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Msg/UpdateChainValidatorBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChainValidatorBridge(ctx, req.(*MsgUpdateChainValidatorBridge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteChainValidatorBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteChainValidatorBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteChainValidatorBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Msg/DeleteChainValidatorBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteChainValidatorBridge(ctx, req.(*MsgDeleteChainValidatorBridge))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LimeChain.mantrachain.vault.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WithdrawNftRewards",
			Handler:    _Msg_WithdrawNftRewards_Handler,
		},
		{
			MethodName: "StartEpoch",
			Handler:    _Msg_StartEpoch_Handler,
		},
		{
			MethodName: "UpdateNftStakeStaked",
			Handler:    _Msg_UpdateNftStakeStaked_Handler,
		},
		{
			MethodName: "CreateChainValidatorBridge",
			Handler:    _Msg_CreateChainValidatorBridge_Handler,
		},
		{
			MethodName: "UpdateChainValidatorBridge",
			Handler:    _Msg_UpdateChainValidatorBridge_Handler,
		},
		{
			MethodName: "DeleteChainValidatorBridge",
			Handler:    _Msg_DeleteChainValidatorBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault/v1/tx.proto",
}

func (m *MsgUpdateNftStakeStaked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNftStakeStaked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNftStakeStaked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		i -= len(m.Shares)
		copy(dAtA[i:], m.Shares)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Shares)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.StakedIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakedIndex))
		i--
		dAtA[i] = 0x48
	}
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNftStakeStakedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNftStakeStakedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNftStakeStakedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		i -= len(m.Shares)
		copy(dAtA[i:], m.Shares)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Shares)))
		i--
		dAtA[i] = 0x52
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.StakedIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StakedIndex))
		i--
		dAtA[i] = 0x40
	}
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartEpoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartEpoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockStart != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockStart))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cw20ContractAddress) > 0 {
		i -= len(m.Cw20ContractAddress)
		copy(dAtA[i:], m.Cw20ContractAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cw20ContractAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Staked) > 0 {
		i -= len(m.Staked)
		copy(dAtA[i:], m.Staked)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Staked)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockEnd != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockEnd))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockStart != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockStart))
		i--
		dAtA[i] = 0x18
	}
	if m.NextEpochBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NextEpochBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.PrevEpochBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrevEpochBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawNftRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawNftRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawNftRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawNftRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawNftRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawNftRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndAt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x58
	}
	if m.StartAt != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateChainValidatorBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateChainValidatorBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateChainValidatorBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateChainValidatorBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateChainValidatorBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateChainValidatorBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainValidatorBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainValidatorBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainValidatorBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainValidatorBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainValidatorBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainValidatorBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteChainValidatorBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteChainValidatorBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteChainValidatorBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteChainValidatorBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteChainValidatorBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteChainValidatorBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeAccount) > 0 {
		i -= len(m.BridgeAccount)
		copy(dAtA[i:], m.BridgeAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeAccount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BridgeId) > 0 {
		i -= len(m.BridgeId)
		copy(dAtA[i:], m.BridgeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BridgeId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateNftStakeStaked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakedIndex != 0 {
		n += 1 + sovTx(uint64(m.StakedIndex))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.Shares)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateNftStakeStakedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StakedIndex != 0 {
		n += 1 + sovTx(uint64(m.StakedIndex))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTx(uint64(m.BlockHeight))
	}
	l = len(m.Shares)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockStart != 0 {
		n += 1 + sovTx(uint64(m.BlockStart))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrevEpochBlock != 0 {
		n += 1 + sovTx(uint64(m.PrevEpochBlock))
	}
	if m.NextEpochBlock != 0 {
		n += 1 + sovTx(uint64(m.NextEpochBlock))
	}
	if m.BlockStart != 0 {
		n += 1 + sovTx(uint64(m.BlockStart))
	}
	if m.BlockEnd != 0 {
		n += 1 + sovTx(uint64(m.BlockEnd))
	}
	l = len(m.Staked)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cw20ContractAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawNftRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawNftRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.StartAt != 0 {
		n += 1 + sovTx(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovTx(uint64(m.EndAt))
	}
	return n
}

func (m *MsgCreateChainValidatorBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateChainValidatorBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateChainValidatorBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateChainValidatorBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteChainValidatorBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeleteChainValidatorBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BridgeAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateNftStakeStaked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNftStakeStaked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNftStakeStaked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedIndex", wireType)
			}
			m.StakedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNftStakeStakedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNftStakeStakedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNftStakeStakedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedIndex", wireType)
			}
			m.StakedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEpochBlock", wireType)
			}
			m.PrevEpochBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevEpochBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochBlock", wireType)
			}
			m.NextEpochBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockEnd", wireType)
			}
			m.BlockEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawNftRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawNftRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawNftRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawNftRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawNftRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawNftRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &types.DecCoin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateChainValidatorBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateChainValidatorBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateChainValidatorBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateChainValidatorBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateChainValidatorBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateChainValidatorBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainValidatorBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainValidatorBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainValidatorBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainValidatorBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainValidatorBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainValidatorBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteChainValidatorBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteChainValidatorBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteChainValidatorBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteChainValidatorBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteChainValidatorBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteChainValidatorBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
