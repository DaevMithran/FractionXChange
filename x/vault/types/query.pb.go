// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetLastEpochBlockRequest struct {
	StakingChain     string `protobuf:"bytes,1,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator string `protobuf:"bytes,2,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *QueryGetLastEpochBlockRequest) Reset()         { *m = QueryGetLastEpochBlockRequest{} }
func (m *QueryGetLastEpochBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastEpochBlockRequest) ProtoMessage()    {}
func (*QueryGetLastEpochBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{0}
}
func (m *QueryGetLastEpochBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastEpochBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastEpochBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastEpochBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastEpochBlockRequest.Merge(m, src)
}
func (m *QueryGetLastEpochBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastEpochBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastEpochBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastEpochBlockRequest proto.InternalMessageInfo

func (m *QueryGetLastEpochBlockRequest) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *QueryGetLastEpochBlockRequest) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type QueryGetLastEpochBlockResponse struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BlockHeight      int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	StakingChain     string `protobuf:"bytes,3,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator string `protobuf:"bytes,4,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *QueryGetLastEpochBlockResponse) Reset()         { *m = QueryGetLastEpochBlockResponse{} }
func (m *QueryGetLastEpochBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastEpochBlockResponse) ProtoMessage()    {}
func (*QueryGetLastEpochBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{1}
}
func (m *QueryGetLastEpochBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastEpochBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastEpochBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastEpochBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastEpochBlockResponse.Merge(m, src)
}
func (m *QueryGetLastEpochBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastEpochBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastEpochBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastEpochBlockResponse proto.InternalMessageInfo

func (m *QueryGetLastEpochBlockResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetLastEpochBlockResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryGetLastEpochBlockResponse) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *QueryGetLastEpochBlockResponse) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type QueryGetLastEpochsRequest struct {
	StakingChain     string `protobuf:"bytes,1,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator string `protobuf:"bytes,2,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *QueryGetLastEpochsRequest) Reset()         { *m = QueryGetLastEpochsRequest{} }
func (m *QueryGetLastEpochsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastEpochsRequest) ProtoMessage()    {}
func (*QueryGetLastEpochsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{2}
}
func (m *QueryGetLastEpochsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastEpochsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastEpochsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastEpochsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastEpochsRequest.Merge(m, src)
}
func (m *QueryGetLastEpochsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastEpochsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastEpochsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastEpochsRequest proto.InternalMessageInfo

func (m *QueryGetLastEpochsRequest) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *QueryGetLastEpochsRequest) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type QueryGetEpochsResponse struct {
	PrevEpochBlock   int64         `protobuf:"varint,1,opt,name=prev_epoch_block,json=prevEpochBlock,proto3" json:"prev_epoch_block,omitempty"`
	NextEpochBlock   int64         `protobuf:"varint,2,opt,name=next_epoch_block,json=nextEpochBlock,proto3" json:"next_epoch_block,omitempty"`
	BlockStart       int64         `protobuf:"varint,3,opt,name=block_start,json=blockStart,proto3" json:"block_start,omitempty"`
	BlockEnd         int64         `protobuf:"varint,4,opt,name=block_end,json=blockEnd,proto3" json:"block_end,omitempty"`
	Staked           string        `protobuf:"bytes,5,opt,name=staked,proto3" json:"staked,omitempty"`
	Rewards          []*types.Coin `protobuf:"bytes,6,rep,name=rewards,proto3" json:"rewards,omitempty"`
	StartAt          int64         `protobuf:"varint,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt            int64         `protobuf:"varint,8,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	StakingChain     string        `protobuf:"bytes,9,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator string        `protobuf:"bytes,10,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *QueryGetEpochsResponse) Reset()         { *m = QueryGetEpochsResponse{} }
func (m *QueryGetEpochsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEpochsResponse) ProtoMessage()    {}
func (*QueryGetEpochsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{3}
}
func (m *QueryGetEpochsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEpochsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEpochsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEpochsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEpochsResponse.Merge(m, src)
}
func (m *QueryGetEpochsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEpochsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEpochsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEpochsResponse proto.InternalMessageInfo

func (m *QueryGetEpochsResponse) GetPrevEpochBlock() int64 {
	if m != nil {
		return m.PrevEpochBlock
	}
	return 0
}

func (m *QueryGetEpochsResponse) GetNextEpochBlock() int64 {
	if m != nil {
		return m.NextEpochBlock
	}
	return 0
}

func (m *QueryGetEpochsResponse) GetBlockStart() int64 {
	if m != nil {
		return m.BlockStart
	}
	return 0
}

func (m *QueryGetEpochsResponse) GetBlockEnd() int64 {
	if m != nil {
		return m.BlockEnd
	}
	return 0
}

func (m *QueryGetEpochsResponse) GetStaked() string {
	if m != nil {
		return m.Staked
	}
	return ""
}

func (m *QueryGetEpochsResponse) GetRewards() []*types.Coin {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryGetEpochsResponse) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *QueryGetEpochsResponse) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *QueryGetEpochsResponse) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *QueryGetEpochsResponse) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type QueryGetLastEpochsResponse struct {
	Epochs []*QueryGetEpochsResponse `protobuf:"bytes,1,rep,name=epochs,proto3" json:"epochs,omitempty"`
}

func (m *QueryGetLastEpochsResponse) Reset()         { *m = QueryGetLastEpochsResponse{} }
func (m *QueryGetLastEpochsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastEpochsResponse) ProtoMessage()    {}
func (*QueryGetLastEpochsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{4}
}
func (m *QueryGetLastEpochsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastEpochsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastEpochsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastEpochsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastEpochsResponse.Merge(m, src)
}
func (m *QueryGetLastEpochsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastEpochsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastEpochsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastEpochsResponse proto.InternalMessageInfo

func (m *QueryGetLastEpochsResponse) GetEpochs() []*QueryGetEpochsResponse {
	if m != nil {
		return m.Epochs
	}
	return nil
}

type QueryGetNftStakeRequest struct {
	MarketplaceCreator string `protobuf:"bytes,1,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string `protobuf:"bytes,2,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string `protobuf:"bytes,3,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
}

func (m *QueryGetNftStakeRequest) Reset()         { *m = QueryGetNftStakeRequest{} }
func (m *QueryGetNftStakeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftStakeRequest) ProtoMessage()    {}
func (*QueryGetNftStakeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{5}
}
func (m *QueryGetNftStakeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftStakeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftStakeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftStakeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftStakeRequest.Merge(m, src)
}
func (m *QueryGetNftStakeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftStakeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftStakeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftStakeRequest proto.InternalMessageInfo

func (m *QueryGetNftStakeRequest) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *QueryGetNftStakeRequest) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *QueryGetNftStakeRequest) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftStakeRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftStakeRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

type QueryGetNftStakeListItemResponse struct {
	Index               uint32      `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Amount              string      `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom               string      `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Cw20ContractAddress string      `protobuf:"bytes,4,opt,name=cw20_contract_address,json=cw20ContractAddress,proto3" json:"cw20_contract_address,omitempty"`
	Shares              string      `protobuf:"bytes,5,opt,name=shares,proto3" json:"shares,omitempty"`
	Validator           string      `protobuf:"bytes,6,opt,name=validator,proto3" json:"validator,omitempty"`
	Chain               string      `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
	Data                *types1.Any `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Creator             string      `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	BlockHeight         int64       `protobuf:"varint,10,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	StakedAt            int64       `protobuf:"varint,11,opt,name=staked_at,json=stakedAt,proto3" json:"staked_at,omitempty"`
	UnstakedAt          int64       `protobuf:"varint,12,opt,name=unstaked_at,json=unstakedAt,proto3" json:"unstaked_at,omitempty"`
	StakedEpoch         int64       `protobuf:"varint,13,opt,name=staked_epoch,json=stakedEpoch,proto3" json:"staked_epoch,omitempty"`
}

func (m *QueryGetNftStakeListItemResponse) Reset()         { *m = QueryGetNftStakeListItemResponse{} }
func (m *QueryGetNftStakeListItemResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftStakeListItemResponse) ProtoMessage()    {}
func (*QueryGetNftStakeListItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{6}
}
func (m *QueryGetNftStakeListItemResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftStakeListItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftStakeListItemResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftStakeListItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftStakeListItemResponse.Merge(m, src)
}
func (m *QueryGetNftStakeListItemResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftStakeListItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftStakeListItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftStakeListItemResponse proto.InternalMessageInfo

func (m *QueryGetNftStakeListItemResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *QueryGetNftStakeListItemResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetCw20ContractAddress() string {
	if m != nil {
		return m.Cw20ContractAddress
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetShares() string {
	if m != nil {
		return m.Shares
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetData() *types1.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *QueryGetNftStakeListItemResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryGetNftStakeListItemResponse) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueryGetNftStakeListItemResponse) GetStakedAt() int64 {
	if m != nil {
		return m.StakedAt
	}
	return 0
}

func (m *QueryGetNftStakeListItemResponse) GetUnstakedAt() int64 {
	if m != nil {
		return m.UnstakedAt
	}
	return 0
}

func (m *QueryGetNftStakeListItemResponse) GetStakedEpoch() int64 {
	if m != nil {
		return m.StakedEpoch
	}
	return 0
}

type QueryGetNftStakeBalanceResponse struct {
	Amount             string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom              string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Validator          string `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	Chain              string `protobuf:"bytes,4,opt,name=chain,proto3" json:"chain,omitempty"`
	LastWithdrawnAt    int64  `protobuf:"varint,5,opt,name=last_withdrawn_at,json=lastWithdrawnAt,proto3" json:"last_withdrawn_at,omitempty"`
	LastWithdrawnEpoch int64  `protobuf:"varint,6,opt,name=last_withdrawn_epoch,json=lastWithdrawnEpoch,proto3" json:"last_withdrawn_epoch,omitempty"`
}

func (m *QueryGetNftStakeBalanceResponse) Reset()         { *m = QueryGetNftStakeBalanceResponse{} }
func (m *QueryGetNftStakeBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftStakeBalanceResponse) ProtoMessage()    {}
func (*QueryGetNftStakeBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{7}
}
func (m *QueryGetNftStakeBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftStakeBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftStakeBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftStakeBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftStakeBalanceResponse.Merge(m, src)
}
func (m *QueryGetNftStakeBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftStakeBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftStakeBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftStakeBalanceResponse proto.InternalMessageInfo

func (m *QueryGetNftStakeBalanceResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *QueryGetNftStakeBalanceResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetNftStakeBalanceResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *QueryGetNftStakeBalanceResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryGetNftStakeBalanceResponse) GetLastWithdrawnAt() int64 {
	if m != nil {
		return m.LastWithdrawnAt
	}
	return 0
}

func (m *QueryGetNftStakeBalanceResponse) GetLastWithdrawnEpoch() int64 {
	if m != nil {
		return m.LastWithdrawnEpoch
	}
	return 0
}

type QueryGetNftStakeResponse struct {
	MarketplaceCreator string                              `protobuf:"bytes,1,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string                              `protobuf:"bytes,2,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string                              `protobuf:"bytes,3,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string                              `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string                              `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Staked             []*QueryGetNftStakeListItemResponse `protobuf:"bytes,6,rep,name=staked,proto3" json:"staked,omitempty"`
	Balances           []*QueryGetNftStakeBalanceResponse  `protobuf:"bytes,7,rep,name=balances,proto3" json:"balances,omitempty"`
	Creator            string                              `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetNftStakeResponse) Reset()         { *m = QueryGetNftStakeResponse{} }
func (m *QueryGetNftStakeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftStakeResponse) ProtoMessage()    {}
func (*QueryGetNftStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{8}
}
func (m *QueryGetNftStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftStakeResponse.Merge(m, src)
}
func (m *QueryGetNftStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftStakeResponse proto.InternalMessageInfo

func (m *QueryGetNftStakeResponse) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *QueryGetNftStakeResponse) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *QueryGetNftStakeResponse) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftStakeResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftStakeResponse) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryGetNftStakeResponse) GetStaked() []*QueryGetNftStakeListItemResponse {
	if m != nil {
		return m.Staked
	}
	return nil
}

func (m *QueryGetNftStakeResponse) GetBalances() []*QueryGetNftStakeBalanceResponse {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryGetNftStakeResponse) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetNftBalancesRequest struct {
	MarketplaceCreator string `protobuf:"bytes,1,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string `protobuf:"bytes,2,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string `protobuf:"bytes,3,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	StakingChain       string `protobuf:"bytes,6,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator   string `protobuf:"bytes,7,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *QueryGetNftBalancesRequest) Reset()         { *m = QueryGetNftBalancesRequest{} }
func (m *QueryGetNftBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftBalancesRequest) ProtoMessage()    {}
func (*QueryGetNftBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{9}
}
func (m *QueryGetNftBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftBalancesRequest.Merge(m, src)
}
func (m *QueryGetNftBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftBalancesRequest proto.InternalMessageInfo

func (m *QueryGetNftBalancesRequest) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *QueryGetNftBalancesRequest) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *QueryGetNftBalancesRequest) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftBalancesRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftBalancesRequest) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryGetNftBalancesRequest) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *QueryGetNftBalancesRequest) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

type QueryGetNftBalancesResponse struct {
	MarketplaceCreator string        `protobuf:"bytes,1,opt,name=marketplace_creator,json=marketplaceCreator,proto3" json:"marketplace_creator,omitempty"`
	MarketplaceId      string        `protobuf:"bytes,2,opt,name=marketplace_id,json=marketplaceId,proto3" json:"marketplace_id,omitempty"`
	CollectionCreator  string        `protobuf:"bytes,3,opt,name=collection_creator,json=collectionCreator,proto3" json:"collection_creator,omitempty"`
	CollectionId       string        `protobuf:"bytes,4,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	NftId              string        `protobuf:"bytes,5,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	Balances           []*types.Coin `protobuf:"bytes,6,rep,name=balances,proto3" json:"balances,omitempty"`
	StartAt            int64         `protobuf:"varint,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt              int64         `protobuf:"varint,8,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	StakingChain       string        `protobuf:"bytes,9,opt,name=staking_chain,json=stakingChain,proto3" json:"staking_chain,omitempty"`
	StakingValidator   string        `protobuf:"bytes,10,opt,name=staking_validator,json=stakingValidator,proto3" json:"staking_validator,omitempty"`
}

func (m *QueryGetNftBalancesResponse) Reset()         { *m = QueryGetNftBalancesResponse{} }
func (m *QueryGetNftBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNftBalancesResponse) ProtoMessage()    {}
func (*QueryGetNftBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{10}
}
func (m *QueryGetNftBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNftBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNftBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNftBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNftBalancesResponse.Merge(m, src)
}
func (m *QueryGetNftBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNftBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNftBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNftBalancesResponse proto.InternalMessageInfo

func (m *QueryGetNftBalancesResponse) GetMarketplaceCreator() string {
	if m != nil {
		return m.MarketplaceCreator
	}
	return ""
}

func (m *QueryGetNftBalancesResponse) GetMarketplaceId() string {
	if m != nil {
		return m.MarketplaceId
	}
	return ""
}

func (m *QueryGetNftBalancesResponse) GetCollectionCreator() string {
	if m != nil {
		return m.CollectionCreator
	}
	return ""
}

func (m *QueryGetNftBalancesResponse) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *QueryGetNftBalancesResponse) GetNftId() string {
	if m != nil {
		return m.NftId
	}
	return ""
}

func (m *QueryGetNftBalancesResponse) GetBalances() []*types.Coin {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *QueryGetNftBalancesResponse) GetStartAt() int64 {
	if m != nil {
		return m.StartAt
	}
	return 0
}

func (m *QueryGetNftBalancesResponse) GetEndAt() int64 {
	if m != nil {
		return m.EndAt
	}
	return 0
}

func (m *QueryGetNftBalancesResponse) GetStakingChain() string {
	if m != nil {
		return m.StakingChain
	}
	return ""
}

func (m *QueryGetNftBalancesResponse) GetStakingValidator() string {
	if m != nil {
		return m.StakingValidator
	}
	return ""
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{11}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{12}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetChainValidatorBridgeRequest struct {
	Chain     string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryGetChainValidatorBridgeRequest) Reset()         { *m = QueryGetChainValidatorBridgeRequest{} }
func (m *QueryGetChainValidatorBridgeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainValidatorBridgeRequest) ProtoMessage()    {}
func (*QueryGetChainValidatorBridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{13}
}
func (m *QueryGetChainValidatorBridgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainValidatorBridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainValidatorBridgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainValidatorBridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainValidatorBridgeRequest.Merge(m, src)
}
func (m *QueryGetChainValidatorBridgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainValidatorBridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainValidatorBridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainValidatorBridgeRequest proto.InternalMessageInfo

func (m *QueryGetChainValidatorBridgeRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryGetChainValidatorBridgeRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryGetChainValidatorBridgeResponse struct {
	ChainValidatorBridge ChainValidatorBridge `protobuf:"bytes,1,opt,name=chainValidatorBridge,proto3" json:"chainValidatorBridge"`
}

func (m *QueryGetChainValidatorBridgeResponse) Reset()         { *m = QueryGetChainValidatorBridgeResponse{} }
func (m *QueryGetChainValidatorBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainValidatorBridgeResponse) ProtoMessage()    {}
func (*QueryGetChainValidatorBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d49a2800ab3e4b, []int{14}
}
func (m *QueryGetChainValidatorBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainValidatorBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainValidatorBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainValidatorBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainValidatorBridgeResponse.Merge(m, src)
}
func (m *QueryGetChainValidatorBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainValidatorBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainValidatorBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainValidatorBridgeResponse proto.InternalMessageInfo

func (m *QueryGetChainValidatorBridgeResponse) GetChainValidatorBridge() ChainValidatorBridge {
	if m != nil {
		return m.ChainValidatorBridge
	}
	return ChainValidatorBridge{}
}

func init() {
	proto.RegisterType((*QueryGetLastEpochBlockRequest)(nil), "LimeChain.mantrachain.vault.v1.QueryGetLastEpochBlockRequest")
	proto.RegisterType((*QueryGetLastEpochBlockResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetLastEpochBlockResponse")
	proto.RegisterType((*QueryGetLastEpochsRequest)(nil), "LimeChain.mantrachain.vault.v1.QueryGetLastEpochsRequest")
	proto.RegisterType((*QueryGetEpochsResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetEpochsResponse")
	proto.RegisterType((*QueryGetLastEpochsResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetLastEpochsResponse")
	proto.RegisterType((*QueryGetNftStakeRequest)(nil), "LimeChain.mantrachain.vault.v1.QueryGetNftStakeRequest")
	proto.RegisterType((*QueryGetNftStakeListItemResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetNftStakeListItemResponse")
	proto.RegisterType((*QueryGetNftStakeBalanceResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetNftStakeBalanceResponse")
	proto.RegisterType((*QueryGetNftStakeResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetNftStakeResponse")
	proto.RegisterType((*QueryGetNftBalancesRequest)(nil), "LimeChain.mantrachain.vault.v1.QueryGetNftBalancesRequest")
	proto.RegisterType((*QueryGetNftBalancesResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetNftBalancesResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "LimeChain.mantrachain.vault.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryParamsResponse")
	proto.RegisterType((*QueryGetChainValidatorBridgeRequest)(nil), "LimeChain.mantrachain.vault.v1.QueryGetChainValidatorBridgeRequest")
	proto.RegisterType((*QueryGetChainValidatorBridgeResponse)(nil), "LimeChain.mantrachain.vault.v1.QueryGetChainValidatorBridgeResponse")
}

func init() { proto.RegisterFile("vault/v1/query.proto", fileDescriptor_e6d49a2800ab3e4b) }

var fileDescriptor_e6d49a2800ab3e4b = []byte{
	// 1370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4f, 0x6f, 0x13, 0xd7,
	0x16, 0xcf, 0xd8, 0x89, 0x9d, 0x9c, 0xfc, 0x79, 0x70, 0x31, 0x3c, 0xc7, 0xf0, 0x0c, 0xcf, 0xc0,
	0x53, 0xf4, 0xaa, 0xcc, 0x10, 0xd3, 0xbf, 0x54, 0x6d, 0x71, 0x02, 0x2a, 0x51, 0x29, 0xa2, 0x83,
	0xd4, 0xd2, 0xb2, 0xb0, 0xae, 0x67, 0x6e, 0xec, 0x11, 0xf6, 0x1d, 0x33, 0x73, 0xed, 0x04, 0xa5,
	0xe9, 0xa2, 0x8b, 0xae, 0x2b, 0x55, 0x6a, 0x17, 0xfd, 0x0e, 0x54, 0xfd, 0x16, 0x2c, 0x91, 0xba,
	0x61, 0xd1, 0x56, 0x2d, 0x74, 0x53, 0xf5, 0x23, 0xb0, 0xa9, 0xe6, 0xdc, 0x3b, 0xe3, 0x19, 0x7b,
	0x1c, 0x1c, 0x2a, 0xa4, 0x96, 0x9d, 0xef, 0x39, 0xe7, 0x9e, 0x73, 0x7e, 0xe7, 0xcf, 0x6f, 0x66,
	0x0c, 0x85, 0x3e, 0xed, 0xb5, 0x85, 0xd1, 0x5f, 0x33, 0xee, 0xf4, 0x98, 0x77, 0x57, 0xef, 0x7a,
	0xae, 0x70, 0x49, 0xf9, 0xaa, 0xd3, 0x61, 0x1b, 0x2d, 0xea, 0x70, 0xbd, 0x43, 0xb9, 0xf0, 0xa8,
	0x85, 0xbf, 0xd1, 0x56, 0xef, 0xaf, 0x95, 0x96, 0x9b, 0xae, 0xdb, 0x6c, 0x33, 0x03, 0xad, 0x1b,
	0xbd, 0x2d, 0x83, 0x72, 0x75, 0xb5, 0x54, 0xb6, 0x5c, 0xbf, 0xe3, 0xfa, 0x46, 0x83, 0xfa, 0xcc,
	0xe8, 0xaf, 0x35, 0x98, 0xa0, 0x6b, 0x86, 0xe5, 0x3a, 0x5c, 0xe9, 0x0b, 0x4d, 0xb7, 0xe9, 0xe2,
	0x4f, 0x23, 0xf8, 0xa5, 0xa4, 0x27, 0x94, 0x43, 0xda, 0x75, 0x0c, 0xca, 0xb9, 0x2b, 0xa8, 0x70,
	0x5c, 0xee, 0x2b, 0xed, 0xd1, 0x28, 0xc9, 0x2e, 0xf5, 0x68, 0x27, 0x14, 0x9f, 0x8d, 0xc4, 0x98,
	0x5e, 0xbd, 0x4f, 0xdb, 0x8e, 0x4d, 0x85, 0xeb, 0xd5, 0x1b, 0x9e, 0x63, 0x37, 0x99, 0x34, 0xab,
	0xdc, 0x81, 0xff, 0x7c, 0x10, 0x60, 0x7b, 0x97, 0x89, 0xab, 0xd4, 0x17, 0x97, 0xbb, 0xae, 0xd5,
	0x5a, 0x6f, 0xbb, 0xd6, 0x6d, 0x93, 0xdd, 0xe9, 0x31, 0x5f, 0x90, 0xd3, 0xb0, 0xe8, 0x0b, 0x7a,
	0xdb, 0xe1, 0xcd, 0x3a, 0x3a, 0x2a, 0x6a, 0xa7, 0xb4, 0x95, 0x39, 0x73, 0x41, 0x09, 0xb1, 0x0e,
	0xe4, 0x25, 0x38, 0x1c, 0x1a, 0x45, 0x71, 0x8a, 0x19, 0x34, 0x3c, 0xa4, 0x14, 0x1f, 0x86, 0xf2,
	0xca, 0x77, 0x1a, 0x94, 0xc7, 0xc5, 0xf4, 0xbb, 0x2e, 0xf7, 0x19, 0x29, 0x42, 0xde, 0xf2, 0x18,
	0x7a, 0x91, 0xe1, 0xc2, 0x23, 0xf9, 0x2f, 0x2c, 0x34, 0x02, 0xd3, 0x7a, 0x8b, 0x39, 0xcd, 0x96,
	0xc0, 0x20, 0x59, 0x73, 0x1e, 0x65, 0x57, 0x50, 0x34, 0x9a, 0x71, 0x76, 0xd2, 0x8c, 0xa7, 0xc7,
	0x64, 0xdc, 0x81, 0xe5, 0x91, 0x84, 0xfd, 0xe7, 0x57, 0xa0, 0x27, 0x19, 0x38, 0x16, 0xc6, 0x0b,
	0x63, 0xa9, 0xc2, 0xac, 0xc0, 0xa1, 0xae, 0xc7, 0xfa, 0x75, 0x16, 0x88, 0xeb, 0x88, 0x1a, 0xe3,
	0x65, 0xcd, 0xa5, 0x40, 0x3e, 0x28, 0x65, 0x60, 0xc9, 0xd9, 0x8e, 0x48, 0x58, 0xca, 0x62, 0x2d,
	0x05, 0xf2, 0x98, 0xe5, 0x49, 0x90, 0xe5, 0xab, 0xfb, 0x82, 0x7a, 0x02, 0xab, 0x95, 0x35, 0x01,
	0x45, 0x37, 0x02, 0x09, 0x39, 0x0e, 0x73, 0xd2, 0x80, 0x71, 0x1b, 0x6b, 0x94, 0x35, 0x67, 0x51,
	0x70, 0x99, 0xdb, 0xe4, 0x18, 0xe4, 0x02, 0x00, 0xcc, 0x2e, 0xce, 0x20, 0x1c, 0x75, 0x22, 0xe7,
	0x21, 0xef, 0xb1, 0x6d, 0xea, 0xd9, 0x7e, 0x31, 0x77, 0x2a, 0xbb, 0x32, 0x5f, 0x5d, 0xd6, 0xe5,
	0xf0, 0xeb, 0xc1, 0xf0, 0xeb, 0x6a, 0xf8, 0xf5, 0x0d, 0xd7, 0xe1, 0x66, 0x68, 0x49, 0x96, 0x61,
	0x16, 0x93, 0xa8, 0x53, 0x51, 0xcc, 0x63, 0xa0, 0x3c, 0x9e, 0x6b, 0x82, 0x1c, 0x85, 0x1c, 0xe3,
	0x76, 0xa0, 0x98, 0x45, 0xc5, 0x0c, 0xe3, 0x76, 0x2d, 0xa5, 0xfa, 0x73, 0x93, 0x56, 0x1f, 0xc6,
	0x54, 0xbf, 0x0d, 0xa5, 0xb4, 0x66, 0xab, 0x06, 0x5c, 0x83, 0x1c, 0x56, 0xd4, 0x2f, 0x6a, 0x88,
	0xea, 0x55, 0x7d, 0x7f, 0x36, 0xd0, 0xd3, 0x1b, 0x69, 0x2a, 0x2f, 0x95, 0x1f, 0x35, 0xf8, 0x77,
	0x68, 0x72, 0x6d, 0x4b, 0xdc, 0x08, 0x8a, 0x17, 0x4e, 0x96, 0x01, 0x47, 0x3a, 0xd4, 0xbb, 0xcd,
	0x44, 0xb7, 0x4d, 0x2d, 0x56, 0x4f, 0x6e, 0x04, 0x89, 0xa9, 0x36, 0xd4, 0x72, 0x9c, 0x85, 0xa5,
	0xf8, 0x05, 0xc7, 0x56, 0x23, 0xb6, 0x18, 0x93, 0x6e, 0xda, 0x64, 0x15, 0x88, 0xe5, 0xb6, 0xdb,
	0xcc, 0x0a, 0x68, 0x24, 0x72, 0x2b, 0xb7, 0xe4, 0xf0, 0x40, 0x13, 0x7a, 0x3d, 0x0d, 0x8b, 0x31,
	0x73, 0xc7, 0x56, 0x6b, 0xb2, 0x30, 0x10, 0x6e, 0xda, 0x41, 0x7b, 0xf8, 0x96, 0x08, 0xb4, 0x72,
	0x0c, 0x66, 0xf8, 0x96, 0xd8, 0xb4, 0x2b, 0xf7, 0xb2, 0x70, 0x6a, 0x18, 0xde, 0x55, 0xc7, 0x17,
	0x9b, 0x82, 0x75, 0xa2, 0x9a, 0x16, 0x60, 0xc6, 0xe1, 0x36, 0xdb, 0x41, 0x64, 0x8b, 0xa6, 0x3c,
	0x04, 0x83, 0x45, 0x3b, 0x6e, 0x8f, 0x0b, 0x05, 0x42, 0x9d, 0x02, 0x6b, 0x9b, 0x71, 0xb7, 0xa3,
	0x12, 0x96, 0x07, 0x52, 0x85, 0xa3, 0xd6, 0x76, 0xf5, 0x5c, 0xdd, 0x72, 0xb1, 0x07, 0xa2, 0x4e,
	0x6d, 0xdb, 0x63, 0xbe, 0xaf, 0x92, 0x3d, 0x12, 0x28, 0x37, 0x94, 0xae, 0x26, 0x55, 0x38, 0xba,
	0x2d, 0xea, 0x31, 0x3f, 0x1a, 0x5d, 0x3c, 0x91, 0x13, 0x30, 0x37, 0x18, 0x93, 0x1c, 0xaa, 0x06,
	0x82, 0x20, 0xbe, 0x9c, 0xb4, 0xbc, 0x8c, 0x8f, 0x07, 0xb2, 0x02, 0xd3, 0x36, 0x15, 0x14, 0x87,
	0x73, 0xbe, 0x5a, 0xd0, 0x25, 0x65, 0xeb, 0xe1, 0x33, 0x40, 0xaf, 0xf1, 0xbb, 0x26, 0x5a, 0xc4,
	0xb9, 0x6d, 0x6e, 0x7f, 0x6e, 0x83, 0x51, 0x6e, 0x3b, 0x0e, 0x73, 0x72, 0xbf, 0x82, 0x45, 0x98,
	0x97, 0xab, 0x28, 0x05, 0x35, 0x11, 0x2c, 0x72, 0x8f, 0x0f, 0xd4, 0x0b, 0x72, 0x91, 0x43, 0x51,
	0x4d, 0x04, 0x01, 0x94, 0x1a, 0xa7, 0xaf, 0xb8, 0x28, 0x03, 0x48, 0x19, 0x0e, 0x68, 0xe5, 0x57,
	0x0d, 0x4e, 0x0e, 0x37, 0x6c, 0x9d, 0xb6, 0x29, 0xb7, 0x58, 0xd4, 0xaf, 0x41, 0x67, 0xb4, 0xf4,
	0xce, 0x64, 0xe2, 0x9d, 0x49, 0x54, 0x33, 0x3b, 0xb6, 0x9a, 0xd3, 0xf1, 0x6a, 0xfe, 0x1f, 0x0e,
	0xb7, 0xa9, 0x2f, 0xea, 0xdb, 0x8e, 0x68, 0xd9, 0x1e, 0xdd, 0xe6, 0x01, 0x9e, 0x19, 0xcc, 0xf6,
	0x5f, 0x81, 0xe2, 0xa3, 0x50, 0x5e, 0x13, 0xe4, 0x1c, 0x14, 0x86, 0x6c, 0x25, 0xb8, 0x1c, 0x9a,
	0x93, 0x84, 0xb9, 0xc4, 0x78, 0x2f, 0x0b, 0xc5, 0xd1, 0x9d, 0x53, 0xe0, 0xfe, 0xf9, 0x4b, 0x47,
	0x6e, 0x46, 0x94, 0x2c, 0x99, 0xf7, 0xe2, 0xa4, 0x1c, 0x35, 0x6e, 0x43, 0x23, 0x52, 0xbf, 0x05,
	0xb3, 0x0d, 0x39, 0x0c, 0x7e, 0x31, 0x8f, 0xbe, 0xdf, 0x39, 0xa8, 0xef, 0xa1, 0x61, 0x32, 0x23,
	0x87, 0xf1, 0xc5, 0x98, 0x4d, 0x2c, 0x46, 0xe5, 0xfb, 0xcc, 0x80, 0x93, 0xaf, 0x6d, 0x09, 0xe5,
	0xc2, 0x7f, 0x71, 0x78, 0x72, 0xf4, 0x31, 0x96, 0x9b, 0xf4, 0x31, 0x96, 0x1f, 0xf3, 0x18, 0xfb,
	0x36, 0x0b, 0xc7, 0x53, 0x6b, 0xf6, 0xe2, 0xcc, 0xf9, 0x2b, 0xb1, 0x69, 0x7c, 0xea, 0x3b, 0xc6,
	0x60, 0xce, 0xfe, 0x0e, 0x2f, 0x19, 0x05, 0x20, 0xd8, 0x9c, 0xeb, 0xf8, 0xca, 0xae, 0x06, 0xb9,
	0x72, 0x0b, 0x8e, 0x24, 0xa4, 0xaa, 0x55, 0x97, 0x20, 0x27, 0x5f, 0xed, 0xb1, 0x3b, 0xf3, 0xd5,
	0xff, 0x3d, 0x6d, 0xe7, 0xe4, 0xfd, 0xf5, 0xe9, 0xfb, 0x3f, 0x9f, 0x9c, 0x32, 0xd5, 0xdd, 0xca,
	0xc7, 0x70, 0x3a, 0x9c, 0x07, 0xbc, 0x1a, 0x25, 0xb3, 0x8e, 0xdf, 0x03, 0xe1, 0x32, 0x45, 0x84,
	0xac, 0xc5, 0x09, 0x39, 0x41, 0xe2, 0x99, 0x21, 0x12, 0xaf, 0x7c, 0xad, 0xc1, 0x99, 0xfd, 0x7d,
	0x2b, 0x24, 0x1c, 0x0a, 0x56, 0x8a, 0x5e, 0xe1, 0x7a, 0xf9, 0x69, 0xb8, 0xd2, 0x7c, 0x2b, 0x94,
	0xa9, 0x7e, 0xab, 0x3f, 0x01, 0xcc, 0x60, 0x62, 0xe4, 0x1b, 0x0d, 0x72, 0xb2, 0x2c, 0xa4, 0x3a,
	0x11, 0x65, 0x25, 0x3a, 0x53, 0x3a, 0x7f, 0xa0, 0x3b, 0x12, 0x6d, 0xe5, 0xcc, 0xe7, 0x3f, 0xfc,
	0xf6, 0x55, 0xa6, 0x4c, 0x4e, 0x18, 0xb1, 0x2b, 0xc6, 0xd0, 0xe7, 0x1a, 0x79, 0xa2, 0xc1, 0x6c,
	0x48, 0x8e, 0xe4, 0xb5, 0x83, 0xd2, 0x69, 0x98, 0xe0, 0xeb, 0x07, 0xbf, 0xa8, 0xb2, 0xfc, 0x14,
	0xb3, 0xec, 0x13, 0x91, 0x9e, 0x25, 0xdf, 0x12, 0xab, 0xc8, 0xfe, 0xc6, 0x6e, 0x0a, 0x5f, 0xec,
	0x25, 0xa5, 0x8e, 0xbd, 0x67, 0xec, 0x8e, 0xae, 0x7f, 0x52, 0x88, 0x46, 0x72, 0x9f, 0xf7, 0xc8,
	0x17, 0x19, 0x98, 0x8f, 0xd1, 0x13, 0xb9, 0x70, 0x00, 0x1c, 0x43, 0xcf, 0x81, 0xd2, 0x9b, 0xcf,
	0x74, 0x57, 0x95, 0xe1, 0x33, 0x2c, 0xc3, 0x0e, 0xe9, 0x8f, 0x2d, 0x83, 0xa1, 0x18, 0xe4, 0xf9,
	0x14, 0xe2, 0xa1, 0x06, 0x30, 0xf8, 0xde, 0x20, 0x6f, 0x4c, 0x8a, 0x65, 0xe4, 0x83, 0xb4, 0x74,
	0xe1, 0x59, 0xae, 0xaa, 0x2a, 0xdc, 0xc0, 0x2a, 0xbc, 0x4f, 0xde, 0x4b, 0xaf, 0x82, 0xfc, 0x11,
	0xbc, 0x52, 0xad, 0xca, 0xef, 0x17, 0x63, 0x37, 0x41, 0x8c, 0x7b, 0x83, 0x73, 0xc4, 0x0e, 0x7b,
	0xe4, 0x77, 0x0d, 0x96, 0x92, 0x1f, 0xfa, 0xe4, 0xad, 0x03, 0xe7, 0x18, 0xff, 0x53, 0xa2, 0xf4,
	0xf6, 0xb3, 0x5e, 0x57, 0x30, 0x6f, 0x22, 0x4c, 0x93, 0x5c, 0x9f, 0x0c, 0xe6, 0x2a, 0xbe, 0x82,
	0x4f, 0x84, 0xf5, 0x0f, 0x0d, 0x0a, 0x69, 0x34, 0x45, 0x36, 0x26, 0x4d, 0x79, 0x1f, 0x72, 0x2e,
	0x5d, 0xfa, 0x6b, 0x4e, 0x14, 0xfa, 0x2b, 0x88, 0x7e, 0x9d, 0x5c, 0x4c, 0x47, 0x9f, 0xfe, 0x7f,
	0x91, 0xb1, 0x1b, 0xa2, 0x1e, 0xa0, 0x5d, 0xbf, 0x72, 0xff, 0x51, 0x59, 0x7b, 0xf0, 0xa8, 0xac,
	0xfd, 0xf2, 0xa8, 0xac, 0x7d, 0xf9, 0xb8, 0x3c, 0xf5, 0xe0, 0x71, 0x79, 0xea, 0xe1, 0xe3, 0xf2,
	0xd4, 0x27, 0x7a, 0xd3, 0x11, 0xad, 0x5e, 0x43, 0xb7, 0xdc, 0x8e, 0x11, 0xe5, 0x9c, 0x88, 0xb7,
	0xa3, 0x22, 0x8a, 0xbb, 0x5d, 0xe6, 0x37, 0x72, 0xf8, 0xa5, 0x74, 0xfe, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x4a, 0x25, 0xf1, 0x73, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	NftStake(ctx context.Context, in *QueryGetNftStakeRequest, opts ...grpc.CallOption) (*QueryGetNftStakeResponse, error)
	NftBalances(ctx context.Context, in *QueryGetNftBalancesRequest, opts ...grpc.CallOption) (*QueryGetNftBalancesResponse, error)
	LastEpochs(ctx context.Context, in *QueryGetLastEpochsRequest, opts ...grpc.CallOption) (*QueryGetLastEpochsResponse, error)
	LastEpochBlock(ctx context.Context, in *QueryGetLastEpochBlockRequest, opts ...grpc.CallOption) (*QueryGetLastEpochBlockResponse, error)
	// Queries a ChainValidatorBridge by index.
	ChainValidatorBridge(ctx context.Context, in *QueryGetChainValidatorBridgeRequest, opts ...grpc.CallOption) (*QueryGetChainValidatorBridgeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftStake(ctx context.Context, in *QueryGetNftStakeRequest, opts ...grpc.CallOption) (*QueryGetNftStakeResponse, error) {
	out := new(QueryGetNftStakeResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Query/NftStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NftBalances(ctx context.Context, in *QueryGetNftBalancesRequest, opts ...grpc.CallOption) (*QueryGetNftBalancesResponse, error) {
	out := new(QueryGetNftBalancesResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Query/NftBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEpochs(ctx context.Context, in *QueryGetLastEpochsRequest, opts ...grpc.CallOption) (*QueryGetLastEpochsResponse, error) {
	out := new(QueryGetLastEpochsResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Query/LastEpochs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEpochBlock(ctx context.Context, in *QueryGetLastEpochBlockRequest, opts ...grpc.CallOption) (*QueryGetLastEpochBlockResponse, error) {
	out := new(QueryGetLastEpochBlockResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Query/LastEpochBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainValidatorBridge(ctx context.Context, in *QueryGetChainValidatorBridgeRequest, opts ...grpc.CallOption) (*QueryGetChainValidatorBridgeResponse, error) {
	out := new(QueryGetChainValidatorBridgeResponse)
	err := c.cc.Invoke(ctx, "/LimeChain.mantrachain.vault.v1.Query/ChainValidatorBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	NftStake(context.Context, *QueryGetNftStakeRequest) (*QueryGetNftStakeResponse, error)
	NftBalances(context.Context, *QueryGetNftBalancesRequest) (*QueryGetNftBalancesResponse, error)
	LastEpochs(context.Context, *QueryGetLastEpochsRequest) (*QueryGetLastEpochsResponse, error)
	LastEpochBlock(context.Context, *QueryGetLastEpochBlockRequest) (*QueryGetLastEpochBlockResponse, error)
	// Queries a ChainValidatorBridge by index.
	ChainValidatorBridge(context.Context, *QueryGetChainValidatorBridgeRequest) (*QueryGetChainValidatorBridgeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NftStake(ctx context.Context, req *QueryGetNftStakeRequest) (*QueryGetNftStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftStake not implemented")
}
func (*UnimplementedQueryServer) NftBalances(ctx context.Context, req *QueryGetNftBalancesRequest) (*QueryGetNftBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftBalances not implemented")
}
func (*UnimplementedQueryServer) LastEpochs(ctx context.Context, req *QueryGetLastEpochsRequest) (*QueryGetLastEpochsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEpochs not implemented")
}
func (*UnimplementedQueryServer) LastEpochBlock(ctx context.Context, req *QueryGetLastEpochBlockRequest) (*QueryGetLastEpochBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEpochBlock not implemented")
}
func (*UnimplementedQueryServer) ChainValidatorBridge(ctx context.Context, req *QueryGetChainValidatorBridgeRequest) (*QueryGetChainValidatorBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainValidatorBridge not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Query/NftStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftStake(ctx, req.(*QueryGetNftStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NftBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNftBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NftBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Query/NftBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NftBalances(ctx, req.(*QueryGetNftBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEpochs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastEpochsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEpochs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Query/LastEpochs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEpochs(ctx, req.(*QueryGetLastEpochsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEpochBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastEpochBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEpochBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Query/LastEpochBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEpochBlock(ctx, req.(*QueryGetLastEpochBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainValidatorBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainValidatorBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainValidatorBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LimeChain.mantrachain.vault.v1.Query/ChainValidatorBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainValidatorBridge(ctx, req.(*QueryGetChainValidatorBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LimeChain.mantrachain.vault.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NftStake",
			Handler:    _Query_NftStake_Handler,
		},
		{
			MethodName: "NftBalances",
			Handler:    _Query_NftBalances_Handler,
		},
		{
			MethodName: "LastEpochs",
			Handler:    _Query_LastEpochs_Handler,
		},
		{
			MethodName: "LastEpochBlock",
			Handler:    _Query_LastEpochBlock_Handler,
		},
		{
			MethodName: "ChainValidatorBridge",
			Handler:    _Query_ChainValidatorBridge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault/v1/query.proto",
}

func (m *QueryGetLastEpochBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastEpochBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastEpochBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastEpochBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastEpochBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastEpochBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastEpochsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastEpochsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastEpochsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEpochsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEpochsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEpochsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x4a
	}
	if m.EndAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x40
	}
	if m.StartAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Staked) > 0 {
		i -= len(m.Staked)
		copy(dAtA[i:], m.Staked)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staked)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockEnd != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockEnd))
		i--
		dAtA[i] = 0x20
	}
	if m.BlockStart != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockStart))
		i--
		dAtA[i] = 0x18
	}
	if m.NextEpochBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextEpochBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.PrevEpochBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PrevEpochBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastEpochsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastEpochsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastEpochsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Epochs) > 0 {
		for iNdEx := len(m.Epochs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Epochs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftStakeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftStakeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftStakeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftStakeListItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftStakeListItemResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftStakeListItemResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StakedEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakedEpoch))
		i--
		dAtA[i] = 0x68
	}
	if m.UnstakedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UnstakedAt))
		i--
		dAtA[i] = 0x60
	}
	if m.StakedAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StakedAt))
		i--
		dAtA[i] = 0x58
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Shares) > 0 {
		i -= len(m.Shares)
		copy(dAtA[i:], m.Shares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Shares)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cw20ContractAddress) > 0 {
		i -= len(m.Cw20ContractAddress)
		copy(dAtA[i:], m.Cw20ContractAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cw20ContractAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftStakeBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftStakeBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftStakeBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastWithdrawnEpoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastWithdrawnEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.LastWithdrawnAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastWithdrawnAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Staked) > 0 {
		for iNdEx := len(m.Staked) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Staked[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNftBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNftBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNftBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingValidator) > 0 {
		i -= len(m.StakingValidator)
		copy(dAtA[i:], m.StakingValidator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingValidator)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StakingChain) > 0 {
		i -= len(m.StakingChain)
		copy(dAtA[i:], m.StakingChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakingChain)))
		i--
		dAtA[i] = 0x4a
	}
	if m.EndAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EndAt))
		i--
		dAtA[i] = 0x40
	}
	if m.StartAt != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectionCreator) > 0 {
		i -= len(m.CollectionCreator)
		copy(dAtA[i:], m.CollectionCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CollectionCreator)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceId) > 0 {
		i -= len(m.MarketplaceId)
		copy(dAtA[i:], m.MarketplaceId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketplaceCreator) > 0 {
		i -= len(m.MarketplaceCreator)
		copy(dAtA[i:], m.MarketplaceCreator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketplaceCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetChainValidatorBridgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainValidatorBridgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainValidatorBridgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainValidatorBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainValidatorBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainValidatorBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainValidatorBridge.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetLastEpochBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastEpochBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastEpochsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEpochsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrevEpochBlock != 0 {
		n += 1 + sovQuery(uint64(m.PrevEpochBlock))
	}
	if m.NextEpochBlock != 0 {
		n += 1 + sovQuery(uint64(m.NextEpochBlock))
	}
	if m.BlockStart != 0 {
		n += 1 + sovQuery(uint64(m.BlockStart))
	}
	if m.BlockEnd != 0 {
		n += 1 + sovQuery(uint64(m.BlockEnd))
	}
	l = len(m.Staked)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.StartAt != 0 {
		n += 1 + sovQuery(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovQuery(uint64(m.EndAt))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastEpochsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Epochs) > 0 {
		for _, e := range m.Epochs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetNftStakeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftStakeListItemResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Cw20ContractAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Shares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	if m.StakedAt != 0 {
		n += 1 + sovQuery(uint64(m.StakedAt))
	}
	if m.UnstakedAt != 0 {
		n += 1 + sovQuery(uint64(m.UnstakedAt))
	}
	if m.StakedEpoch != 0 {
		n += 1 + sovQuery(uint64(m.StakedEpoch))
	}
	return n
}

func (m *QueryGetNftStakeBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LastWithdrawnAt != 0 {
		n += 1 + sovQuery(uint64(m.LastWithdrawnAt))
	}
	if m.LastWithdrawnEpoch != 0 {
		n += 1 + sovQuery(uint64(m.LastWithdrawnEpoch))
	}
	return n
}

func (m *QueryGetNftStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Staked) > 0 {
		for _, e := range m.Staked {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNftBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketplaceCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketplaceId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionCreator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.StartAt != 0 {
		n += 1 + sovQuery(uint64(m.StartAt))
	}
	if m.EndAt != 0 {
		n += 1 + sovQuery(uint64(m.EndAt))
	}
	l = len(m.StakingChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.StakingValidator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetChainValidatorBridgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainValidatorBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainValidatorBridge.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetLastEpochBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastEpochBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastEpochBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastEpochBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastEpochBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastEpochBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastEpochsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastEpochsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastEpochsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEpochsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEpochsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEpochsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevEpochBlock", wireType)
			}
			m.PrevEpochBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevEpochBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochBlock", wireType)
			}
			m.NextEpochBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockStart", wireType)
			}
			m.BlockStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockStart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockEnd", wireType)
			}
			m.BlockEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staked = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastEpochsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastEpochsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastEpochsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Epochs = append(m.Epochs, &QueryGetEpochsResponse{})
			if err := m.Epochs[len(m.Epochs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftStakeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftStakeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftStakeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftStakeListItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftStakeListItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftStakeListItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types1.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedAt", wireType)
			}
			m.StakedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakedAt", wireType)
			}
			m.UnstakedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedEpoch", wireType)
			}
			m.StakedEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StakedEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftStakeBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftStakeBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftStakeBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawnAt", wireType)
			}
			m.LastWithdrawnAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawnAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawnEpoch", wireType)
			}
			m.LastWithdrawnEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawnEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staked = append(m.Staked, &QueryGetNftStakeListItemResponse{})
			if err := m.Staked[len(m.Staked)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &QueryGetNftStakeBalanceResponse{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNftBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNftBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNftBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &types.Coin{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			m.StartAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			m.EndAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingValidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingValidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainValidatorBridgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainValidatorBridgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainValidatorBridgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainValidatorBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainValidatorBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainValidatorBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainValidatorBridge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainValidatorBridge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
