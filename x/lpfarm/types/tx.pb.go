// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aumega/lpfarm/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreatePrivatePlan struct {
	Creator           string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Description       string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	RewardAllocations []RewardAllocation `protobuf:"bytes,3,rep,name=reward_allocations,json=rewardAllocations,proto3" json:"reward_allocations"`
	StartTime         time.Time          `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime           time.Time          `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
}

func (m *MsgCreatePrivatePlan) Reset()         { *m = MsgCreatePrivatePlan{} }
func (m *MsgCreatePrivatePlan) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePrivatePlan) ProtoMessage()    {}
func (*MsgCreatePrivatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{0}
}
func (m *MsgCreatePrivatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePrivatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePrivatePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePrivatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePrivatePlan.Merge(m, src)
}
func (m *MsgCreatePrivatePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePrivatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePrivatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePrivatePlan proto.InternalMessageInfo

type MsgCreatePrivatePlanResponse struct {
	PlanId             uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	FarmingPoolAddress string `protobuf:"bytes,2,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty"`
}

func (m *MsgCreatePrivatePlanResponse) Reset()         { *m = MsgCreatePrivatePlanResponse{} }
func (m *MsgCreatePrivatePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePrivatePlanResponse) ProtoMessage()    {}
func (*MsgCreatePrivatePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{1}
}
func (m *MsgCreatePrivatePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePrivatePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePrivatePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePrivatePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePrivatePlanResponse.Merge(m, src)
}
func (m *MsgCreatePrivatePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePrivatePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePrivatePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePrivatePlanResponse proto.InternalMessageInfo

type MsgTerminatePrivatePlan struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PlanId  uint64 `protobuf:"varint,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *MsgTerminatePrivatePlan) Reset()         { *m = MsgTerminatePrivatePlan{} }
func (m *MsgTerminatePrivatePlan) String() string { return proto.CompactTextString(m) }
func (*MsgTerminatePrivatePlan) ProtoMessage()    {}
func (*MsgTerminatePrivatePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{2}
}
func (m *MsgTerminatePrivatePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminatePrivatePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminatePrivatePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminatePrivatePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminatePrivatePlan.Merge(m, src)
}
func (m *MsgTerminatePrivatePlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminatePrivatePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminatePrivatePlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminatePrivatePlan proto.InternalMessageInfo

type MsgTerminatePrivatePlanResponse struct {
}

func (m *MsgTerminatePrivatePlanResponse) Reset()         { *m = MsgTerminatePrivatePlanResponse{} }
func (m *MsgTerminatePrivatePlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTerminatePrivatePlanResponse) ProtoMessage()    {}
func (*MsgTerminatePrivatePlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{3}
}
func (m *MsgTerminatePrivatePlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTerminatePrivatePlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTerminatePrivatePlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTerminatePrivatePlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTerminatePrivatePlanResponse.Merge(m, src)
}
func (m *MsgTerminatePrivatePlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTerminatePrivatePlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTerminatePrivatePlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTerminatePrivatePlanResponse proto.InternalMessageInfo

type MsgFarm struct {
	Farmer string     `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	Coin   types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgFarm) Reset()         { *m = MsgFarm{} }
func (m *MsgFarm) String() string { return proto.CompactTextString(m) }
func (*MsgFarm) ProtoMessage()    {}
func (*MsgFarm) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{4}
}
func (m *MsgFarm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFarm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFarm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFarm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFarm.Merge(m, src)
}
func (m *MsgFarm) XXX_Size() int {
	return m.Size()
}
func (m *MsgFarm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFarm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFarm proto.InternalMessageInfo

type MsgFarmResponse struct {
	WithdrawnRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=withdrawn_rewards,json=withdrawnRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_rewards"`
}

func (m *MsgFarmResponse) Reset()         { *m = MsgFarmResponse{} }
func (m *MsgFarmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFarmResponse) ProtoMessage()    {}
func (*MsgFarmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{5}
}
func (m *MsgFarmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFarmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFarmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFarmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFarmResponse.Merge(m, src)
}
func (m *MsgFarmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFarmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFarmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFarmResponse proto.InternalMessageInfo

type MsgUnfarm struct {
	Farmer string     `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	Coin   types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
}

func (m *MsgUnfarm) Reset()         { *m = MsgUnfarm{} }
func (m *MsgUnfarm) String() string { return proto.CompactTextString(m) }
func (*MsgUnfarm) ProtoMessage()    {}
func (*MsgUnfarm) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{6}
}
func (m *MsgUnfarm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfarm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfarm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfarm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfarm.Merge(m, src)
}
func (m *MsgUnfarm) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfarm) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfarm.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfarm proto.InternalMessageInfo

type MsgUnfarmResponse struct {
	WithdrawnRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=withdrawn_rewards,json=withdrawnRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_rewards"`
}

func (m *MsgUnfarmResponse) Reset()         { *m = MsgUnfarmResponse{} }
func (m *MsgUnfarmResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnfarmResponse) ProtoMessage()    {}
func (*MsgUnfarmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{7}
}
func (m *MsgUnfarmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnfarmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnfarmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnfarmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnfarmResponse.Merge(m, src)
}
func (m *MsgUnfarmResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnfarmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnfarmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnfarmResponse proto.InternalMessageInfo

type MsgHarvest struct {
	Farmer string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgHarvest) Reset()         { *m = MsgHarvest{} }
func (m *MsgHarvest) String() string { return proto.CompactTextString(m) }
func (*MsgHarvest) ProtoMessage()    {}
func (*MsgHarvest) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{8}
}
func (m *MsgHarvest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHarvest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHarvest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHarvest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHarvest.Merge(m, src)
}
func (m *MsgHarvest) XXX_Size() int {
	return m.Size()
}
func (m *MsgHarvest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHarvest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHarvest proto.InternalMessageInfo

type MsgHarvestResponse struct {
	WithdrawnRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=withdrawn_rewards,json=withdrawnRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_rewards"`
}

func (m *MsgHarvestResponse) Reset()         { *m = MsgHarvestResponse{} }
func (m *MsgHarvestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHarvestResponse) ProtoMessage()    {}
func (*MsgHarvestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_936bfdef08aacb2a, []int{9}
}
func (m *MsgHarvestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHarvestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHarvestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHarvestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHarvestResponse.Merge(m, src)
}
func (m *MsgHarvestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHarvestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHarvestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHarvestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreatePrivatePlan)(nil), "aumega.lpfarm.v1beta1.MsgCreatePrivatePlan")
	proto.RegisterType((*MsgCreatePrivatePlanResponse)(nil), "aumega.lpfarm.v1beta1.MsgCreatePrivatePlanResponse")
	proto.RegisterType((*MsgTerminatePrivatePlan)(nil), "aumega.lpfarm.v1beta1.MsgTerminatePrivatePlan")
	proto.RegisterType((*MsgTerminatePrivatePlanResponse)(nil), "aumega.lpfarm.v1beta1.MsgTerminatePrivatePlanResponse")
	proto.RegisterType((*MsgFarm)(nil), "aumega.lpfarm.v1beta1.MsgFarm")
	proto.RegisterType((*MsgFarmResponse)(nil), "aumega.lpfarm.v1beta1.MsgFarmResponse")
	proto.RegisterType((*MsgUnfarm)(nil), "aumega.lpfarm.v1beta1.MsgUnfarm")
	proto.RegisterType((*MsgUnfarmResponse)(nil), "aumega.lpfarm.v1beta1.MsgUnfarmResponse")
	proto.RegisterType((*MsgHarvest)(nil), "aumega.lpfarm.v1beta1.MsgHarvest")
	proto.RegisterType((*MsgHarvestResponse)(nil), "aumega.lpfarm.v1beta1.MsgHarvestResponse")
}

func init() { proto.RegisterFile("aumega/lpfarm/v1beta1/tx.proto", fileDescriptor_936bfdef08aacb2a) }

var fileDescriptor_936bfdef08aacb2a = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0x8f, 0x9b, 0x34, 0x69, 0x27, 0x87, 0xef, 0xcb, 0x2a, 0xdf, 0xd7, 0x60, 0x21, 0x27, 0xf5,
	0x01, 0x82, 0x00, 0xbb, 0x4d, 0x25, 0x0e, 0x5c, 0x50, 0x1b, 0x09, 0x01, 0x22, 0xa8, 0xb2, 0xca,
	0x1f, 0x21, 0xa4, 0x68, 0x13, 0x6f, 0x5d, 0x0b, 0xdb, 0x6b, 0xed, 0x3a, 0x6d, 0xb9, 0xf0, 0x02,
	0x08, 0xd4, 0xe7, 0xe0, 0x01, 0x78, 0x86, 0x1e, 0x7b, 0xe4, 0x44, 0xa1, 0x7d, 0x0c, 0x2e, 0x68,
	0xd7, 0x6b, 0x13, 0x41, 0xdc, 0x52, 0x09, 0x09, 0x4e, 0xf6, 0xcc, 0xef, 0x37, 0xbf, 0xf1, 0xcc,
	0xce, 0xac, 0xc1, 0xc0, 0x93, 0x90, 0x78, 0xd8, 0x0e, 0xe2, 0x6d, 0xcc, 0x42, 0x7b, 0x77, 0x75,
	0x44, 0x12, 0xbc, 0x6a, 0x27, 0xfb, 0x56, 0xcc, 0x68, 0x42, 0xd1, 0x7f, 0x29, 0x6e, 0xa5, 0xb8,
	0xa5, 0x70, 0xdd, 0x18, 0x53, 0x1e, 0x52, 0x6e, 0x8f, 0x30, 0x27, 0x79, 0xd0, 0x98, 0xfa, 0x51,
	0x1a, 0xa6, 0x37, 0x3d, 0xea, 0x51, 0xf9, 0x6a, 0x8b, 0x37, 0xe5, 0x6d, 0x7b, 0x94, 0x7a, 0x01,
	0xb1, 0xa5, 0x35, 0x9a, 0x6c, 0xdb, 0x89, 0x1f, 0x12, 0x9e, 0xe0, 0x30, 0x56, 0x04, 0x73, 0xf6,
	0xd7, 0xa8, 0xe4, 0x92, 0x63, 0x7e, 0x98, 0x83, 0xe6, 0x80, 0x7b, 0x7d, 0x46, 0x70, 0x42, 0x36,
	0x99, 0xbf, 0x2b, 0x1e, 0x01, 0x8e, 0x50, 0x0b, 0x6a, 0x63, 0xe1, 0xa4, 0xac, 0xa5, 0x75, 0xb4,
	0xee, 0xa2, 0x93, 0x99, 0xa8, 0x03, 0x75, 0x97, 0xf0, 0x31, 0xf3, 0xe3, 0xc4, 0xa7, 0x51, 0x6b,
	0x4e, 0xa2, 0xd3, 0x2e, 0xf4, 0x02, 0x10, 0x23, 0x7b, 0x98, 0xb9, 0x43, 0x1c, 0x04, 0x74, 0x8c,
	0x85, 0x93, 0xb7, 0xca, 0x9d, 0x72, 0xb7, 0xde, 0xbb, 0x6a, 0xcd, 0xec, 0x81, 0xe5, 0xc8, 0x80,
	0xf5, 0x9c, 0xbf, 0x51, 0x39, 0xfc, 0xd4, 0x2e, 0x39, 0x0d, 0xf6, 0x83, 0x9f, 0xa3, 0x3e, 0x00,
	0x4f, 0x30, 0x4b, 0x86, 0xa2, 0xde, 0x56, 0xa5, 0xa3, 0x75, 0xeb, 0x3d, 0xdd, 0x4a, 0x9b, 0x61,
	0x65, 0xcd, 0xb0, 0xb6, 0xb2, 0x66, 0x6c, 0x2c, 0x08, 0xa1, 0x83, 0xe3, 0xb6, 0xe6, 0x2c, 0xca,
	0x38, 0x81, 0xa0, 0x3b, 0xb0, 0x40, 0x22, 0x37, 0x95, 0x98, 0xbf, 0x80, 0x44, 0x8d, 0x44, 0xae,
	0xf0, 0x9b, 0x3e, 0x5c, 0x9e, 0xd5, 0x37, 0x87, 0xf0, 0x98, 0x46, 0x9c, 0xa0, 0x25, 0xa8, 0xc5,
	0x01, 0x8e, 0x86, 0xbe, 0x2b, 0xfb, 0x57, 0x71, 0xaa, 0xc2, 0xbc, 0xef, 0xa2, 0x15, 0x68, 0x8a,
	0xc2, 0xfd, 0xc8, 0x1b, 0xc6, 0x94, 0x06, 0x43, 0xec, 0xba, 0x8c, 0x70, 0xae, 0xfa, 0x88, 0x14,
	0xb6, 0x49, 0x69, 0xb0, 0x9e, 0x22, 0xe6, 0x43, 0x58, 0x1a, 0x70, 0x6f, 0x8b, 0x08, 0xe0, 0x97,
	0x4f, 0x69, 0x2a, 0xff, 0xdc, 0x74, 0x7e, 0x73, 0x19, 0xda, 0x05, 0x6a, 0xd9, 0xb7, 0x9b, 0x4f,
	0xa0, 0x36, 0xe0, 0xde, 0x5d, 0xcc, 0x42, 0xf4, 0x3f, 0x54, 0xc5, 0x17, 0x91, 0x4c, 0x5f, 0x59,
	0x68, 0x0d, 0x2a, 0x62, 0x40, 0xa5, 0x76, 0xbd, 0x77, 0xc9, 0x4a, 0x27, 0xd8, 0x12, 0x13, 0x9c,
	0x1f, 0x69, 0x9f, 0xfa, 0xd9, 0x31, 0x4a, 0xb2, 0xf9, 0x46, 0x83, 0x7f, 0x94, 0x70, 0xde, 0xa7,
	0x7d, 0x68, 0xec, 0xf9, 0xc9, 0x8e, 0xcb, 0xf0, 0x5e, 0x34, 0x4c, 0x0f, 0x9b, 0xb7, 0x34, 0x39,
	0x2a, 0x67, 0xa8, 0xae, 0x08, 0xd5, 0xf7, 0xc7, 0xed, 0xae, 0xe7, 0x27, 0x3b, 0x93, 0x91, 0x35,
	0xa6, 0xa1, 0xad, 0x96, 0x28, 0x7d, 0xdc, 0xe4, 0xee, 0x4b, 0x3b, 0x79, 0x15, 0x13, 0x2e, 0x03,
	0xb8, 0xf3, 0x6f, 0x9e, 0x25, 0x9d, 0x34, 0x6e, 0x3e, 0x83, 0xc5, 0x01, 0xf7, 0x1e, 0x47, 0xdb,
	0xbf, 0xbd, 0xce, 0xb7, 0x1a, 0x34, 0x72, 0xe9, 0xbf, 0xa0, 0xd2, 0xdb, 0x00, 0x03, 0xee, 0xdd,
	0xc3, 0x6c, 0x97, 0xf0, 0xa4, 0xb0, 0xd4, 0x26, 0xcc, 0xbb, 0x24, 0xa2, 0xa1, 0x9a, 0xc4, 0xd4,
	0x30, 0xdf, 0x69, 0x80, 0xbe, 0x07, 0xff, 0xf9, 0x62, 0x7a, 0x5f, 0xcb, 0x50, 0x1e, 0x70, 0x0f,
	0x4d, 0xa0, 0xf1, 0xf3, 0xad, 0x75, 0xbd, 0xe0, 0x76, 0x99, 0xb5, 0xaa, 0xfa, 0xda, 0x05, 0xc8,
	0x79, 0xe1, 0xaf, 0xa1, 0x39, 0x73, 0x13, 0xad, 0x62, 0xb1, 0x59, 0x7c, 0xfd, 0xd6, 0xc5, 0xf8,
	0x79, 0xfe, 0x47, 0x50, 0x91, 0x8b, 0x69, 0x14, 0xc7, 0x0b, 0x5c, 0xbf, 0x72, 0x36, 0x9e, 0xeb,
	0x6d, 0x41, 0x55, 0xad, 0x40, 0xa7, 0x38, 0x22, 0x65, 0xe8, 0xdd, 0xf3, 0x18, 0xb9, 0xea, 0x53,
	0xa8, 0x65, 0xe3, 0xb6, 0x5c, 0x1c, 0xa4, 0x28, 0xfa, 0xb5, 0x73, 0x29, 0x99, 0xf0, 0xc6, 0x83,
	0xc3, 0x2f, 0x46, 0xe9, 0xf0, 0xc4, 0xd0, 0x8e, 0x4e, 0x0c, 0xed, 0xf3, 0x89, 0xa1, 0x1d, 0x9c,
	0x1a, 0xa5, 0xa3, 0x53, 0xa3, 0xf4, 0xf1, 0xd4, 0x28, 0x3d, 0xbf, 0x31, 0x35, 0x57, 0xeb, 0x52,
	0xb2, 0xbf, 0x83, 0xfd, 0xc8, 0x56, 0x3f, 0xc2, 0xfd, 0xec, 0x57, 0x28, 0x27, 0x6c, 0x54, 0x95,
	0x37, 0xfd, 0xda, 0xb7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xed, 0x11, 0xbf, 0xb6, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreatePrivatePlan(ctx context.Context, in *MsgCreatePrivatePlan, opts ...grpc.CallOption) (*MsgCreatePrivatePlanResponse, error)
	TerminatePrivatePlan(ctx context.Context, in *MsgTerminatePrivatePlan, opts ...grpc.CallOption) (*MsgTerminatePrivatePlanResponse, error)
	Farm(ctx context.Context, in *MsgFarm, opts ...grpc.CallOption) (*MsgFarmResponse, error)
	Unfarm(ctx context.Context, in *MsgUnfarm, opts ...grpc.CallOption) (*MsgUnfarmResponse, error)
	Harvest(ctx context.Context, in *MsgHarvest, opts ...grpc.CallOption) (*MsgHarvestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreatePrivatePlan(ctx context.Context, in *MsgCreatePrivatePlan, opts ...grpc.CallOption) (*MsgCreatePrivatePlanResponse, error) {
	out := new(MsgCreatePrivatePlanResponse)
	err := c.cc.Invoke(ctx, "/aumega.lpfarm.v1beta1.Msg/CreatePrivatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TerminatePrivatePlan(ctx context.Context, in *MsgTerminatePrivatePlan, opts ...grpc.CallOption) (*MsgTerminatePrivatePlanResponse, error) {
	out := new(MsgTerminatePrivatePlanResponse)
	err := c.cc.Invoke(ctx, "/aumega.lpfarm.v1beta1.Msg/TerminatePrivatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Farm(ctx context.Context, in *MsgFarm, opts ...grpc.CallOption) (*MsgFarmResponse, error) {
	out := new(MsgFarmResponse)
	err := c.cc.Invoke(ctx, "/aumega.lpfarm.v1beta1.Msg/Farm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Unfarm(ctx context.Context, in *MsgUnfarm, opts ...grpc.CallOption) (*MsgUnfarmResponse, error) {
	out := new(MsgUnfarmResponse)
	err := c.cc.Invoke(ctx, "/aumega.lpfarm.v1beta1.Msg/Unfarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Harvest(ctx context.Context, in *MsgHarvest, opts ...grpc.CallOption) (*MsgHarvestResponse, error) {
	out := new(MsgHarvestResponse)
	err := c.cc.Invoke(ctx, "/aumega.lpfarm.v1beta1.Msg/Harvest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreatePrivatePlan(context.Context, *MsgCreatePrivatePlan) (*MsgCreatePrivatePlanResponse, error)
	TerminatePrivatePlan(context.Context, *MsgTerminatePrivatePlan) (*MsgTerminatePrivatePlanResponse, error)
	Farm(context.Context, *MsgFarm) (*MsgFarmResponse, error)
	Unfarm(context.Context, *MsgUnfarm) (*MsgUnfarmResponse, error)
	Harvest(context.Context, *MsgHarvest) (*MsgHarvestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreatePrivatePlan(ctx context.Context, req *MsgCreatePrivatePlan) (*MsgCreatePrivatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivatePlan not implemented")
}
func (*UnimplementedMsgServer) TerminatePrivatePlan(ctx context.Context, req *MsgTerminatePrivatePlan) (*MsgTerminatePrivatePlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminatePrivatePlan not implemented")
}
func (*UnimplementedMsgServer) Farm(ctx context.Context, req *MsgFarm) (*MsgFarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Farm not implemented")
}
func (*UnimplementedMsgServer) Unfarm(ctx context.Context, req *MsgUnfarm) (*MsgUnfarmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfarm not implemented")
}
func (*UnimplementedMsgServer) Harvest(ctx context.Context, req *MsgHarvest) (*MsgHarvestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Harvest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreatePrivatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePrivatePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePrivatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aumega.lpfarm.v1beta1.Msg/CreatePrivatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePrivatePlan(ctx, req.(*MsgCreatePrivatePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TerminatePrivatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTerminatePrivatePlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TerminatePrivatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aumega.lpfarm.v1beta1.Msg/TerminatePrivatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TerminatePrivatePlan(ctx, req.(*MsgTerminatePrivatePlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Farm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFarm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Farm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aumega.lpfarm.v1beta1.Msg/Farm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Farm(ctx, req.(*MsgFarm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Unfarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnfarm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Unfarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aumega.lpfarm.v1beta1.Msg/Unfarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Unfarm(ctx, req.(*MsgUnfarm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Harvest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHarvest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Harvest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aumega.lpfarm.v1beta1.Msg/Harvest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Harvest(ctx, req.(*MsgHarvest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aumega.lpfarm.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrivatePlan",
			Handler:    _Msg_CreatePrivatePlan_Handler,
		},
		{
			MethodName: "TerminatePrivatePlan",
			Handler:    _Msg_TerminatePrivatePlan_Handler,
		},
		{
			MethodName: "Farm",
			Handler:    _Msg_Farm_Handler,
		},
		{
			MethodName: "Unfarm",
			Handler:    _Msg_Unfarm_Handler,
		},
		{
			MethodName: "Harvest",
			Handler:    _Msg_Harvest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aumega/lpfarm/v1beta1/tx.proto",
}

func (m *MsgCreatePrivatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePrivatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePrivatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.RewardAllocations) > 0 {
		for iNdEx := len(m.RewardAllocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardAllocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePrivatePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePrivatePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePrivatePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTerminatePrivatePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminatePrivatePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminatePrivatePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTerminatePrivatePlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTerminatePrivatePlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTerminatePrivatePlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFarm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFarm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFarmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFarmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawnRewards) > 0 {
		for iNdEx := len(m.WithdrawnRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnfarm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfarm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfarm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnfarmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnfarmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnfarmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawnRewards) > 0 {
		for iNdEx := len(m.WithdrawnRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgHarvest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHarvest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHarvest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgHarvestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHarvestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHarvestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawnRewards) > 0 {
		for iNdEx := len(m.WithdrawnRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreatePrivatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.RewardAllocations) > 0 {
		for _, e := range m.RewardAllocations {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreatePrivatePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTerminatePrivatePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PlanId != 0 {
		n += 1 + sovTx(uint64(m.PlanId))
	}
	return n
}

func (m *MsgTerminatePrivatePlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFarm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgFarmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawnRewards) > 0 {
		for _, e := range m.WithdrawnRewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUnfarm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnfarmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawnRewards) > 0 {
		for _, e := range m.WithdrawnRewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgHarvest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgHarvestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawnRewards) > 0 {
		for _, e := range m.WithdrawnRewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreatePrivatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePrivatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePrivatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAllocations = append(m.RewardAllocations, RewardAllocation{})
			if err := m.RewardAllocations[len(m.RewardAllocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePrivatePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePrivatePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePrivatePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminatePrivatePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminatePrivatePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminatePrivatePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTerminatePrivatePlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTerminatePrivatePlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTerminatePrivatePlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnRewards = append(m.WithdrawnRewards, types.Coin{})
			if err := m.WithdrawnRewards[len(m.WithdrawnRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfarm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfarm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfarm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnfarmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnfarmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnfarmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnRewards = append(m.WithdrawnRewards, types.Coin{})
			if err := m.WithdrawnRewards[len(m.WithdrawnRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHarvest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHarvest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHarvest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHarvestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHarvestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHarvestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnRewards = append(m.WithdrawnRewards, types.Coin{})
			if err := m.WithdrawnRewards[len(m.WithdrawnRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
