// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/lpfarm/v1beta1/lpfarm.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Plan struct {
	Id                 uint64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Description        string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	FarmingPoolAddress string             `protobuf:"bytes,3,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty"`
	TerminationAddress string             `protobuf:"bytes,4,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty"`
	RewardAllocations  []RewardAllocation `protobuf:"bytes,5,rep,name=reward_allocations,json=rewardAllocations,proto3" json:"reward_allocations"`
	StartTime          time.Time          `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime            time.Time          `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	IsPrivate          bool               `protobuf:"varint,8,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	IsTerminated       bool               `protobuf:"varint,9,opt,name=is_terminated,json=isTerminated,proto3" json:"is_terminated,omitempty"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1dce7fa499e9613, []int{0}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

type RewardAllocation struct {
	Denom         string                                   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	PairId        uint64                                   `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	RewardsPerDay github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=rewards_per_day,json=rewardsPerDay,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards_per_day"`
}

func (m *RewardAllocation) Reset()         { *m = RewardAllocation{} }
func (m *RewardAllocation) String() string { return proto.CompactTextString(m) }
func (*RewardAllocation) ProtoMessage()    {}
func (*RewardAllocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1dce7fa499e9613, []int{1}
}
func (m *RewardAllocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardAllocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardAllocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardAllocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardAllocation.Merge(m, src)
}
func (m *RewardAllocation) XXX_Size() int {
	return m.Size()
}
func (m *RewardAllocation) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardAllocation.DiscardUnknown(m)
}

var xxx_messageInfo_RewardAllocation proto.InternalMessageInfo

type Farm struct {
	TotalFarmingAmount cosmossdk_io_math.Int                       `protobuf:"bytes,1,opt,name=total_farming_amount,json=totalFarmingAmount,proto3,customtype=cosmossdk.io/math.Int" json:"total_farming_amount"`
	CurrentRewards     github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=current_rewards,json=currentRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"current_rewards"`
	OutstandingRewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=outstanding_rewards,json=outstandingRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"outstanding_rewards"`
	Period             uint64                                      `protobuf:"varint,4,opt,name=period,proto3" json:"period,omitempty"`
	PreviousShare      *cosmossdk_io_math.LegacyDec                `protobuf:"bytes,5,opt,name=previous_share,json=previousShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"previous_share,omitempty"`
}

func (m *Farm) Reset()         { *m = Farm{} }
func (m *Farm) String() string { return proto.CompactTextString(m) }
func (*Farm) ProtoMessage()    {}
func (*Farm) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1dce7fa499e9613, []int{2}
}
func (m *Farm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Farm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Farm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Farm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Farm.Merge(m, src)
}
func (m *Farm) XXX_Size() int {
	return m.Size()
}
func (m *Farm) XXX_DiscardUnknown() {
	xxx_messageInfo_Farm.DiscardUnknown(m)
}

var xxx_messageInfo_Farm proto.InternalMessageInfo

type Position struct {
	Farmer              string                `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	Denom               string                `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	FarmingAmount       cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=farming_amount,json=farmingAmount,proto3,customtype=cosmossdk.io/math.Int" json:"farming_amount"`
	PreviousPeriod      uint64                `protobuf:"varint,4,opt,name=previous_period,json=previousPeriod,proto3" json:"previous_period,omitempty"`
	StartingBlockHeight int64                 `protobuf:"varint,5,opt,name=starting_block_height,json=startingBlockHeight,proto3" json:"starting_block_height,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1dce7fa499e9613, []int{3}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

type HistoricalRewards struct {
	CumulativeUnitRewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=cumulative_unit_rewards,json=cumulativeUnitRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"cumulative_unit_rewards"`
	ReferenceCount        uint32                                      `protobuf:"varint,2,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty"`
}

func (m *HistoricalRewards) Reset()         { *m = HistoricalRewards{} }
func (m *HistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewards) ProtoMessage()    {}
func (*HistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1dce7fa499e9613, []int{4}
}
func (m *HistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewards.Merge(m, src)
}
func (m *HistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewards proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Plan)(nil), "mantrachain.lpfarm.v1beta1.Plan")
	proto.RegisterType((*RewardAllocation)(nil), "mantrachain.lpfarm.v1beta1.RewardAllocation")
	proto.RegisterType((*Farm)(nil), "mantrachain.lpfarm.v1beta1.Farm")
	proto.RegisterType((*Position)(nil), "mantrachain.lpfarm.v1beta1.Position")
	proto.RegisterType((*HistoricalRewards)(nil), "mantrachain.lpfarm.v1beta1.HistoricalRewards")
}

func init() {
	proto.RegisterFile("mantrachain/lpfarm/v1beta1/lpfarm.proto", fileDescriptor_b1dce7fa499e9613)
}

var fileDescriptor_b1dce7fa499e9613 = []byte{
	// 859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x25, 0x59, 0x96, 0xd6, 0x95, 0xdc, 0xac, 0xed, 0x84, 0x75, 0x1b, 0x4a, 0x50, 0x0f,
	0x16, 0xd0, 0x86, 0x4c, 0x9c, 0xde, 0x0b, 0xc9, 0x86, 0x91, 0x00, 0xfd, 0x11, 0x58, 0xf7, 0xd2,
	0x0b, 0xb1, 0xe2, 0xae, 0xa9, 0x85, 0xc9, 0x5d, 0x62, 0x77, 0xe9, 0xd6, 0x3d, 0xf6, 0xd6, 0x5b,
	0x9e, 0xa3, 0x0f, 0x50, 0xf4, 0x11, 0x74, 0xcc, 0xb1, 0x48, 0x01, 0xa7, 0xb5, 0x5f, 0xa4, 0xd8,
	0x5d, 0x92, 0x56, 0xdc, 0x16, 0x48, 0x0f, 0x39, 0x89, 0xf3, 0xf3, 0xcd, 0xcc, 0xf7, 0xcd, 0x50,
	0x04, 0x07, 0x19, 0x62, 0x4a, 0xa0, 0x78, 0x89, 0x28, 0x0b, 0xd2, 0xfc, 0x0c, 0x89, 0x2c, 0xb8,
	0x78, 0xb2, 0x20, 0x0a, 0x3d, 0x29, 0x4d, 0x3f, 0x17, 0x5c, 0x71, 0xb8, 0xbf, 0x96, 0xe8, 0x97,
	0x91, 0x32, 0x71, 0xdf, 0x8b, 0xb9, 0xcc, 0xb8, 0x0c, 0x16, 0x48, 0x92, 0x1a, 0x1d, 0x73, 0xca,
	0x2c, 0x76, 0x7f, 0x37, 0xe1, 0x09, 0x37, 0x8f, 0x81, 0x7e, 0x2a, 0xbd, 0x5e, 0xc2, 0x79, 0x92,
	0x92, 0xc0, 0x58, 0x8b, 0xe2, 0x2c, 0xc0, 0x85, 0x40, 0x8a, 0xf2, 0x0a, 0x35, 0xbc, 0x1b, 0x57,
	0x34, 0x23, 0x52, 0xa1, 0x2c, 0xb7, 0x09, 0xe3, 0x55, 0x0b, 0xb4, 0xe7, 0x29, 0x62, 0x70, 0x00,
	0x9a, 0x14, 0xbb, 0xce, 0xc8, 0x99, 0xb4, 0xc3, 0x26, 0xc5, 0x70, 0x04, 0xb6, 0x30, 0x91, 0xb1,
	0xa0, 0xb9, 0x2e, 0xe7, 0x36, 0x47, 0xce, 0xa4, 0x17, 0xae, 0xbb, 0xe0, 0x63, 0xb0, 0xab, 0x19,
	0x50, 0x96, 0x44, 0x39, 0xe7, 0x69, 0x84, 0x30, 0x16, 0x44, 0x4a, 0xb7, 0x65, 0x52, 0x61, 0x19,
	0x9b, 0x73, 0x9e, 0x4e, 0x6d, 0x04, 0x06, 0x60, 0x47, 0x11, 0xed, 0x35, 0x23, 0xd6, 0x80, 0xb6,
	0x05, 0xac, 0x85, 0x2a, 0x00, 0x02, 0x50, 0x90, 0xef, 0x91, 0xc0, 0x11, 0x4a, 0x53, 0x1e, 0x9b,
	0x98, 0x74, 0x37, 0x46, 0xad, 0xc9, 0xd6, 0xe1, 0xa7, 0xfe, 0x7f, 0xab, 0xe9, 0x87, 0x06, 0x35,
	0xad, 0x41, 0xb3, 0xf6, 0xea, 0x6a, 0xd8, 0x08, 0xef, 0x89, 0x3b, 0x7e, 0x09, 0x8f, 0x00, 0x90,
	0x0a, 0x09, 0x15, 0x69, 0x65, 0xdc, 0xce, 0xc8, 0x99, 0x6c, 0x1d, 0xee, 0xfb, 0x56, 0x36, 0xbf,
	0x92, 0xcd, 0x3f, 0xad, 0x64, 0x9b, 0x75, 0x75, 0xa1, 0x17, 0xaf, 0x87, 0x4e, 0xd8, 0x33, 0x38,
	0x1d, 0x81, 0x9f, 0x83, 0x2e, 0x61, 0xd8, 0x96, 0xd8, 0xfc, 0x1f, 0x25, 0x36, 0x09, 0xc3, 0xa6,
	0xc0, 0x43, 0x00, 0xa8, 0x8c, 0x72, 0x41, 0x2f, 0x90, 0x22, 0x6e, 0x77, 0xe4, 0x4c, 0xba, 0x61,
	0x8f, 0xca, 0xb9, 0x75, 0xc0, 0x8f, 0x41, 0x9f, 0xca, 0xa8, 0x12, 0x88, 0x60, 0xb7, 0x67, 0x32,
	0xde, 0xa3, 0xf2, 0xb4, 0xf6, 0x8d, 0x7f, 0x75, 0xc0, 0xfb, 0x77, 0x79, 0xc3, 0x5d, 0xb0, 0x81,
	0x09, 0xe3, 0x99, 0xd9, 0x6c, 0x2f, 0xb4, 0x06, 0x7c, 0x00, 0x36, 0x73, 0x44, 0x45, 0x44, 0xb1,
	0x59, 0x6c, 0x3b, 0xec, 0x68, 0xf3, 0x39, 0x86, 0x12, 0x6c, 0x5b, 0x89, 0x64, 0x94, 0x13, 0x11,
	0x61, 0x74, 0xe9, 0xb6, 0x8c, 0xda, 0x1f, 0xf8, 0xf6, 0x3e, 0x7d, 0x7d, 0x9f, 0xb5, 0xcc, 0x47,
	0x9c, 0xb2, 0xd9, 0x63, 0x4d, 0xe7, 0x97, 0xd7, 0xc3, 0x49, 0x42, 0xd5, 0xb2, 0x58, 0xf8, 0x31,
	0xcf, 0x82, 0xf2, 0x98, 0xed, 0xcf, 0x23, 0x89, 0xcf, 0x03, 0x75, 0x99, 0x13, 0x69, 0x00, 0x32,
	0xec, 0x97, 0x3d, 0xe6, 0x44, 0x1c, 0xa3, 0xcb, 0xf1, 0x6f, 0x2d, 0xd0, 0x3e, 0x41, 0x22, 0x83,
	0x5f, 0x83, 0x5d, 0xc5, 0x15, 0x4a, 0xa3, 0xea, 0xae, 0x50, 0xc6, 0x0b, 0xa6, 0xec, 0xec, 0xb3,
	0x87, 0xba, 0xcf, 0xab, 0xab, 0xe1, 0x9e, 0xad, 0x2a, 0xf1, 0xb9, 0x4f, 0x79, 0x90, 0x21, 0xb5,
	0xf4, 0x9f, 0x33, 0x15, 0x42, 0x03, 0x3d, 0xb1, 0xc8, 0xa9, 0x01, 0xc2, 0x1f, 0xc1, 0x76, 0x5c,
	0x08, 0x41, 0x98, 0x8a, 0xca, 0x96, 0x6e, 0xd3, 0xd0, 0xf9, 0xe8, 0x5f, 0xe9, 0x1c, 0x93, 0xd8,
	0x30, 0x7a, 0x5a, 0x32, 0xfa, 0xe4, 0x2d, 0x18, 0x95, 0x18, 0x19, 0x0e, 0xca, 0x4e, 0x76, 0x05,
	0x12, 0xfe, 0xe4, 0x80, 0x1d, 0x5e, 0x28, 0xa9, 0x10, 0xc3, 0x9a, 0x4b, 0x35, 0x40, 0xeb, 0x5d,
	0x0d, 0x00, 0xd7, 0xba, 0x55, 0x43, 0xdc, 0x07, 0x9d, 0x9c, 0x08, 0xca, 0xb1, 0x79, 0xc9, 0xf4,
	0x9e, 0x8d, 0x05, 0x4f, 0xc0, 0x20, 0x17, 0xe4, 0x82, 0xf2, 0x42, 0x46, 0x72, 0x89, 0x04, 0x71,
	0x37, 0x8c, 0xc6, 0xc3, 0x57, 0x57, 0xc3, 0x0f, 0xff, 0xa9, 0xef, 0x17, 0x24, 0x41, 0xf1, 0xe5,
	0x31, 0x89, 0xc3, 0x7e, 0x05, 0xfb, 0x46, 0xa3, 0xc6, 0x7f, 0x38, 0xa0, 0x3b, 0xe7, 0x92, 0x9a,
	0x5b, 0xbb, 0x0f, 0x3a, 0x7a, 0x71, 0x44, 0x94, 0xc7, 0x56, 0x5a, 0xb7, 0x37, 0xd8, 0x5c, 0xbf,
	0xc1, 0x63, 0x30, 0xb8, 0xb3, 0xe6, 0xd6, 0xdb, 0xac, 0xb9, 0x7f, 0xf6, 0xc6, 0x86, 0x0f, 0xc0,
	0x76, 0x4d, 0xe4, 0x0d, 0xa6, 0x35, 0xbf, 0xb9, 0x65, 0x7c, 0x08, 0xf6, 0xcc, 0xfb, 0xaa, 0xfb,
	0x2d, 0x52, 0x1e, 0x9f, 0x47, 0x4b, 0x42, 0x93, 0xa5, 0x32, 0xc4, 0x5b, 0xe1, 0x4e, 0x15, 0x9c,
	0xe9, 0xd8, 0x33, 0x13, 0x1a, 0xaf, 0x1c, 0x70, 0xef, 0x19, 0x95, 0x8a, 0x0b, 0x1a, 0xa3, 0xb4,
	0xd2, 0xf4, 0x67, 0x07, 0x3c, 0x88, 0x8b, 0xac, 0x48, 0x91, 0xa2, 0x17, 0x24, 0x2a, 0x18, 0xbd,
	0xbd, 0x2e, 0xe7, 0x5d, 0x2d, 0x77, 0xef, 0xb6, 0xe3, 0xb7, 0x8c, 0xd6, 0x47, 0x76, 0xa0, 0xdf,
	0xd7, 0x33, 0x22, 0x08, 0x8b, 0x49, 0x14, 0x1b, 0x15, 0xb5, 0xc8, 0xfd, 0x70, 0x50, 0xbb, 0x8f,
	0xb4, 0x77, 0x16, 0xae, 0xfe, 0xf2, 0x1a, 0xab, 0x6b, 0xcf, 0x79, 0x79, 0xed, 0x39, 0x7f, 0x5e,
	0x7b, 0xce, 0x8b, 0x1b, 0xaf, 0xf1, 0xf2, 0xc6, 0x6b, 0xfc, 0x7e, 0xe3, 0x35, 0xbe, 0xfb, 0x6c,
	0x6d, 0x94, 0x2f, 0xa7, 0x5f, 0x9d, 0x86, 0xd3, 0x47, 0x27, 0x94, 0x21, 0x16, 0x93, 0x60, 0xfd,
	0xdb, 0xf6, 0x43, 0xf5, 0x75, 0x33, 0xc3, 0x2d, 0x3a, 0xe6, 0xbf, 0xed, 0xe9, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x94, 0x04, 0x7c, 0x55, 0x00, 0x07, 0x00, 0x00,
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsTerminated {
		i--
		if m.IsTerminated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsPrivate {
		i--
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLpfarm(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintLpfarm(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.RewardAllocations) > 0 {
		for iNdEx := len(m.RewardAllocations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardAllocations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpfarm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TerminationAddress) > 0 {
		i -= len(m.TerminationAddress)
		copy(dAtA[i:], m.TerminationAddress)
		i = encodeVarintLpfarm(dAtA, i, uint64(len(m.TerminationAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintLpfarm(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLpfarm(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLpfarm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RewardAllocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardAllocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardAllocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardsPerDay) > 0 {
		for iNdEx := len(m.RewardsPerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsPerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpfarm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PairId != 0 {
		i = encodeVarintLpfarm(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLpfarm(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Farm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Farm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Farm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviousShare != nil {
		{
			size := m.PreviousShare.Size()
			i -= size
			if _, err := m.PreviousShare.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintLpfarm(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Period != 0 {
		i = encodeVarintLpfarm(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpfarm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpfarm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.TotalFarmingAmount.Size()
		i -= size
		if _, err := m.TotalFarmingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLpfarm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartingBlockHeight != 0 {
		i = encodeVarintLpfarm(dAtA, i, uint64(m.StartingBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.PreviousPeriod != 0 {
		i = encodeVarintLpfarm(dAtA, i, uint64(m.PreviousPeriod))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.FarmingAmount.Size()
		i -= size
		if _, err := m.FarmingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLpfarm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLpfarm(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintLpfarm(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferenceCount != 0 {
		i = encodeVarintLpfarm(dAtA, i, uint64(m.ReferenceCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CumulativeUnitRewards) > 0 {
		for iNdEx := len(m.CumulativeUnitRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeUnitRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLpfarm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLpfarm(dAtA []byte, offset int, v uint64) int {
	offset -= sovLpfarm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLpfarm(uint64(m.Id))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLpfarm(uint64(l))
	}
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovLpfarm(uint64(l))
	}
	l = len(m.TerminationAddress)
	if l > 0 {
		n += 1 + l + sovLpfarm(uint64(l))
	}
	if len(m.RewardAllocations) > 0 {
		for _, e := range m.RewardAllocations {
			l = e.Size()
			n += 1 + l + sovLpfarm(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovLpfarm(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovLpfarm(uint64(l))
	if m.IsPrivate {
		n += 2
	}
	if m.IsTerminated {
		n += 2
	}
	return n
}

func (m *RewardAllocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLpfarm(uint64(l))
	}
	if m.PairId != 0 {
		n += 1 + sovLpfarm(uint64(m.PairId))
	}
	if len(m.RewardsPerDay) > 0 {
		for _, e := range m.RewardsPerDay {
			l = e.Size()
			n += 1 + l + sovLpfarm(uint64(l))
		}
	}
	return n
}

func (m *Farm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalFarmingAmount.Size()
	n += 1 + l + sovLpfarm(uint64(l))
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovLpfarm(uint64(l))
		}
	}
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovLpfarm(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovLpfarm(uint64(m.Period))
	}
	if m.PreviousShare != nil {
		l = m.PreviousShare.Size()
		n += 1 + l + sovLpfarm(uint64(l))
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovLpfarm(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLpfarm(uint64(l))
	}
	l = m.FarmingAmount.Size()
	n += 1 + l + sovLpfarm(uint64(l))
	if m.PreviousPeriod != 0 {
		n += 1 + sovLpfarm(uint64(m.PreviousPeriod))
	}
	if m.StartingBlockHeight != 0 {
		n += 1 + sovLpfarm(uint64(m.StartingBlockHeight))
	}
	return n
}

func (m *HistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeUnitRewards) > 0 {
		for _, e := range m.CumulativeUnitRewards {
			l = e.Size()
			n += 1 + l + sovLpfarm(uint64(l))
		}
	}
	if m.ReferenceCount != 0 {
		n += 1 + sovLpfarm(uint64(m.ReferenceCount))
	}
	return n
}

func sovLpfarm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLpfarm(x uint64) (n int) {
	return sovLpfarm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpfarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAllocations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAllocations = append(m.RewardAllocations, RewardAllocation{})
			if err := m.RewardAllocations[len(m.RewardAllocations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTerminated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTerminated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLpfarm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpfarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardAllocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpfarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardAllocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardAllocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPerDay = append(m.RewardsPerDay, types.Coin{})
			if err := m.RewardsPerDay[len(m.RewardsPerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLpfarm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpfarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Farm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpfarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Farm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Farm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFarmingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFarmingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, types.DecCoin{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, types.DecCoin{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.LegacyDec
			m.PreviousShare = &v
			if err := m.PreviousShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLpfarm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpfarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpfarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FarmingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPeriod", wireType)
			}
			m.PreviousPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingBlockHeight", wireType)
			}
			m.StartingBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartingBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLpfarm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpfarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLpfarm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeUnitRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLpfarm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLpfarm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeUnitRewards = append(m.CumulativeUnitRewards, types.DecCoin{})
			if err := m.CumulativeUnitRewards[len(m.CumulativeUnitRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceCount", wireType)
			}
			m.ReferenceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLpfarm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLpfarm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLpfarm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLpfarm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLpfarm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLpfarm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLpfarm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLpfarm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLpfarm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLpfarm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLpfarm = fmt.Errorf("proto: unexpected end of group")
)
