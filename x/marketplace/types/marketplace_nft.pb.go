// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/marketplace/v1/marketplace_nft.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketplaceNft struct {
	Index               []byte                                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty" yaml:"index"`
	MarketplaceIndex    []byte                                        `protobuf:"bytes,2,opt,name=marketplace_index,json=marketplaceIndex,proto3" json:"marketplace_index,omitempty" yaml:"marketplace_index"`
	CollectionIndex     []byte                                        `protobuf:"bytes,3,opt,name=collection_index,json=collectionIndex,proto3" json:"collection_index,omitempty" yaml:"collection_index"`
	ForSale             bool                                          `protobuf:"varint,4,opt,name=for_sale,json=forSale,proto3" json:"for_sale,omitempty" yaml:"for_sale"`
	InitiallySold       bool                                          `protobuf:"varint,5,opt,name=initially_sold,json=initiallySold,proto3" json:"initially_sold,omitempty" yaml:"initially_sold"`
	MinPrice            *github_com_cosmos_cosmos_sdk_types.Coin      `protobuf:"bytes,6,opt,name=min_price,json=minPrice,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"min_price,omitempty" yaml:"min_price"`
	Cw20ContractAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=cw20_contract_address,json=cw20ContractAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"cw20_contract_address,omitempty" yaml:"cw20_contract_address"`
	Creator             github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,8,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
}

func (m *MarketplaceNft) Reset()         { *m = MarketplaceNft{} }
func (m *MarketplaceNft) String() string { return proto.CompactTextString(m) }
func (*MarketplaceNft) ProtoMessage()    {}
func (*MarketplaceNft) Descriptor() ([]byte, []int) {
	return fileDescriptor_5daad712b6b8c880, []int{0}
}
func (m *MarketplaceNft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketplaceNft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketplaceNft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketplaceNft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketplaceNft.Merge(m, src)
}
func (m *MarketplaceNft) XXX_Size() int {
	return m.Size()
}
func (m *MarketplaceNft) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketplaceNft.DiscardUnknown(m)
}

var xxx_messageInfo_MarketplaceNft proto.InternalMessageInfo

func (m *MarketplaceNft) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MarketplaceNft) GetMarketplaceIndex() []byte {
	if m != nil {
		return m.MarketplaceIndex
	}
	return nil
}

func (m *MarketplaceNft) GetCollectionIndex() []byte {
	if m != nil {
		return m.CollectionIndex
	}
	return nil
}

func (m *MarketplaceNft) GetForSale() bool {
	if m != nil {
		return m.ForSale
	}
	return false
}

func (m *MarketplaceNft) GetInitiallySold() bool {
	if m != nil {
		return m.InitiallySold
	}
	return false
}

func (m *MarketplaceNft) GetMinPrice() *github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.MinPrice
	}
	return nil
}

func (m *MarketplaceNft) GetCw20ContractAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Cw20ContractAddress
	}
	return nil
}

func (m *MarketplaceNft) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func init() {
	proto.RegisterType((*MarketplaceNft)(nil), "mantrachain.marketplace.v1.MarketplaceNft")
}

func init() {
	proto.RegisterFile("mantrachain/marketplace/v1/marketplace_nft.proto", fileDescriptor_5daad712b6b8c880)
}

var fileDescriptor_5daad712b6b8c880 = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x1b, 0xa0, 0x6b, 0x31, 0xa3, 0x2b, 0x19, 0x13, 0x59, 0x99, 0xe2, 0x2a, 0x07, 0xe8,
	0x65, 0xc9, 0x3a, 0x38, 0x71, 0x62, 0x8d, 0x84, 0x34, 0x09, 0x10, 0x64, 0x37, 0x24, 0x14, 0xb9,
	0x8e, 0xdb, 0x59, 0x73, 0xec, 0x2a, 0x31, 0x63, 0x15, 0x67, 0xee, 0x7c, 0x05, 0x6e, 0x7c, 0x94,
	0x1d, 0x77, 0xe4, 0x64, 0xa1, 0xf6, 0x1b, 0xe4, 0xc8, 0x09, 0xc5, 0x4e, 0x69, 0xf8, 0x73, 0x40,
	0x9c, 0xe2, 0x3c, 0xef, 0xfb, 0xfc, 0x9e, 0xc4, 0xaf, 0x0d, 0x0e, 0x52, 0xc4, 0x65, 0x86, 0xf0,
	0x29, 0xa2, 0x3c, 0x48, 0x51, 0x76, 0x46, 0xe4, 0x8c, 0x21, 0x4c, 0x82, 0xf3, 0x61, 0xfd, 0x35,
	0xe6, 0x13, 0xe9, 0xcf, 0x32, 0x21, 0x85, 0xdd, 0xab, 0x39, 0xfc, 0x5a, 0x8b, 0x7f, 0x3e, 0xec,
	0xb9, 0x58, 0xe4, 0xa9, 0xc8, 0x83, 0x31, 0xca, 0x4b, 0xc2, 0x98, 0x48, 0x34, 0x0c, 0xb0, 0xa0,
	0xdc, 0x78, 0x7b, 0x77, 0xa7, 0x62, 0x2a, 0xf4, 0x32, 0x28, 0x57, 0x46, 0xf5, 0x3e, 0x37, 0x41,
	0xe7, 0xc5, 0x1a, 0xf4, 0x72, 0x22, 0xed, 0x07, 0xa0, 0x49, 0x79, 0x42, 0x2e, 0x1c, 0xab, 0x6f,
	0x0d, 0x36, 0x47, 0xdd, 0x42, 0xc1, 0xcd, 0x39, 0x4a, 0xd9, 0x13, 0x4f, 0xcb, 0x5e, 0x64, 0xca,
	0xf6, 0x31, 0xb8, 0x53, 0xff, 0x4a, 0xe3, 0xb9, 0xa6, 0x3d, 0x7b, 0x85, 0x82, 0x8e, 0xf1, 0xfc,
	0xd1, 0xe2, 0x45, 0xdd, 0x9a, 0x76, 0xac, 0x51, 0xcf, 0x40, 0x17, 0x0b, 0xc6, 0x08, 0x96, 0x54,
	0xf0, 0x8a, 0x74, 0x5d, 0x93, 0xee, 0x17, 0x0a, 0xde, 0x33, 0xa4, 0xdf, 0x3b, 0xbc, 0x68, 0x6b,
	0x2d, 0x19, 0x8e, 0x0f, 0xda, 0x13, 0x91, 0xc5, 0x39, 0x62, 0xc4, 0xb9, 0xd1, 0xb7, 0x06, 0xed,
	0xd1, 0x76, 0xa1, 0xe0, 0x96, 0xf1, 0xaf, 0x2a, 0x5e, 0xd4, 0x9a, 0x88, 0xec, 0x04, 0x31, 0x62,
	0x3f, 0x05, 0x1d, 0xca, 0xa9, 0xa4, 0x88, 0xb1, 0x79, 0x9c, 0x0b, 0x96, 0x38, 0x4d, 0xed, 0xda,
	0x2d, 0x14, 0xdc, 0x59, 0xfd, 0x73, 0xbd, 0xee, 0x45, 0xb7, 0x7f, 0x0a, 0x27, 0x82, 0x25, 0xf6,
	0x07, 0x70, 0x33, 0xa5, 0x3c, 0x9e, 0x65, 0x14, 0x13, 0x67, 0xa3, 0x6f, 0x0d, 0x6e, 0x1d, 0xee,
	0xfa, 0x66, 0x12, 0x7e, 0x39, 0x09, 0xbf, 0x9a, 0x84, 0x1f, 0x0a, 0xca, 0x47, 0xe1, 0xa5, 0x82,
	0x56, 0xa1, 0x60, 0xb7, 0xda, 0x9b, 0x95, 0xd3, 0xfb, 0xae, 0xe0, 0xc3, 0x29, 0x95, 0xa7, 0xef,
	0xc6, 0x3e, 0x16, 0x69, 0x50, 0x8d, 0xd2, 0x3c, 0xf6, 0xf3, 0xe4, 0x2c, 0x90, 0xf3, 0x19, 0xc9,
	0x35, 0x24, 0x6a, 0xa7, 0x94, 0xbf, 0x2a, 0x5d, 0xf6, 0x47, 0x0b, 0xec, 0xe0, 0xf7, 0x87, 0x07,
	0x31, 0x16, 0xfa, 0x58, 0xc8, 0x18, 0x25, 0x49, 0x46, 0xf2, 0xdc, 0x69, 0xe9, 0xcd, 0x7b, 0x5d,
	0x28, 0xb8, 0x57, 0x6d, 0xde, 0xdf, 0xda, 0xca, 0xd8, 0xfd, 0x7f, 0x88, 0x3d, 0xc2, 0xf8, 0xc8,
	0x38, 0xa2, 0xed, 0x12, 0x14, 0x56, 0x9c, 0x4a, 0xb4, 0xdf, 0x82, 0x16, 0xce, 0x08, 0x92, 0x22,
	0x73, 0xda, 0x3a, 0x38, 0x2c, 0x14, 0xec, 0x54, 0xc1, 0xa6, 0xf0, 0x1f, 0x51, 0x2b, 0xe6, 0x28,
	0xfa, 0xb2, 0x70, 0xad, 0xcb, 0x85, 0x6b, 0x5d, 0x2d, 0x5c, 0xeb, 0xdb, 0xc2, 0xb5, 0x3e, 0x2d,
	0xdd, 0xc6, 0xd5, 0xd2, 0x6d, 0x7c, 0x5d, 0xba, 0x8d, 0x37, 0x8f, 0x6b, 0xd4, 0xe7, 0x34, 0x25,
	0x61, 0x75, 0x9d, 0xd6, 0x57, 0xeb, 0xe2, 0x97, 0xcb, 0xa5, 0x73, 0xc6, 0x1b, 0xfa, 0xf8, 0x3f,
	0xfa, 0x11, 0x00, 0x00, 0xff, 0xff, 0x00, 0x0e, 0xb4, 0x9c, 0x84, 0x03, 0x00, 0x00,
}

func (this *MarketplaceNft) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarketplaceNft)
	if !ok {
		that2, ok := that.(MarketplaceNft)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if !bytes.Equal(this.MarketplaceIndex, that1.MarketplaceIndex) {
		return false
	}
	if !bytes.Equal(this.CollectionIndex, that1.CollectionIndex) {
		return false
	}
	if this.ForSale != that1.ForSale {
		return false
	}
	if this.InitiallySold != that1.InitiallySold {
		return false
	}
	if !this.MinPrice.Equal(that1.MinPrice) {
		return false
	}
	if !bytes.Equal(this.Cw20ContractAddress, that1.Cw20ContractAddress) {
		return false
	}
	if !bytes.Equal(this.Creator, that1.Creator) {
		return false
	}
	return true
}
func (m *MarketplaceNft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketplaceNft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketplaceNft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarketplaceNft(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Cw20ContractAddress) > 0 {
		i -= len(m.Cw20ContractAddress)
		copy(dAtA[i:], m.Cw20ContractAddress)
		i = encodeVarintMarketplaceNft(dAtA, i, uint64(len(m.Cw20ContractAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MinPrice != nil {
		{
			size, err := m.MinPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarketplaceNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.InitiallySold {
		i--
		if m.InitiallySold {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ForSale {
		i--
		if m.ForSale {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.CollectionIndex) > 0 {
		i -= len(m.CollectionIndex)
		copy(dAtA[i:], m.CollectionIndex)
		i = encodeVarintMarketplaceNft(dAtA, i, uint64(len(m.CollectionIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MarketplaceIndex) > 0 {
		i -= len(m.MarketplaceIndex)
		copy(dAtA[i:], m.MarketplaceIndex)
		i = encodeVarintMarketplaceNft(dAtA, i, uint64(len(m.MarketplaceIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMarketplaceNft(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarketplaceNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarketplaceNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MarketplaceNft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMarketplaceNft(uint64(l))
	}
	l = len(m.MarketplaceIndex)
	if l > 0 {
		n += 1 + l + sovMarketplaceNft(uint64(l))
	}
	l = len(m.CollectionIndex)
	if l > 0 {
		n += 1 + l + sovMarketplaceNft(uint64(l))
	}
	if m.ForSale {
		n += 2
	}
	if m.InitiallySold {
		n += 2
	}
	if m.MinPrice != nil {
		l = m.MinPrice.Size()
		n += 1 + l + sovMarketplaceNft(uint64(l))
	}
	l = len(m.Cw20ContractAddress)
	if l > 0 {
		n += 1 + l + sovMarketplaceNft(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarketplaceNft(uint64(l))
	}
	return n
}

func sovMarketplaceNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarketplaceNft(x uint64) (n int) {
	return sovMarketplaceNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarketplaceNft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarketplaceNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketplaceNft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketplaceNft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceIndex", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketplaceIndex = append(m.MarketplaceIndex[:0], dAtA[iNdEx:postIndex]...)
			if m.MarketplaceIndex == nil {
				m.MarketplaceIndex = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionIndex", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionIndex = append(m.CollectionIndex[:0], dAtA[iNdEx:postIndex]...)
			if m.CollectionIndex == nil {
				m.CollectionIndex = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForSale", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForSale = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiallySold", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitiallySold = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinPrice == nil {
				m.MinPrice = &github_com_cosmos_cosmos_sdk_types.Coin{}
			}
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cw20ContractAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cw20ContractAddress = append(m.Cw20ContractAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.Cw20ContractAddress == nil {
				m.Cw20ContractAddress = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarketplaceNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarketplaceNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarketplaceNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarketplaceNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarketplaceNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarketplaceNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarketplaceNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarketplaceNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarketplaceNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarketplaceNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarketplaceNft = fmt.Errorf("proto: unexpected end of group")
)
