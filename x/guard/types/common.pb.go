// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/guard/v1/common.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAccounts struct {
	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *MsgAccounts) Reset()         { *m = MsgAccounts{} }
func (m *MsgAccounts) String() string { return proto.CompactTextString(m) }
func (*MsgAccounts) ProtoMessage()    {}
func (*MsgAccounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{0}
}
func (m *MsgAccounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccounts.Merge(m, src)
}
func (m *MsgAccounts) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccounts) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccounts.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccounts proto.InternalMessageInfo

func (m *MsgAccounts) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type MsgIndexes struct {
	Indexes [][]byte `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
}

func (m *MsgIndexes) Reset()         { *m = MsgIndexes{} }
func (m *MsgIndexes) String() string { return proto.CompactTextString(m) }
func (*MsgIndexes) ProtoMessage()    {}
func (*MsgIndexes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{1}
}
func (m *MsgIndexes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIndexes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIndexes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIndexes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIndexes.Merge(m, src)
}
func (m *MsgIndexes) XXX_Size() int {
	return m.Size()
}
func (m *MsgIndexes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIndexes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIndexes proto.InternalMessageInfo

func (m *MsgIndexes) GetIndexes() [][]byte {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type AccountPrivileges struct {
	Account    []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Privileges []byte `protobuf:"bytes,2,opt,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *AccountPrivileges) Reset()         { *m = AccountPrivileges{} }
func (m *AccountPrivileges) String() string { return proto.CompactTextString(m) }
func (*AccountPrivileges) ProtoMessage()    {}
func (*AccountPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{2}
}
func (m *AccountPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPrivileges.Merge(m, src)
}
func (m *AccountPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *AccountPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPrivileges proto.InternalMessageInfo

func (m *AccountPrivileges) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountPrivileges) GetPrivileges() []byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type RequiredPrivileges struct {
	Index      []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Privileges []byte `protobuf:"bytes,2,opt,name=privileges,proto3" json:"privileges,omitempty"`
	Kind       string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *RequiredPrivileges) Reset()         { *m = RequiredPrivileges{} }
func (m *RequiredPrivileges) String() string { return proto.CompactTextString(m) }
func (*RequiredPrivileges) ProtoMessage()    {}
func (*RequiredPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{3}
}
func (m *RequiredPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequiredPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequiredPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequiredPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiredPrivileges.Merge(m, src)
}
func (m *RequiredPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *RequiredPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiredPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_RequiredPrivileges proto.InternalMessageInfo

func (m *RequiredPrivileges) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *RequiredPrivileges) GetPrivileges() []byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

func (m *RequiredPrivileges) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type Locked struct {
	Index  []byte `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Locked []byte `protobuf:"bytes,2,opt,name=locked,proto3" json:"locked,omitempty"`
	Kind   string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *Locked) Reset()         { *m = Locked{} }
func (m *Locked) String() string { return proto.CompactTextString(m) }
func (*Locked) ProtoMessage()    {}
func (*Locked) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{4}
}
func (m *Locked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Locked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Locked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Locked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Locked.Merge(m, src)
}
func (m *Locked) XXX_Size() int {
	return m.Size()
}
func (m *Locked) XXX_DiscardUnknown() {
	xxx_messageInfo_Locked.DiscardUnknown(m)
}

var xxx_messageInfo_Locked proto.InternalMessageInfo

func (m *Locked) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Locked) GetLocked() []byte {
	if m != nil {
		return m.Locked
	}
	return nil
}

func (m *Locked) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type AuthzGrantRevokeMsgType struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Grant   bool   `protobuf:"varint,2,opt,name=grant,proto3" json:"grant,omitempty"`
}

func (m *AuthzGrantRevokeMsgType) Reset()         { *m = AuthzGrantRevokeMsgType{} }
func (m *AuthzGrantRevokeMsgType) String() string { return proto.CompactTextString(m) }
func (*AuthzGrantRevokeMsgType) ProtoMessage()    {}
func (*AuthzGrantRevokeMsgType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{5}
}
func (m *AuthzGrantRevokeMsgType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthzGrantRevokeMsgType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthzGrantRevokeMsgType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthzGrantRevokeMsgType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthzGrantRevokeMsgType.Merge(m, src)
}
func (m *AuthzGrantRevokeMsgType) XXX_Size() int {
	return m.Size()
}
func (m *AuthzGrantRevokeMsgType) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthzGrantRevokeMsgType.DiscardUnknown(m)
}

var xxx_messageInfo_AuthzGrantRevokeMsgType proto.InternalMessageInfo

func (m *AuthzGrantRevokeMsgType) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *AuthzGrantRevokeMsgType) GetGrant() bool {
	if m != nil {
		return m.Grant
	}
	return false
}

type AuthzGrantRevokeMsgsTypes struct {
	Msgs []*AuthzGrantRevokeMsgType `protobuf:"bytes,1,rep,name=msgs,proto3" json:"msgs,omitempty"`
}

func (m *AuthzGrantRevokeMsgsTypes) Reset()         { *m = AuthzGrantRevokeMsgsTypes{} }
func (m *AuthzGrantRevokeMsgsTypes) String() string { return proto.CompactTextString(m) }
func (*AuthzGrantRevokeMsgsTypes) ProtoMessage()    {}
func (*AuthzGrantRevokeMsgsTypes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce2ac908ba79d3e1, []int{6}
}
func (m *AuthzGrantRevokeMsgsTypes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthzGrantRevokeMsgsTypes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthzGrantRevokeMsgsTypes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthzGrantRevokeMsgsTypes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthzGrantRevokeMsgsTypes.Merge(m, src)
}
func (m *AuthzGrantRevokeMsgsTypes) XXX_Size() int {
	return m.Size()
}
func (m *AuthzGrantRevokeMsgsTypes) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthzGrantRevokeMsgsTypes.DiscardUnknown(m)
}

var xxx_messageInfo_AuthzGrantRevokeMsgsTypes proto.InternalMessageInfo

func (m *AuthzGrantRevokeMsgsTypes) GetMsgs() []*AuthzGrantRevokeMsgType {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgAccounts)(nil), "mantrachain.guard.v1.MsgAccounts")
	proto.RegisterType((*MsgIndexes)(nil), "mantrachain.guard.v1.MsgIndexes")
	proto.RegisterType((*AccountPrivileges)(nil), "mantrachain.guard.v1.AccountPrivileges")
	proto.RegisterType((*RequiredPrivileges)(nil), "mantrachain.guard.v1.RequiredPrivileges")
	proto.RegisterType((*Locked)(nil), "mantrachain.guard.v1.Locked")
	proto.RegisterType((*AuthzGrantRevokeMsgType)(nil), "mantrachain.guard.v1.AuthzGrantRevokeMsgType")
	proto.RegisterType((*AuthzGrantRevokeMsgsTypes)(nil), "mantrachain.guard.v1.AuthzGrantRevokeMsgsTypes")
}

func init() { proto.RegisterFile("mantrachain/guard/v1/common.proto", fileDescriptor_ce2ac908ba79d3e1) }

var fileDescriptor_ce2ac908ba79d3e1 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0xc7, 0xb4, 0x4c, 0x67, 0x5e, 0xd9, 0x60, 0x8d, 0x20, 0xd3, 0x85, 0x35, 0x64, 0x81,
	0xba, 0x69, 0xa2, 0x02, 0x17, 0x98, 0x76, 0x81, 0x40, 0x33, 0x12, 0x32, 0xb0, 0x61, 0xd1, 0x2a,
	0x4d, 0x2c, 0x8f, 0x35, 0x13, 0x3b, 0xd8, 0x4e, 0xd4, 0x72, 0x0a, 0x8e, 0xc1, 0x01, 0x38, 0x04,
	0xcb, 0x8a, 0x15, 0x4b, 0x94, 0xb9, 0x08, 0x8a, 0x6d, 0xaa, 0x2c, 0x3a, 0xea, 0xee, 0xfd, 0xef,
	0xfd, 0xef, 0x7b, 0x89, 0xf5, 0xc3, 0x8b, 0x32, 0x93, 0x56, 0x67, 0xf9, 0x2a, 0x13, 0x32, 0xe5,
	0x75, 0xa6, 0x8b, 0xb4, 0x39, 0x4d, 0x73, 0x55, 0x96, 0x4a, 0x26, 0x95, 0x56, 0x56, 0xe1, 0x49,
	0xcf, 0x92, 0x38, 0x4b, 0xd2, 0x9c, 0x1e, 0x4d, 0x73, 0x65, 0x4a, 0x65, 0x2e, 0x9d, 0x27, 0xf5,
	0xc2, 0x2f, 0x1c, 0x4d, 0xb8, 0xe2, 0xca, 0xf7, 0xbb, 0xca, 0x77, 0xe3, 0x73, 0x38, 0x5c, 0x1a,
	0x3e, 0xcf, 0x73, 0x55, 0x4b, 0x6b, 0xf0, 0x1b, 0x18, 0x65, 0xa1, 0x8e, 0xd0, 0x6c, 0xef, 0x78,
	0x7c, 0x16, 0xfd, 0xfe, 0x79, 0x32, 0x09, 0xa0, 0x79, 0x51, 0x68, 0x66, 0xcc, 0x47, 0xab, 0x85,
	0xe4, 0xf4, 0xce, 0x19, 0xbf, 0x04, 0x58, 0x1a, 0xfe, 0x4e, 0x16, 0xec, 0x9a, 0x19, 0x1c, 0xc1,
	0x81, 0xf0, 0xa5, 0x43, 0x3c, 0xa1, 0xff, 0x65, 0xbc, 0x84, 0xa7, 0xe1, 0xd2, 0x07, 0x2d, 0x1a,
	0xb1, 0x61, 0xdc, 0xdb, 0x03, 0x28, 0x42, 0x33, 0xd4, 0xd9, 0x83, 0xc4, 0x04, 0xa0, 0xba, 0xf3,
	0x45, 0x8f, 0xdc, 0xb0, 0xd7, 0x89, 0x2f, 0x00, 0x53, 0xf6, 0xb5, 0x16, 0x9a, 0x15, 0x3d, 0xde,
	0x04, 0x1e, 0xbb, 0x7b, 0x81, 0xe6, 0xc5, 0x43, 0x2c, 0x8c, 0x61, 0x7f, 0x2d, 0x64, 0x11, 0xed,
	0xcd, 0xd0, 0xf1, 0x98, 0xba, 0x3a, 0x7e, 0x0f, 0xc3, 0x85, 0xca, 0xd7, 0xac, 0xd8, 0xc1, 0x7c,
	0x06, 0xc3, 0x8d, 0x9b, 0x07, 0x5e, 0x50, 0x3b, 0x58, 0xcf, 0xe7, 0xb5, 0x5d, 0x7d, 0x7b, 0xab,
	0x33, 0x69, 0x29, 0x6b, 0xd4, 0x9a, 0x2d, 0x0d, 0xff, 0x74, 0x53, 0x31, 0x3c, 0x85, 0x91, 0xbd,
	0xa9, 0xd8, 0x65, 0xad, 0x37, 0x8e, 0x3f, 0xa6, 0x07, 0x9d, 0xfe, 0xac, 0x37, 0xdd, 0x5d, 0xde,
	0x2d, 0xb8, 0x03, 0x23, 0xea, 0x45, 0x7c, 0x01, 0xd3, 0x7b, 0x58, 0xa6, 0x83, 0x19, 0x3c, 0x87,
	0xfd, 0xd2, 0x70, 0xff, 0xf4, 0x87, 0xaf, 0x4e, 0x92, 0xfb, 0x62, 0x92, 0xec, 0xf8, 0x14, 0xea,
	0x56, 0xcf, 0x16, 0x3f, 0x5a, 0x82, 0x7e, 0xb5, 0x04, 0xdd, 0xb6, 0x04, 0xfd, 0x6d, 0x09, 0xfa,
	0xbe, 0x25, 0x83, 0xdb, 0x2d, 0x19, 0xfc, 0xd9, 0x92, 0xc1, 0x97, 0x84, 0x0b, 0xbb, 0xaa, 0xaf,
	0x92, 0x5c, 0x95, 0xe9, 0x42, 0x94, 0xec, 0xdc, 0x85, 0xb4, 0x1f, 0xd8, 0xeb, 0x10, 0xd9, 0xee,
	0x2f, 0xcc, 0xd5, 0xd0, 0x05, 0xed, 0xf5, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xad, 0xbc,
	0x22, 0xd4, 0x02, 0x00, 0x00,
}

func (this *MsgAccounts) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgAccounts)
	if !ok {
		that2, ok := that.(MsgAccounts)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if this.Accounts[i] != that1.Accounts[i] {
			return false
		}
	}
	return true
}
func (this *MsgIndexes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgIndexes)
	if !ok {
		that2, ok := that.(MsgIndexes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Indexes) != len(that1.Indexes) {
		return false
	}
	for i := range this.Indexes {
		if !bytes.Equal(this.Indexes[i], that1.Indexes[i]) {
			return false
		}
	}
	return true
}
func (this *AccountPrivileges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountPrivileges)
	if !ok {
		that2, ok := that.(AccountPrivileges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Account, that1.Account) {
		return false
	}
	if !bytes.Equal(this.Privileges, that1.Privileges) {
		return false
	}
	return true
}
func (this *RequiredPrivileges) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequiredPrivileges)
	if !ok {
		that2, ok := that.(RequiredPrivileges)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if !bytes.Equal(this.Privileges, that1.Privileges) {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *Locked) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Locked)
	if !ok {
		that2, ok := that.(Locked)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if !bytes.Equal(this.Locked, that1.Locked) {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	return true
}
func (this *AuthzGrantRevokeMsgType) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthzGrantRevokeMsgType)
	if !ok {
		that2, ok := that.(AuthzGrantRevokeMsgType)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TypeUrl != that1.TypeUrl {
		return false
	}
	if this.Grant != that1.Grant {
		return false
	}
	return true
}
func (this *AuthzGrantRevokeMsgsTypes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthzGrantRevokeMsgsTypes)
	if !ok {
		that2, ok := that.(AuthzGrantRevokeMsgsTypes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Msgs) != len(that1.Msgs) {
		return false
	}
	for i := range this.Msgs {
		if !this.Msgs[i].Equal(that1.Msgs[i]) {
			return false
		}
	}
	return true
}
func (m *MsgAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgIndexes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIndexes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIndexes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintCommon(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		i -= len(m.Privileges)
		copy(dAtA[i:], m.Privileges)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Privileges)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequiredPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequiredPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequiredPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Privileges) > 0 {
		i -= len(m.Privileges)
		copy(dAtA[i:], m.Privileges)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Privileges)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Locked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Locked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Locked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Locked) > 0 {
		i -= len(m.Locked)
		copy(dAtA[i:], m.Locked)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Locked)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthzGrantRevokeMsgType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthzGrantRevokeMsgType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthzGrantRevokeMsgType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Grant {
		i--
		if m.Grant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.TypeUrl) > 0 {
		i -= len(m.TypeUrl)
		copy(dAtA[i:], m.TypeUrl)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.TypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthzGrantRevokeMsgsTypes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthzGrantRevokeMsgsTypes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthzGrantRevokeMsgsTypes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for iNdEx := len(m.Msgs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Msgs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAccounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *MsgIndexes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		for _, b := range m.Indexes {
			l = len(b)
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func (m *AccountPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Privileges)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *RequiredPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Privileges)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Locked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Locked)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *AuthzGrantRevokeMsgType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TypeUrl)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Grant {
		n += 2
	}
	return n
}

func (m *AuthzGrantRevokeMsgsTypes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIndexes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIndexes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIndexes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, make([]byte, postIndex-iNdEx))
			copy(m.Indexes[len(m.Indexes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges[:0], dAtA[iNdEx:postIndex]...)
			if m.Privileges == nil {
				m.Privileges = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequiredPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequiredPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequiredPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges[:0], dAtA[iNdEx:postIndex]...)
			if m.Privileges == nil {
				m.Privileges = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Locked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Locked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Locked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locked = append(m.Locked[:0], dAtA[iNdEx:postIndex]...)
			if m.Locked == nil {
				m.Locked = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthzGrantRevokeMsgType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthzGrantRevokeMsgType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthzGrantRevokeMsgType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Grant = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthzGrantRevokeMsgsTypes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthzGrantRevokeMsgsTypes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthzGrantRevokeMsgsTypes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &AuthzGrantRevokeMsgType{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
