// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/guard/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgUpdateAccountPrivileges struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Privileges []byte `protobuf:"bytes,3,opt,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *MsgUpdateAccountPrivileges) Reset()         { *m = MsgUpdateAccountPrivileges{} }
func (m *MsgUpdateAccountPrivileges) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivileges) ProtoMessage()    {}
func (*MsgUpdateAccountPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{2}
}
func (m *MsgUpdateAccountPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivileges.Merge(m, src)
}
func (m *MsgUpdateAccountPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivileges proto.InternalMessageInfo

func (m *MsgUpdateAccountPrivileges) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAccountPrivileges) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgUpdateAccountPrivileges) GetPrivileges() []byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MsgUpdateAccountPrivilegesResponse struct {
}

func (m *MsgUpdateAccountPrivilegesResponse) Reset()         { *m = MsgUpdateAccountPrivilegesResponse{} }
func (m *MsgUpdateAccountPrivilegesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesResponse) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{3}
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesResponse.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesResponse proto.InternalMessageInfo

type MsgUpdateAccountPrivilegesBatch struct {
	Creator            string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AccountsPrivileges *MsgAccountsPrivileges `protobuf:"bytes,2,opt,name=accounts_privileges,json=accountsPrivileges,proto3" json:"accounts_privileges,omitempty"`
}

func (m *MsgUpdateAccountPrivilegesBatch) Reset()         { *m = MsgUpdateAccountPrivilegesBatch{} }
func (m *MsgUpdateAccountPrivilegesBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesBatch) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{4}
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatch.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesBatch proto.InternalMessageInfo

func (m *MsgUpdateAccountPrivilegesBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAccountPrivilegesBatch) GetAccountsPrivileges() *MsgAccountsPrivileges {
	if m != nil {
		return m.AccountsPrivileges
	}
	return nil
}

type MsgUpdateAccountPrivilegesBatchResponse struct {
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) Reset() {
	*m = MsgUpdateAccountPrivilegesBatchResponse{}
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesBatchResponse) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{5}
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse proto.InternalMessageInfo

type MsgUpdateAccountPrivilegesGroupedBatch struct {
	Creator                   string                        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AccountsPrivilegesGrouped *MsgAccountsPrivilegesGrouped `protobuf:"bytes,2,opt,name=accounts_privileges_grouped,json=accountsPrivilegesGrouped,proto3" json:"accounts_privileges_grouped,omitempty"`
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) Reset() {
	*m = MsgUpdateAccountPrivilegesGroupedBatch{}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesGroupedBatch) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesGroupedBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{6}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch proto.InternalMessageInfo

func (m *MsgUpdateAccountPrivilegesGroupedBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) GetAccountsPrivilegesGrouped() *MsgAccountsPrivilegesGrouped {
	if m != nil {
		return m.AccountsPrivilegesGrouped
	}
	return nil
}

type MsgUpdateAccountPrivilegesGroupedBatchResponse struct {
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Reset() {
	*m = MsgUpdateAccountPrivilegesGroupedBatchResponse{}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateAccountPrivilegesGroupedBatchResponse) ProtoMessage() {}
func (*MsgUpdateAccountPrivilegesGroupedBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{7}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse proto.InternalMessageInfo

type MsgUpdateGuardTransferCoins struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgUpdateGuardTransferCoins) Reset()         { *m = MsgUpdateGuardTransferCoins{} }
func (m *MsgUpdateGuardTransferCoins) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGuardTransferCoins) ProtoMessage()    {}
func (*MsgUpdateGuardTransferCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{8}
}
func (m *MsgUpdateGuardTransferCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGuardTransferCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGuardTransferCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGuardTransferCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGuardTransferCoins.Merge(m, src)
}
func (m *MsgUpdateGuardTransferCoins) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGuardTransferCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGuardTransferCoins.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGuardTransferCoins proto.InternalMessageInfo

func (m *MsgUpdateGuardTransferCoins) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateGuardTransferCoins) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type MsgUpdateGuardTransferCoinsResponse struct {
}

func (m *MsgUpdateGuardTransferCoinsResponse) Reset()         { *m = MsgUpdateGuardTransferCoinsResponse{} }
func (m *MsgUpdateGuardTransferCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGuardTransferCoinsResponse) ProtoMessage()    {}
func (*MsgUpdateGuardTransferCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{9}
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse.Merge(m, src)
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse proto.InternalMessageInfo

type MsgUpdateRequiredPrivileges struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index      []byte `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Privileges []byte `protobuf:"bytes,3,opt,name=privileges,proto3" json:"privileges,omitempty"`
	Kind       string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateRequiredPrivileges) Reset()         { *m = MsgUpdateRequiredPrivileges{} }
func (m *MsgUpdateRequiredPrivileges) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivileges) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{10}
}
func (m *MsgUpdateRequiredPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivileges.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivileges proto.InternalMessageInfo

func (m *MsgUpdateRequiredPrivileges) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRequiredPrivileges) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MsgUpdateRequiredPrivileges) GetPrivileges() []byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

func (m *MsgUpdateRequiredPrivileges) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateRequiredPrivilegesResponse struct {
}

func (m *MsgUpdateRequiredPrivilegesResponse) Reset()         { *m = MsgUpdateRequiredPrivilegesResponse{} }
func (m *MsgUpdateRequiredPrivilegesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesResponse) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{11}
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse proto.InternalMessageInfo

type MsgUpdateRequiredPrivilegesBatch struct {
	Creator            string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequiredPrivileges *MsgRequiredPrivileges `protobuf:"bytes,2,opt,name=required_privileges,json=requiredPrivileges,proto3" json:"required_privileges,omitempty"`
	Kind               string                 `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateRequiredPrivilegesBatch) Reset()         { *m = MsgUpdateRequiredPrivilegesBatch{} }
func (m *MsgUpdateRequiredPrivilegesBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesBatch) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{12}
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch proto.InternalMessageInfo

func (m *MsgUpdateRequiredPrivilegesBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRequiredPrivilegesBatch) GetRequiredPrivileges() *MsgRequiredPrivileges {
	if m != nil {
		return m.RequiredPrivileges
	}
	return nil
}

func (m *MsgUpdateRequiredPrivilegesBatch) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateRequiredPrivilegesBatchResponse struct {
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) Reset() {
	*m = MsgUpdateRequiredPrivilegesBatchResponse{}
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesBatchResponse) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{13}
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse proto.InternalMessageInfo

type MsgUpdateRequiredPrivilegesGroupedBatch struct {
	Creator                   string                        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequiredPrivilegesGrouped *MsgRequiredPrivilegesGrouped `protobuf:"bytes,2,opt,name=required_privileges_grouped,json=requiredPrivilegesGrouped,proto3" json:"required_privileges_grouped,omitempty"`
	Kind                      string                        `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Reset() {
	*m = MsgUpdateRequiredPrivilegesGroupedBatch{}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesGroupedBatch) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesGroupedBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{14}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch proto.InternalMessageInfo

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) GetRequiredPrivilegesGrouped() *MsgRequiredPrivilegesGrouped {
	if m != nil {
		return m.RequiredPrivilegesGrouped
	}
	return nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateRequiredPrivilegesGroupedBatchResponse struct {
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Reset() {
	*m = MsgUpdateRequiredPrivilegesGroupedBatchResponse{}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateRequiredPrivilegesGroupedBatchResponse) ProtoMessage() {}
func (*MsgUpdateRequiredPrivilegesGroupedBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{15}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse proto.InternalMessageInfo

type MsgUpdateAuthzGenericGrantRevokeBatch struct {
	Creator                   string                     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Grantee                   string                     `protobuf:"bytes,2,opt,name=grantee,proto3" json:"grantee,omitempty"`
	AuthzGrantRevokeMsgsTypes *AuthzGrantRevokeMsgsTypes `protobuf:"bytes,3,opt,name=authz_grant_revoke_msgs_types,json=authzGrantRevokeMsgsTypes,proto3" json:"authz_grant_revoke_msgs_types,omitempty"`
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Reset()         { *m = MsgUpdateAuthzGenericGrantRevokeBatch{} }
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAuthzGenericGrantRevokeBatch) ProtoMessage()    {}
func (*MsgUpdateAuthzGenericGrantRevokeBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{16}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch.Merge(m, src)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch proto.InternalMessageInfo

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) GetAuthzGrantRevokeMsgsTypes() *AuthzGrantRevokeMsgsTypes {
	if m != nil {
		return m.AuthzGrantRevokeMsgsTypes
	}
	return nil
}

type MsgUpdateAuthzGenericGrantRevokeBatchResponse struct {
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Reset() {
	*m = MsgUpdateAuthzGenericGrantRevokeBatchResponse{}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateAuthzGenericGrantRevokeBatchResponse) ProtoMessage() {}
func (*MsgUpdateAuthzGenericGrantRevokeBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{17}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse.Merge(m, src)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "mantrachain.guard.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "mantrachain.guard.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUpdateAccountPrivileges)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivileges")
	proto.RegisterType((*MsgUpdateAccountPrivilegesResponse)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesResponse")
	proto.RegisterType((*MsgUpdateAccountPrivilegesBatch)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesBatch")
	proto.RegisterType((*MsgUpdateAccountPrivilegesBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesBatchResponse")
	proto.RegisterType((*MsgUpdateAccountPrivilegesGroupedBatch)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesGroupedBatch")
	proto.RegisterType((*MsgUpdateAccountPrivilegesGroupedBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesGroupedBatchResponse")
	proto.RegisterType((*MsgUpdateGuardTransferCoins)(nil), "mantrachain.guard.v1.MsgUpdateGuardTransferCoins")
	proto.RegisterType((*MsgUpdateGuardTransferCoinsResponse)(nil), "mantrachain.guard.v1.MsgUpdateGuardTransferCoinsResponse")
	proto.RegisterType((*MsgUpdateRequiredPrivileges)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivileges")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesResponse)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesResponse")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesBatch)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesBatch")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesBatchResponse")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesGroupedBatch)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesGroupedBatch")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesGroupedBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesGroupedBatchResponse")
	proto.RegisterType((*MsgUpdateAuthzGenericGrantRevokeBatch)(nil), "mantrachain.guard.v1.MsgUpdateAuthzGenericGrantRevokeBatch")
	proto.RegisterType((*MsgUpdateAuthzGenericGrantRevokeBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateAuthzGenericGrantRevokeBatchResponse")
}

func init() { proto.RegisterFile("mantrachain/guard/v1/tx.proto", fileDescriptor_700e063159380a3c) }

var fileDescriptor_700e063159380a3c = []byte{
	// 1001 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6b, 0x1c, 0x55,
	0x14, 0xcf, 0xdd, 0x7e, 0xc4, 0x9c, 0x06, 0xc4, 0x31, 0x90, 0xdd, 0x69, 0xb3, 0x8d, 0x93, 0x46,
	0x63, 0x24, 0x3b, 0xcd, 0x46, 0x83, 0xdd, 0x5a, 0x6b, 0xd2, 0xd6, 0x80, 0xba, 0x52, 0xc6, 0xf8,
	0x22, 0xc2, 0x72, 0x33, 0x73, 0x9d, 0x1d, 0xda, 0x99, 0xbb, 0xbd, 0x77, 0x36, 0xa4, 0x7d, 0x12,
	0x41, 0x10, 0x5f, 0xf4, 0x41, 0xf0, 0xc9, 0x57, 0x51, 0x50, 0x08, 0xd8, 0xbf, 0x40, 0x10, 0xfa,
	0x58, 0x7c, 0xf2, 0x45, 0x91, 0x04, 0xc9, 0xdf, 0xe0, 0x9b, 0xcc, 0xc7, 0xde, 0xcc, 0xee, 0x7c,
	0xef, 0xfa, 0xb2, 0xec, 0xbd, 0xe7, 0xfc, 0xce, 0xf9, 0x9d, 0xdf, 0xdc, 0x39, 0xf7, 0x0c, 0x2c,
	0xd8, 0xd8, 0x71, 0x19, 0xd6, 0xbb, 0xd8, 0x72, 0x54, 0xb3, 0x8f, 0x99, 0xa1, 0xee, 0xaf, 0xab,
	0xee, 0x41, 0xa3, 0xc7, 0xa8, 0x4b, 0xa5, 0xb9, 0x88, 0xb9, 0xe1, 0x9b, 0x1b, 0xfb, 0xeb, 0xf2,
	0x73, 0xd8, 0xb6, 0x1c, 0xaa, 0xfa, 0xbf, 0x81, 0xa3, 0x3c, 0xaf, 0x53, 0x6e, 0x53, 0xae, 0xda,
	0xdc, 0xf4, 0x02, 0xd8, 0xdc, 0x0c, 0x0d, 0xb5, 0xc0, 0xd0, 0xf1, 0x57, 0x6a, 0xb0, 0x08, 0x4d,
	0x73, 0x26, 0x35, 0x69, 0xb0, 0xef, 0xfd, 0x0b, 0x77, 0x5f, 0x48, 0x64, 0xa4, 0x53, 0xdb, 0xa6,
	0x4e, 0xa6, 0x4b, 0x0f, 0x33, 0x6c, 0x87, 0xb1, 0x95, 0x5f, 0x11, 0x3c, 0xdb, 0xe6, 0xe6, 0x87,
	0x3d, 0x03, 0xbb, 0xe4, 0xae, 0x6f, 0x91, 0x36, 0x61, 0x06, 0xf7, 0xdd, 0x2e, 0x65, 0x96, 0xfb,
	0xb0, 0x8a, 0x16, 0xd1, 0xca, 0xcc, 0x76, 0xf5, 0xf7, 0xc7, 0x6b, 0x73, 0x21, 0xa9, 0x2d, 0xc3,
	0x60, 0x84, 0xf3, 0x0f, 0x5c, 0x66, 0x39, 0xa6, 0x76, 0xea, 0x2a, 0xdd, 0x84, 0xf3, 0x41, 0xec,
	0x6a, 0x65, 0x11, 0xad, 0x5c, 0x68, 0x5e, 0x6a, 0x24, 0xa9, 0xd2, 0x08, 0xb2, 0x6c, 0xcf, 0x3c,
	0xf9, 0xeb, 0xf2, 0xd4, 0x0f, 0x27, 0x87, 0xab, 0x48, 0x0b, 0x61, 0xad, 0xcd, 0xcf, 0x4e, 0x0e,
	0x57, 0x4f, 0x03, 0x7e, 0x79, 0x72, 0xb8, 0xba, 0x14, 0x2d, 0xe1, 0x20, 0x2c, 0x62, 0x84, 0xb0,
	0x52, 0x83, 0xf9, 0x91, 0x2d, 0x8d, 0xf0, 0x1e, 0x75, 0x38, 0x51, 0xfe, 0x41, 0x20, 0x0b, 0xdb,
	0x96, 0xae, 0xd3, 0xbe, 0xe3, 0xde, 0x65, 0xd6, 0xbe, 0x75, 0x9f, 0x98, 0x84, 0x4b, 0x4d, 0x98,
	0xd6, 0x19, 0xc1, 0x2e, 0x65, 0xb9, 0x85, 0x0e, 0x1c, 0x3d, 0x0c, 0x0e, 0x02, 0xf9, 0x75, 0x66,
	0x62, 0x42, 0x47, 0xa9, 0x0e, 0xd0, 0x13, 0x59, 0xab, 0x67, 0x16, 0xd1, 0xca, 0xac, 0x16, 0xd9,
	0x69, 0xdd, 0xf4, 0x2a, 0x1f, 0x64, 0xf0, 0xea, 0x6e, 0x64, 0xd6, 0x1d, 0x2b, 0x44, 0xb9, 0x02,
	0x4a, 0xba, 0x55, 0xa8, 0xf1, 0x2f, 0x82, 0xcb, 0xe9, 0x6e, 0xdb, 0xd8, 0xd5, 0xbb, 0x63, 0x49,
	0xf2, 0x31, 0x3c, 0x1f, 0x56, 0xea, 0x1d, 0x60, 0x51, 0x67, 0x70, 0x0c, 0x5e, 0x49, 0x3e, 0x06,
	0x6d, 0x6e, 0x86, 0x0c, 0x78, 0x84, 0xa9, 0x84, 0x63, 0x7b, 0xad, 0xdb, 0xa3, 0xe2, 0x6c, 0x94,
	0x13, 0xc7, 0xaf, 0x4b, 0x79, 0x19, 0x5e, 0xca, 0x71, 0x11, 0x32, 0x7d, 0x57, 0x81, 0x17, 0xd3,
	0x7d, 0x77, 0x18, 0xed, 0xf7, 0x88, 0x31, 0xbe, 0x5a, 0x0c, 0x2e, 0x26, 0xa8, 0xd5, 0x31, 0x83,
	0xb8, 0xa1, 0x6a, 0xcd, 0x12, 0xaa, 0x85, 0x8c, 0xb4, 0x1a, 0x4e, 0x33, 0xb5, 0xde, 0x1d, 0xd5,
	0xb0, 0x55, 0x4e, 0xc3, 0x68, 0xd1, 0xca, 0x55, 0x68, 0x14, 0xf3, 0x14, 0x8a, 0xfe, 0x8c, 0xe0,
	0xa2, 0x80, 0xec, 0x78, 0xb9, 0x76, 0x19, 0x76, 0xf8, 0x27, 0x84, 0xdd, 0xa2, 0x96, 0x33, 0xde,
	0x7b, 0x58, 0x85, 0x69, 0xe2, 0xe0, 0xbd, 0xfb, 0xa1, 0x64, 0xcf, 0x68, 0x83, 0x65, 0xeb, 0xad,
	0xd1, 0x62, 0xd5, 0xcc, 0x62, 0xe3, 0x7c, 0x94, 0x65, 0x58, 0xca, 0x30, 0x8b, 0xb2, 0xfe, 0x8c,
	0x96, 0xa5, 0x91, 0x07, 0x7d, 0x8b, 0x11, 0x63, 0xc2, 0xf6, 0x32, 0x07, 0xe7, 0x2c, 0xc7, 0x20,
	0x07, 0x7e, 0x51, 0xb3, 0x5a, 0xb0, 0xc8, 0x6b, 0x20, 0x92, 0x04, 0x67, 0xef, 0x59, 0x8e, 0x51,
	0x3d, 0xeb, 0xa5, 0xd1, 0xfc, 0xff, 0x65, 0x65, 0x88, 0xf3, 0x1f, 0x92, 0x21, 0x6e, 0x16, 0x32,
	0x7c, 0x55, 0x81, 0xc5, 0x0c, 0xbf, 0x89, 0xfa, 0x0a, 0x0b, 0xc3, 0x95, 0xe9, 0x2b, 0x09, 0x54,
	0x25, 0x16, 0x7f, 0x3a, 0x49, 0x9a, 0xdd, 0x19, 0xd5, 0xec, 0xd5, 0x92, 0x9a, 0x05, 0x6f, 0xc8,
	0x2a, 0xac, 0xe4, 0xf9, 0x08, 0xf5, 0x7e, 0xa9, 0x44, 0x3a, 0x53, 0xdc, 0xf9, 0xff, 0x68, 0x37,
	0x09, 0x22, 0x16, 0x6e, 0x37, 0xa9, 0x8c, 0xb4, 0x1a, 0x4b, 0x33, 0x25, 0x4a, 0xfb, 0xde, 0xa8,
	0xb4, 0xd7, 0x4b, 0x4a, 0x3b, 0xd4, 0x83, 0xd6, 0xa1, 0xa8, 0xab, 0x10, 0xfa, 0x71, 0x05, 0x96,
	0x4f, 0xfb, 0x56, 0xdf, 0xed, 0x3e, 0xda, 0x21, 0x0e, 0x61, 0x96, 0xbe, 0xc3, 0xb0, 0xe3, 0x6a,
	0x64, 0x9f, 0xde, 0x23, 0xe3, 0xcb, 0x5c, 0x85, 0x69, 0xd3, 0x8b, 0x43, 0x48, 0x30, 0x16, 0x68,
	0x83, 0xa5, 0xf4, 0x00, 0x16, 0xbc, 0x99, 0xe6, 0x51, 0xc7, 0xdf, 0xe8, 0x30, 0x3f, 0x51, 0xc7,
	0xe6, 0x26, 0xef, 0xb8, 0x0f, 0x7b, 0xe1, 0xeb, 0x7c, 0xa1, 0xa9, 0x26, 0x3f, 0x82, 0x80, 0xe8,
	0x29, 0xc3, 0x36, 0x37, 0xf9, 0xae, 0x07, 0xd3, 0x6a, 0x38, 0xcd, 0xd4, 0x7a, 0x67, 0x54, 0xeb,
	0x6b, 0xd9, 0xed, 0x3e, 0x43, 0x0c, 0x45, 0x85, 0xb5, 0x42, 0x8e, 0x03, 0x9d, 0x9b, 0xbf, 0x01,
	0x9c, 0x69, 0x73, 0x53, 0x32, 0x60, 0x76, 0x68, 0xae, 0x5c, 0x4e, 0x3d, 0x63, 0x51, 0x37, 0x79,
	0xad, 0x90, 0xdb, 0x20, 0x9b, 0xf4, 0x39, 0x82, 0xf9, 0xb4, 0xf1, 0xee, 0x6a, 0x4e, 0xa8, 0x18,
	0x42, 0x7e, 0xbd, 0x2c, 0x42, 0xf0, 0xf8, 0x06, 0xc1, 0xa5, 0xcc, 0xc1, 0xea, 0xb5, 0xb2, 0xa1,
	0x7d, 0x98, 0x7c, 0x63, 0x2c, 0x98, 0xa0, 0xf5, 0x23, 0x82, 0xa5, 0x22, 0x83, 0xcc, 0x1b, 0x65,
	0xd3, 0x44, 0xd1, 0xf2, 0xed, 0x49, 0xd0, 0x82, 0xeb, 0x17, 0x08, 0xaa, 0xa9, 0x23, 0xc2, 0x7a,
	0x4e, 0x8a, 0x38, 0x44, 0xbe, 0x56, 0x1a, 0x92, 0x40, 0x25, 0xe1, 0x5a, 0xcf, 0xa3, 0x12, 0x87,
	0xe4, 0x52, 0x49, 0xbf, 0x5d, 0xa5, 0x6f, 0x11, 0x2c, 0x64, 0x5f, 0xad, 0x9b, 0xa5, 0x83, 0x07,
	0x4f, 0xed, 0xcd, 0xf1, 0x70, 0x82, 0xd9, 0x4f, 0x08, 0xae, 0x14, 0xba, 0xb6, 0x6e, 0x94, 0x4e,
	0x34, 0x74, 0xba, 0xee, 0x4c, 0x04, 0x17, 0x74, 0xbf, 0x47, 0xa0, 0x14, 0x68, 0xfe, 0xd7, 0xf3,
	0xce, 0x72, 0x06, 0x58, 0xbe, 0x35, 0x01, 0x78, 0x40, 0x54, 0x3e, 0xf7, 0xa9, 0xf7, 0x59, 0xbc,
	0xdd, 0x7e, 0x72, 0x54, 0x47, 0x4f, 0x8f, 0xea, 0xe8, 0xef, 0xa3, 0x3a, 0xfa, 0xfa, 0xb8, 0x3e,
	0xf5, 0xf4, 0xb8, 0x3e, 0xf5, 0xc7, 0x71, 0x7d, 0xea, 0xa3, 0x0d, 0xd3, 0x72, 0xbb, 0xfd, 0xbd,
	0x86, 0x4e, 0x6d, 0xb5, 0xbd, 0xf5, 0xfe, 0xae, 0xb6, 0xb5, 0xf6, 0xb6, 0xe5, 0x60, 0x47, 0x27,
	0x89, 0x23, 0x9e, 0x7f, 0xcb, 0xec, 0x9d, 0xf7, 0xbf, 0xf8, 0x37, 0xfe, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xc3, 0x35, 0x1d, 0xf9, 0xcb, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UpdateAccountPrivileges
	UpdateAccountPrivileges(ctx context.Context, in *MsgUpdateAccountPrivileges, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesResponse, error)
	// UpdateAccountPrivilegesBatch
	UpdateAccountPrivilegesBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesBatchResponse, error)
	// UpdateAccountPrivilegesGroupedBatch
	UpdateAccountPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error)
	// UpdateGuardTransferCoins
	UpdateGuardTransferCoins(ctx context.Context, in *MsgUpdateGuardTransferCoins, opts ...grpc.CallOption) (*MsgUpdateGuardTransferCoinsResponse, error)
	// UpdateRequiredPrivileges
	UpdateRequiredPrivileges(ctx context.Context, in *MsgUpdateRequiredPrivileges, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesResponse, error)
	// UpdateRequiredPrivilegesBatch
	UpdateRequiredPrivilegesBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesBatchResponse, error)
	// UpdateRequiredPrivilegesGroupedBatch
	UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error)
	// UpdateAuthzGenericGrantRevokeBatch
	UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, in *MsgUpdateAuthzGenericGrantRevokeBatch, opts ...grpc.CallOption) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivileges(ctx context.Context, in *MsgUpdateAccountPrivileges, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesResponse, error) {
	out := new(MsgUpdateAccountPrivilegesResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAccountPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivilegesBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesBatchResponse, error) {
	out := new(MsgUpdateAccountPrivilegesBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error) {
	out := new(MsgUpdateAccountPrivilegesGroupedBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesGroupedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGuardTransferCoins(ctx context.Context, in *MsgUpdateGuardTransferCoins, opts ...grpc.CallOption) (*MsgUpdateGuardTransferCoinsResponse, error) {
	out := new(MsgUpdateGuardTransferCoinsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateGuardTransferCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivileges(ctx context.Context, in *MsgUpdateRequiredPrivileges, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateRequiredPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivilegesBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesBatchResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesGroupedBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesGroupedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, in *MsgUpdateAuthzGenericGrantRevokeBatch, opts ...grpc.CallOption) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error) {
	out := new(MsgUpdateAuthzGenericGrantRevokeBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAuthzGenericGrantRevokeBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UpdateAccountPrivileges
	UpdateAccountPrivileges(context.Context, *MsgUpdateAccountPrivileges) (*MsgUpdateAccountPrivilegesResponse, error)
	// UpdateAccountPrivilegesBatch
	UpdateAccountPrivilegesBatch(context.Context, *MsgUpdateAccountPrivilegesBatch) (*MsgUpdateAccountPrivilegesBatchResponse, error)
	// UpdateAccountPrivilegesGroupedBatch
	UpdateAccountPrivilegesGroupedBatch(context.Context, *MsgUpdateAccountPrivilegesGroupedBatch) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error)
	// UpdateGuardTransferCoins
	UpdateGuardTransferCoins(context.Context, *MsgUpdateGuardTransferCoins) (*MsgUpdateGuardTransferCoinsResponse, error)
	// UpdateRequiredPrivileges
	UpdateRequiredPrivileges(context.Context, *MsgUpdateRequiredPrivileges) (*MsgUpdateRequiredPrivilegesResponse, error)
	// UpdateRequiredPrivilegesBatch
	UpdateRequiredPrivilegesBatch(context.Context, *MsgUpdateRequiredPrivilegesBatch) (*MsgUpdateRequiredPrivilegesBatchResponse, error)
	// UpdateRequiredPrivilegesGroupedBatch
	UpdateRequiredPrivilegesGroupedBatch(context.Context, *MsgUpdateRequiredPrivilegesGroupedBatch) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error)
	// UpdateAuthzGenericGrantRevokeBatch
	UpdateAuthzGenericGrantRevokeBatch(context.Context, *MsgUpdateAuthzGenericGrantRevokeBatch) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UpdateAccountPrivileges(ctx context.Context, req *MsgUpdateAccountPrivileges) (*MsgUpdateAccountPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivileges not implemented")
}
func (*UnimplementedMsgServer) UpdateAccountPrivilegesBatch(ctx context.Context, req *MsgUpdateAccountPrivilegesBatch) (*MsgUpdateAccountPrivilegesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivilegesBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateAccountPrivilegesGroupedBatch(ctx context.Context, req *MsgUpdateAccountPrivilegesGroupedBatch) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivilegesGroupedBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateGuardTransferCoins(ctx context.Context, req *MsgUpdateGuardTransferCoins) (*MsgUpdateGuardTransferCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuardTransferCoins not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredPrivileges(ctx context.Context, req *MsgUpdateRequiredPrivileges) (*MsgUpdateRequiredPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivileges not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredPrivilegesBatch(ctx context.Context, req *MsgUpdateRequiredPrivilegesBatch) (*MsgUpdateRequiredPrivilegesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivilegesBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, req *MsgUpdateRequiredPrivilegesGroupedBatch) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivilegesGroupedBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, req *MsgUpdateAuthzGenericGrantRevokeBatch) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthzGenericGrantRevokeBatch not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAccountPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivileges(ctx, req.(*MsgUpdateAccountPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivilegesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivilegesBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivilegesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivilegesBatch(ctx, req.(*MsgUpdateAccountPrivilegesBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivilegesGroupedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivilegesGroupedBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivilegesGroupedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesGroupedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivilegesGroupedBatch(ctx, req.(*MsgUpdateAccountPrivilegesGroupedBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGuardTransferCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGuardTransferCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGuardTransferCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateGuardTransferCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGuardTransferCoins(ctx, req.(*MsgUpdateGuardTransferCoins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateRequiredPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivileges(ctx, req.(*MsgUpdateRequiredPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivilegesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivilegesBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivilegesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivilegesBatch(ctx, req.(*MsgUpdateRequiredPrivilegesBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivilegesGroupedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivilegesGroupedBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivilegesGroupedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesGroupedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivilegesGroupedBatch(ctx, req.(*MsgUpdateRequiredPrivilegesGroupedBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAuthzGenericGrantRevokeBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAuthzGenericGrantRevokeBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAuthzGenericGrantRevokeBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAuthzGenericGrantRevokeBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAuthzGenericGrantRevokeBatch(ctx, req.(*MsgUpdateAuthzGenericGrantRevokeBatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.guard.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateAccountPrivileges",
			Handler:    _Msg_UpdateAccountPrivileges_Handler,
		},
		{
			MethodName: "UpdateAccountPrivilegesBatch",
			Handler:    _Msg_UpdateAccountPrivilegesBatch_Handler,
		},
		{
			MethodName: "UpdateAccountPrivilegesGroupedBatch",
			Handler:    _Msg_UpdateAccountPrivilegesGroupedBatch_Handler,
		},
		{
			MethodName: "UpdateGuardTransferCoins",
			Handler:    _Msg_UpdateGuardTransferCoins_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivileges",
			Handler:    _Msg_UpdateRequiredPrivileges_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivilegesBatch",
			Handler:    _Msg_UpdateRequiredPrivilegesBatch_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivilegesGroupedBatch",
			Handler:    _Msg_UpdateRequiredPrivilegesGroupedBatch_Handler,
		},
		{
			MethodName: "UpdateAuthzGenericGrantRevokeBatch",
			Handler:    _Msg_UpdateAuthzGenericGrantRevokeBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/guard/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		i -= len(m.Privileges)
		copy(dAtA[i:], m.Privileges)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountsPrivileges != nil {
		{
			size, err := m.AccountsPrivileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountsPrivilegesGrouped != nil {
		{
			size, err := m.AccountsPrivilegesGrouped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGuardTransferCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGuardTransferCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGuardTransferCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGuardTransferCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGuardTransferCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGuardTransferCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Privileges) > 0 {
		i -= len(m.Privileges)
		copy(dAtA[i:], m.Privileges)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequiredPrivileges != nil {
		{
			size, err := m.RequiredPrivileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequiredPrivilegesGrouped != nil {
		{
			size, err := m.RequiredPrivilegesGrouped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthzGrantRevokeMsgsTypes != nil {
		{
			size, err := m.AuthzGrantRevokeMsgsTypes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccountPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Privileges)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountPrivilegesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccountPrivilegesBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AccountsPrivileges != nil {
		l = m.AccountsPrivileges.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AccountsPrivilegesGrouped != nil {
		l = m.AccountsPrivilegesGrouped.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGuardTransferCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgUpdateGuardTransferCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequiredPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Privileges)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredPrivilegesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequiredPrivilegesBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequiredPrivileges != nil {
		l = m.RequiredPrivileges.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequiredPrivilegesGrouped != nil {
		l = m.RequiredPrivilegesGrouped.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuthzGrantRevokeMsgsTypes != nil {
		l = m.AuthzGrantRevokeMsgsTypes.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges[:0], dAtA[iNdEx:postIndex]...)
			if m.Privileges == nil {
				m.Privileges = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsPrivileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountsPrivileges == nil {
				m.AccountsPrivileges = &MsgAccountsPrivileges{}
			}
			if err := m.AccountsPrivileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsPrivilegesGrouped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountsPrivilegesGrouped == nil {
				m.AccountsPrivilegesGrouped = &MsgAccountsPrivilegesGrouped{}
			}
			if err := m.AccountsPrivilegesGrouped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGuardTransferCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGuardTransferCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges[:0], dAtA[iNdEx:postIndex]...)
			if m.Privileges == nil {
				m.Privileges = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPrivileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredPrivileges == nil {
				m.RequiredPrivileges = &MsgRequiredPrivileges{}
			}
			if err := m.RequiredPrivileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPrivilegesGrouped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredPrivilegesGrouped == nil {
				m.RequiredPrivilegesGrouped = &MsgRequiredPrivilegesGrouped{}
			}
			if err := m.RequiredPrivilegesGrouped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthzGrantRevokeMsgsTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthzGrantRevokeMsgsTypes == nil {
				m.AuthzGrantRevokeMsgsTypes = &AuthzGrantRevokeMsgsTypes{}
			}
			if err := m.AuthzGrantRevokeMsgsTypes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
