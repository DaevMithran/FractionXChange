// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/guard/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAccountsPrivileges struct {
	Accounts   []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Privileges [][]byte `protobuf:"bytes,2,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *MsgAccountsPrivileges) Reset()         { *m = MsgAccountsPrivileges{} }
func (m *MsgAccountsPrivileges) String() string { return proto.CompactTextString(m) }
func (*MsgAccountsPrivileges) ProtoMessage()    {}
func (*MsgAccountsPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{0}
}
func (m *MsgAccountsPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountsPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountsPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountsPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountsPrivileges.Merge(m, src)
}
func (m *MsgAccountsPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountsPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountsPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountsPrivileges proto.InternalMessageInfo

func (m *MsgAccountsPrivileges) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *MsgAccountsPrivileges) GetPrivileges() [][]byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MsgAccountsPrivilegesGrouped struct {
	Accounts   []*MsgAccounts `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	Privileges [][]byte       `protobuf:"bytes,2,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *MsgAccountsPrivilegesGrouped) Reset()         { *m = MsgAccountsPrivilegesGrouped{} }
func (m *MsgAccountsPrivilegesGrouped) String() string { return proto.CompactTextString(m) }
func (*MsgAccountsPrivilegesGrouped) ProtoMessage()    {}
func (*MsgAccountsPrivilegesGrouped) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{1}
}
func (m *MsgAccountsPrivilegesGrouped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountsPrivilegesGrouped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountsPrivilegesGrouped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountsPrivilegesGrouped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountsPrivilegesGrouped.Merge(m, src)
}
func (m *MsgAccountsPrivilegesGrouped) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountsPrivilegesGrouped) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountsPrivilegesGrouped.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountsPrivilegesGrouped proto.InternalMessageInfo

func (m *MsgAccountsPrivilegesGrouped) GetAccounts() []*MsgAccounts {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *MsgAccountsPrivilegesGrouped) GetPrivileges() [][]byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MsgUpdateAccountPrivileges struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Account    string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Privileges []byte `protobuf:"bytes,3,opt,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *MsgUpdateAccountPrivileges) Reset()         { *m = MsgUpdateAccountPrivileges{} }
func (m *MsgUpdateAccountPrivileges) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivileges) ProtoMessage()    {}
func (*MsgUpdateAccountPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{2}
}
func (m *MsgUpdateAccountPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivileges.Merge(m, src)
}
func (m *MsgUpdateAccountPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivileges proto.InternalMessageInfo

func (m *MsgUpdateAccountPrivileges) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAccountPrivileges) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *MsgUpdateAccountPrivileges) GetPrivileges() []byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MsgUpdateAccountPrivilegesResponse struct {
}

func (m *MsgUpdateAccountPrivilegesResponse) Reset()         { *m = MsgUpdateAccountPrivilegesResponse{} }
func (m *MsgUpdateAccountPrivilegesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesResponse) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{3}
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesResponse.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesResponse proto.InternalMessageInfo

type MsgUpdateAccountPrivilegesBatch struct {
	Creator            string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AccountsPrivileges *MsgAccountsPrivileges `protobuf:"bytes,2,opt,name=accounts_privileges,json=accountsPrivileges,proto3" json:"accounts_privileges,omitempty"`
}

func (m *MsgUpdateAccountPrivilegesBatch) Reset()         { *m = MsgUpdateAccountPrivilegesBatch{} }
func (m *MsgUpdateAccountPrivilegesBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesBatch) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{4}
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatch.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesBatch proto.InternalMessageInfo

func (m *MsgUpdateAccountPrivilegesBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAccountPrivilegesBatch) GetAccountsPrivileges() *MsgAccountsPrivileges {
	if m != nil {
		return m.AccountsPrivileges
	}
	return nil
}

type MsgUpdateAccountPrivilegesBatchResponse struct {
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) Reset() {
	*m = MsgUpdateAccountPrivilegesBatchResponse{}
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesBatchResponse) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{5}
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesBatchResponse proto.InternalMessageInfo

type MsgUpdateAccountPrivilegesGroupedBatch struct {
	Creator                   string                        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	AccountsPrivilegesGrouped *MsgAccountsPrivilegesGrouped `protobuf:"bytes,2,opt,name=accounts_privileges_grouped,json=accountsPrivilegesGrouped,proto3" json:"accounts_privileges_grouped,omitempty"`
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) Reset() {
	*m = MsgUpdateAccountPrivilegesGroupedBatch{}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAccountPrivilegesGroupedBatch) ProtoMessage()    {}
func (*MsgUpdateAccountPrivilegesGroupedBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{6}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatch proto.InternalMessageInfo

func (m *MsgUpdateAccountPrivilegesGroupedBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) GetAccountsPrivilegesGrouped() *MsgAccountsPrivilegesGrouped {
	if m != nil {
		return m.AccountsPrivilegesGrouped
	}
	return nil
}

type MsgUpdateAccountPrivilegesGroupedBatchResponse struct {
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Reset() {
	*m = MsgUpdateAccountPrivilegesGroupedBatchResponse{}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateAccountPrivilegesGroupedBatchResponse) ProtoMessage() {}
func (*MsgUpdateAccountPrivilegesGroupedBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{7}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse.Merge(m, src)
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAccountPrivilegesGroupedBatchResponse proto.InternalMessageInfo

type MsgUpdateGuardTransferCoins struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgUpdateGuardTransferCoins) Reset()         { *m = MsgUpdateGuardTransferCoins{} }
func (m *MsgUpdateGuardTransferCoins) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGuardTransferCoins) ProtoMessage()    {}
func (*MsgUpdateGuardTransferCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{8}
}
func (m *MsgUpdateGuardTransferCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGuardTransferCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGuardTransferCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGuardTransferCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGuardTransferCoins.Merge(m, src)
}
func (m *MsgUpdateGuardTransferCoins) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGuardTransferCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGuardTransferCoins.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGuardTransferCoins proto.InternalMessageInfo

func (m *MsgUpdateGuardTransferCoins) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateGuardTransferCoins) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type MsgUpdateGuardTransferCoinsResponse struct {
}

func (m *MsgUpdateGuardTransferCoinsResponse) Reset()         { *m = MsgUpdateGuardTransferCoinsResponse{} }
func (m *MsgUpdateGuardTransferCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateGuardTransferCoinsResponse) ProtoMessage()    {}
func (*MsgUpdateGuardTransferCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{9}
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse.Merge(m, src)
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateGuardTransferCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateGuardTransferCoinsResponse proto.InternalMessageInfo

type MsgRequiredPrivilegesList struct {
	Indexes    [][]byte `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Privileges [][]byte `protobuf:"bytes,2,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *MsgRequiredPrivilegesList) Reset()         { *m = MsgRequiredPrivilegesList{} }
func (m *MsgRequiredPrivilegesList) String() string { return proto.CompactTextString(m) }
func (*MsgRequiredPrivilegesList) ProtoMessage()    {}
func (*MsgRequiredPrivilegesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{10}
}
func (m *MsgRequiredPrivilegesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequiredPrivilegesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequiredPrivilegesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequiredPrivilegesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequiredPrivilegesList.Merge(m, src)
}
func (m *MsgRequiredPrivilegesList) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequiredPrivilegesList) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequiredPrivilegesList.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequiredPrivilegesList proto.InternalMessageInfo

func (m *MsgRequiredPrivilegesList) GetIndexes() [][]byte {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *MsgRequiredPrivilegesList) GetPrivileges() [][]byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MsgRequiredPrivilegesListGrouped struct {
	Indexes    []*MsgIndexes `protobuf:"bytes,1,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Privileges [][]byte      `protobuf:"bytes,2,rep,name=privileges,proto3" json:"privileges,omitempty"`
}

func (m *MsgRequiredPrivilegesListGrouped) Reset()         { *m = MsgRequiredPrivilegesListGrouped{} }
func (m *MsgRequiredPrivilegesListGrouped) String() string { return proto.CompactTextString(m) }
func (*MsgRequiredPrivilegesListGrouped) ProtoMessage()    {}
func (*MsgRequiredPrivilegesListGrouped) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{11}
}
func (m *MsgRequiredPrivilegesListGrouped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequiredPrivilegesListGrouped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequiredPrivilegesListGrouped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequiredPrivilegesListGrouped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequiredPrivilegesListGrouped.Merge(m, src)
}
func (m *MsgRequiredPrivilegesListGrouped) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequiredPrivilegesListGrouped) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequiredPrivilegesListGrouped.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequiredPrivilegesListGrouped proto.InternalMessageInfo

func (m *MsgRequiredPrivilegesListGrouped) GetIndexes() []*MsgIndexes {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *MsgRequiredPrivilegesListGrouped) GetPrivileges() [][]byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MsgUpdateRequiredPrivileges struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index      []byte `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Privileges []byte `protobuf:"bytes,3,opt,name=privileges,proto3" json:"privileges,omitempty"`
	Kind       string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateRequiredPrivileges) Reset()         { *m = MsgUpdateRequiredPrivileges{} }
func (m *MsgUpdateRequiredPrivileges) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivileges) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivileges) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{12}
}
func (m *MsgUpdateRequiredPrivileges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivileges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivileges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivileges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivileges.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivileges) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivileges) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivileges.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivileges proto.InternalMessageInfo

func (m *MsgUpdateRequiredPrivileges) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRequiredPrivileges) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MsgUpdateRequiredPrivileges) GetPrivileges() []byte {
	if m != nil {
		return m.Privileges
	}
	return nil
}

func (m *MsgUpdateRequiredPrivileges) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateRequiredPrivilegesResponse struct {
}

func (m *MsgUpdateRequiredPrivilegesResponse) Reset()         { *m = MsgUpdateRequiredPrivilegesResponse{} }
func (m *MsgUpdateRequiredPrivilegesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesResponse) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{13}
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesResponse proto.InternalMessageInfo

type MsgUpdateRequiredPrivilegesBatch struct {
	Creator                string                     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequiredPrivilegesList *MsgRequiredPrivilegesList `protobuf:"bytes,2,opt,name=required_privileges_list,json=requiredPrivilegesList,proto3" json:"required_privileges_list,omitempty"`
	Kind                   string                     `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateRequiredPrivilegesBatch) Reset()         { *m = MsgUpdateRequiredPrivilegesBatch{} }
func (m *MsgUpdateRequiredPrivilegesBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesBatch) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{14}
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesBatch proto.InternalMessageInfo

func (m *MsgUpdateRequiredPrivilegesBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRequiredPrivilegesBatch) GetRequiredPrivilegesList() *MsgRequiredPrivilegesList {
	if m != nil {
		return m.RequiredPrivilegesList
	}
	return nil
}

func (m *MsgUpdateRequiredPrivilegesBatch) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateRequiredPrivilegesBatchResponse struct {
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) Reset() {
	*m = MsgUpdateRequiredPrivilegesBatchResponse{}
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesBatchResponse) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{15}
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesBatchResponse proto.InternalMessageInfo

type MsgUpdateRequiredPrivilegesGroupedBatch struct {
	Creator                       string                            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequiredPrivilegesListGrouped *MsgRequiredPrivilegesListGrouped `protobuf:"bytes,2,opt,name=required_privileges_list_grouped,json=requiredPrivilegesListGrouped,proto3" json:"required_privileges_list_grouped,omitempty"`
	Kind                          string                            `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Reset() {
	*m = MsgUpdateRequiredPrivilegesGroupedBatch{}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRequiredPrivilegesGroupedBatch) ProtoMessage()    {}
func (*MsgUpdateRequiredPrivilegesGroupedBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{16}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatch proto.InternalMessageInfo

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) GetRequiredPrivilegesListGrouped() *MsgRequiredPrivilegesListGrouped {
	if m != nil {
		return m.RequiredPrivilegesListGrouped
	}
	return nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateRequiredPrivilegesGroupedBatchResponse struct {
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Reset() {
	*m = MsgUpdateRequiredPrivilegesGroupedBatchResponse{}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateRequiredPrivilegesGroupedBatchResponse) ProtoMessage() {}
func (*MsgUpdateRequiredPrivilegesGroupedBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{17}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse.Merge(m, src)
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRequiredPrivilegesGroupedBatchResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgUpdateLocked struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index   []byte `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Locked  bool   `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	Kind    string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (m *MsgUpdateLocked) Reset()         { *m = MsgUpdateLocked{} }
func (m *MsgUpdateLocked) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLocked) ProtoMessage()    {}
func (*MsgUpdateLocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{18}
}
func (m *MsgUpdateLocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLocked.Merge(m, src)
}
func (m *MsgUpdateLocked) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLocked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLocked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLocked proto.InternalMessageInfo

func (m *MsgUpdateLocked) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateLocked) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MsgUpdateLocked) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

func (m *MsgUpdateLocked) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type MsgUpdateLockedResponse struct {
}

func (m *MsgUpdateLockedResponse) Reset()         { *m = MsgUpdateLockedResponse{} }
func (m *MsgUpdateLockedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateLockedResponse) ProtoMessage()    {}
func (*MsgUpdateLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{19}
}
func (m *MsgUpdateLockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateLockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateLockedResponse.Merge(m, src)
}
func (m *MsgUpdateLockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateLockedResponse proto.InternalMessageInfo

type MsgUpdateAuthzGenericGrantRevokeBatch struct {
	Creator                   string                     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Grantee                   string                     `protobuf:"bytes,2,opt,name=grantee,proto3" json:"grantee,omitempty"`
	AuthzGrantRevokeMsgsTypes *AuthzGrantRevokeMsgsTypes `protobuf:"bytes,3,opt,name=authz_grant_revoke_msgs_types,json=authzGrantRevokeMsgsTypes,proto3" json:"authz_grant_revoke_msgs_types,omitempty"`
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Reset()         { *m = MsgUpdateAuthzGenericGrantRevokeBatch{} }
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAuthzGenericGrantRevokeBatch) ProtoMessage()    {}
func (*MsgUpdateAuthzGenericGrantRevokeBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{20}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch.Merge(m, src)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatch proto.InternalMessageInfo

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) GetGrantee() string {
	if m != nil {
		return m.Grantee
	}
	return ""
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) GetAuthzGrantRevokeMsgsTypes() *AuthzGrantRevokeMsgsTypes {
	if m != nil {
		return m.AuthzGrantRevokeMsgsTypes
	}
	return nil
}

type MsgUpdateAuthzGenericGrantRevokeBatchResponse struct {
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Reset() {
	*m = MsgUpdateAuthzGenericGrantRevokeBatchResponse{}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUpdateAuthzGenericGrantRevokeBatchResponse) ProtoMessage() {}
func (*MsgUpdateAuthzGenericGrantRevokeBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700e063159380a3c, []int{21}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse.Merge(m, src)
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAuthzGenericGrantRevokeBatchResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAccountsPrivileges)(nil), "mantrachain.guard.v1.MsgAccountsPrivileges")
	proto.RegisterType((*MsgAccountsPrivilegesGrouped)(nil), "mantrachain.guard.v1.MsgAccountsPrivilegesGrouped")
	proto.RegisterType((*MsgUpdateAccountPrivileges)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivileges")
	proto.RegisterType((*MsgUpdateAccountPrivilegesResponse)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesResponse")
	proto.RegisterType((*MsgUpdateAccountPrivilegesBatch)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesBatch")
	proto.RegisterType((*MsgUpdateAccountPrivilegesBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesBatchResponse")
	proto.RegisterType((*MsgUpdateAccountPrivilegesGroupedBatch)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesGroupedBatch")
	proto.RegisterType((*MsgUpdateAccountPrivilegesGroupedBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateAccountPrivilegesGroupedBatchResponse")
	proto.RegisterType((*MsgUpdateGuardTransferCoins)(nil), "mantrachain.guard.v1.MsgUpdateGuardTransferCoins")
	proto.RegisterType((*MsgUpdateGuardTransferCoinsResponse)(nil), "mantrachain.guard.v1.MsgUpdateGuardTransferCoinsResponse")
	proto.RegisterType((*MsgRequiredPrivilegesList)(nil), "mantrachain.guard.v1.MsgRequiredPrivilegesList")
	proto.RegisterType((*MsgRequiredPrivilegesListGrouped)(nil), "mantrachain.guard.v1.MsgRequiredPrivilegesListGrouped")
	proto.RegisterType((*MsgUpdateRequiredPrivileges)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivileges")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesResponse)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesResponse")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesBatch)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesBatch")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesBatchResponse")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesGroupedBatch)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesGroupedBatch")
	proto.RegisterType((*MsgUpdateRequiredPrivilegesGroupedBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateRequiredPrivilegesGroupedBatchResponse")
	proto.RegisterType((*MsgUpdateLocked)(nil), "mantrachain.guard.v1.MsgUpdateLocked")
	proto.RegisterType((*MsgUpdateLockedResponse)(nil), "mantrachain.guard.v1.MsgUpdateLockedResponse")
	proto.RegisterType((*MsgUpdateAuthzGenericGrantRevokeBatch)(nil), "mantrachain.guard.v1.MsgUpdateAuthzGenericGrantRevokeBatch")
	proto.RegisterType((*MsgUpdateAuthzGenericGrantRevokeBatchResponse)(nil), "mantrachain.guard.v1.MsgUpdateAuthzGenericGrantRevokeBatchResponse")
}

func init() { proto.RegisterFile("mantrachain/guard/v1/tx.proto", fileDescriptor_700e063159380a3c) }

var fileDescriptor_700e063159380a3c = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xee, 0xb4, 0xcb, 0xb6, 0xbc, 0x46, 0x42, 0x32, 0x65, 0xeb, 0x78, 0xb7, 0x21, 0xeb, 0xdd,
	0x42, 0x59, 0xd4, 0x78, 0x9b, 0x85, 0x15, 0x2c, 0x14, 0xa9, 0x5d, 0x20, 0x42, 0xda, 0x20, 0x64,
	0xba, 0x17, 0x84, 0x14, 0x4d, 0xed, 0xc1, 0xb1, 0x1a, 0xdb, 0xd9, 0x19, 0x27, 0xea, 0x22, 0xf1,
	0x43, 0x48, 0x48, 0x1c, 0x39, 0x20, 0xf1, 0x1f, 0x20, 0xad, 0xc4, 0x01, 0x21, 0xce, 0x48, 0xdc,
	0x38, 0xa1, 0x8a, 0x13, 0x27, 0x84, 0x9a, 0x03, 0xff, 0xc6, 0xca, 0xbf, 0xa6, 0x4e, 0xe2, 0x89,
	0xed, 0xe4, 0x96, 0x99, 0x79, 0xdf, 0x7b, 0xdf, 0xfb, 0xe6, 0xbd, 0x37, 0x31, 0x6c, 0x39, 0xd8,
	0xf5, 0x29, 0x36, 0xba, 0xd8, 0x76, 0x35, 0x6b, 0x80, 0xa9, 0xa9, 0x0d, 0xf7, 0x34, 0xff, 0xb4,
	0xd1, 0xa7, 0x9e, 0xef, 0x49, 0x1b, 0xa9, 0xe3, 0x46, 0x78, 0xdc, 0x18, 0xee, 0x29, 0x9b, 0x86,
	0xc7, 0x1c, 0x8f, 0x69, 0x0e, 0xb3, 0x02, 0x6b, 0x87, 0x59, 0x91, 0xb9, 0x52, 0x8d, 0x0e, 0x3a,
	0xe1, 0x4a, 0x8b, 0x16, 0xf1, 0xd1, 0xf5, 0xcc, 0x40, 0x86, 0xe7, 0x38, 0x9e, 0x1b, 0x99, 0xa8,
	0x0e, 0xbc, 0xd0, 0x66, 0xd6, 0x81, 0x61, 0x78, 0x03, 0xd7, 0x67, 0x1f, 0x51, 0x7b, 0x68, 0xf7,
	0x88, 0x45, 0x98, 0xf4, 0x1a, 0xac, 0xe1, 0x78, 0x57, 0x46, 0xf5, 0x95, 0x9d, 0x67, 0x0f, 0xe5,
	0xbf, 0x7f, 0xdb, 0xdd, 0x88, 0xfd, 0x1f, 0x98, 0x26, 0x25, 0x8c, 0x7d, 0xec, 0x53, 0xdb, 0xb5,
	0x74, 0x6e, 0x29, 0xd5, 0x00, 0xfa, 0xdc, 0x87, 0xbc, 0x5c, 0x5f, 0xd9, 0xa9, 0xe8, 0xa9, 0x1d,
	0xf5, 0x0b, 0xb8, 0x96, 0x19, 0xae, 0x45, 0xbd, 0x41, 0x9f, 0x98, 0xd2, 0xfe, 0x44, 0xd4, 0xf5,
	0xe6, 0xf5, 0x46, 0x96, 0x1c, 0x8d, 0x94, 0x97, 0x12, 0xe1, 0x7f, 0x45, 0xa0, 0xb4, 0x99, 0xf5,
	0xb0, 0x6f, 0x62, 0x9f, 0xc4, 0xf8, 0x54, 0xce, 0x4d, 0x58, 0x35, 0x28, 0xc1, 0xbe, 0x47, 0x65,
	0x54, 0x47, 0x33, 0x53, 0x4e, 0x0c, 0x03, 0x4c, 0x1c, 0x5e, 0x5e, 0xce, 0xc3, 0xc4, 0x86, 0x13,
	0x34, 0x57, 0xea, 0x68, 0x9c, 0xe6, 0xbd, 0xca, 0x37, 0xff, 0xff, 0x72, 0x2b, 0x89, 0xa0, 0xde,
	0x04, 0x55, 0xcc, 0x59, 0x27, 0xac, 0xef, 0xb9, 0x8c, 0xa8, 0x7f, 0x20, 0x78, 0x51, 0x6c, 0x76,
	0x88, 0x7d, 0xa3, 0x3b, 0x57, 0x7e, 0x9f, 0xc2, 0xf3, 0x89, 0xbc, 0x9d, 0x31, 0x6d, 0xd1, 0xce,
	0x7a, 0xf3, 0xd5, 0xdc, 0xcb, 0x49, 0x31, 0x95, 0xf0, 0xd4, 0xde, 0x44, 0xa6, 0xaf, 0xc0, 0xcb,
	0x39, 0x29, 0xf0, 0x74, 0xff, 0x45, 0xf0, 0x92, 0xd8, 0x36, 0x2e, 0xa7, 0xf9, 0xb3, 0xa6, 0x70,
	0x35, 0x23, 0xeb, 0x8e, 0x15, 0xf9, 0x8d, 0xb3, 0x6f, 0x96, 0xc8, 0x3e, 0x66, 0xa4, 0x57, 0xb1,
	0xe8, 0x68, 0x42, 0x8b, 0xdb, 0xd0, 0x28, 0x96, 0x1f, 0x97, 0xe4, 0x31, 0x5c, 0xe5, 0x88, 0x56,
	0x40, 0xe6, 0x88, 0x62, 0x97, 0x7d, 0x46, 0xe8, 0x7d, 0xcf, 0x76, 0xe7, 0x2b, 0x6e, 0x19, 0x56,
	0x89, 0x8b, 0x8f, 0x7b, 0x71, 0xca, 0x6b, 0x7a, 0xb2, 0x9c, 0x20, 0xbb, 0x0d, 0x37, 0x66, 0x84,
	0xe6, 0x0c, 0x1f, 0x42, 0xb5, 0xcd, 0x2c, 0x9d, 0x3c, 0x1a, 0xd8, 0x94, 0x98, 0x17, 0xe9, 0x3c,
	0xb0, 0x99, 0x1f, 0xc4, 0xb2, 0x5d, 0x93, 0x9c, 0x92, 0xa8, 0xf3, 0x2b, 0x7a, 0xb2, 0xcc, 0xed,
	0xea, 0x2f, 0xa1, 0x2e, 0x74, 0x9b, 0x0c, 0x96, 0x7b, 0xe3, 0xde, 0xd7, 0x9b, 0x75, 0xe1, 0xe5,
	0x7d, 0x10, 0xd9, 0x15, 0x8f, 0xff, 0x04, 0xa5, 0x94, 0x9f, 0xa6, 0x31, 0x97, 0xf2, 0x1b, 0xf0,
	0x4c, 0x18, 0x3e, 0xd4, 0xbd, 0xa2, 0x47, 0x8b, 0xbc, 0xc1, 0x21, 0x49, 0x70, 0xe9, 0xc4, 0x76,
	0x4d, 0xf9, 0x52, 0x10, 0x46, 0x0f, 0x7f, 0xcf, 0xb8, 0xa9, 0x69, 0xaa, 0xfc, 0xa6, 0x46, 0x28,
	0xd4, 0x54, 0x64, 0x37, 0x7f, 0x63, 0xd9, 0x20, 0xd3, 0xd8, 0x5d, 0xba, 0xb1, 0x7a, 0x36, 0xf3,
	0xe3, 0xae, 0xd2, 0x84, 0x17, 0x93, 0x7d, 0xc3, 0xfa, 0x15, 0x9a, 0x5d, 0x50, 0xf9, 0x62, 0xdc,
	0x82, 0x9d, 0xbc, 0x24, 0xb9, 0x22, 0x5f, 0x2f, 0xa7, 0x86, 0xd3, 0xb4, 0xf1, 0xc2, 0x13, 0xe7,
	0x2b, 0xa8, 0x8b, 0x84, 0x99, 0x18, 0x3b, 0x77, 0x4b, 0x0a, 0x94, 0x8c, 0x9e, 0x2d, 0x3a, 0xb3,
	0x43, 0xf2, 0xe5, 0xda, 0x03, 0xad, 0xa0, 0x02, 0x5c, 0x35, 0x07, 0x9e, 0xe3, 0x90, 0x07, 0x9e,
	0x71, 0x42, 0xcc, 0xa0, 0xcf, 0xc7, 0xc4, 0xc9, 0xab, 0xf9, 0x2b, 0x70, 0xb9, 0x17, 0x22, 0xc3,
	0x7a, 0x5f, 0xd3, 0xe3, 0x55, 0x16, 0x5f, 0xb5, 0x0a, 0x9b, 0x13, 0xe1, 0x38, 0x93, 0xbf, 0x10,
	0x6c, 0x5f, 0x0c, 0xd4, 0x81, 0xdf, 0xfd, 0xbc, 0x45, 0x5c, 0x42, 0x6d, 0xa3, 0x45, 0xb1, 0xeb,
	0xeb, 0x64, 0xe8, 0x9d, 0x90, 0xe8, 0xf6, 0xc4, 0x04, 0x65, 0x58, 0xb5, 0x02, 0x6b, 0x42, 0xa2,
	0xb7, 0x5e, 0x4f, 0x96, 0xd2, 0x23, 0xd8, 0xc2, 0x81, 0xcf, 0x4e, 0xb8, 0xd1, 0xa1, 0xa1, 0xbb,
	0x8e, 0xc3, 0x2c, 0xd6, 0xf1, 0x1f, 0xf7, 0xe3, 0x5e, 0x15, 0xd6, 0x76, 0x44, 0xe7, 0x82, 0x47,
	0x9b, 0x59, 0xec, 0x28, 0x80, 0xe9, 0x55, 0x2c, 0x3a, 0x52, 0x35, 0xd8, 0x2d, 0x94, 0x4f, 0xa2,
	0x40, 0xf3, 0x77, 0x80, 0x95, 0x36, 0xb3, 0xa4, 0x6f, 0x11, 0x6c, 0x8a, 0xfe, 0x01, 0xdd, 0x16,
	0xd6, 0x96, 0x00, 0xa1, 0xbc, 0x51, 0x16, 0x91, 0xf0, 0x91, 0x7e, 0x40, 0x70, 0x6d, 0xe6, 0xdf,
	0x95, 0xd7, 0xcb, 0xba, 0x0e, 0x61, 0xca, 0xfe, 0x5c, 0x30, 0x4e, 0xeb, 0x09, 0x82, 0x1b, 0x45,
	0xfe, 0x56, 0xbc, 0x5d, 0x36, 0x4c, 0x1a, 0xad, 0xbc, 0xbb, 0x08, 0x9a, 0x73, 0xfd, 0x0e, 0x81,
	0x2c, 0x7c, 0xf0, 0xf7, 0x72, 0x42, 0x4c, 0x43, 0x94, 0x37, 0x4b, 0x43, 0x32, 0xa8, 0x64, 0xbc,
	0x80, 0x79, 0x54, 0xa6, 0x21, 0xb9, 0x54, 0xc4, 0x8f, 0x97, 0xf4, 0x23, 0x82, 0xad, 0xd9, 0x2f,
	0xd7, 0xdd, 0xd2, 0xce, 0xa3, 0x5b, 0x7b, 0x67, 0x3e, 0x1c, 0x67, 0xf6, 0x33, 0x82, 0x9b, 0x85,
	0x5e, 0x90, 0xfd, 0xd2, 0x81, 0xc6, 0xaa, 0xeb, 0xbd, 0x85, 0xe0, 0x9c, 0xae, 0x09, 0x95, 0xb1,
	0xd1, 0xbd, 0x9d, 0xe3, 0x36, 0x32, 0x53, 0x76, 0x0b, 0x99, 0xf1, 0x28, 0x3f, 0x21, 0x50, 0x0b,
	0x8c, 0xe5, 0xb7, 0xf2, 0x3a, 0x66, 0x06, 0x58, 0xb9, 0xbf, 0x00, 0x38, 0x21, 0x7a, 0xd8, 0xfe,
	0xf3, 0xbc, 0x86, 0xce, 0xce, 0x6b, 0xe8, 0xbf, 0xf3, 0x1a, 0xfa, 0x7e, 0x54, 0x5b, 0x3a, 0x1b,
	0xd5, 0x96, 0xfe, 0x19, 0xd5, 0x96, 0x3e, 0xb9, 0x63, 0xd9, 0x7e, 0x77, 0x70, 0xdc, 0x30, 0x3c,
	0x47, 0x6b, 0x1f, 0x7c, 0x78, 0xa4, 0x1f, 0xec, 0xbe, 0x6f, 0xbb, 0xd8, 0x35, 0x88, 0x96, 0xfe,
	0x04, 0x3f, 0x8d, 0x3f, 0xc2, 0xc3, 0x27, 0xe1, 0xf8, 0x72, 0xf8, 0x05, 0x7e, 0xe7, 0x69, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x18, 0xd5, 0x78, 0xc9, 0x0f, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	UpdateAccountPrivileges(ctx context.Context, in *MsgUpdateAccountPrivileges, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesResponse, error)
	UpdateAccountPrivilegesBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesBatchResponse, error)
	UpdateAccountPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error)
	UpdateGuardTransferCoins(ctx context.Context, in *MsgUpdateGuardTransferCoins, opts ...grpc.CallOption) (*MsgUpdateGuardTransferCoinsResponse, error)
	UpdateRequiredPrivileges(ctx context.Context, in *MsgUpdateRequiredPrivileges, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesResponse, error)
	UpdateRequiredPrivilegesBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesBatchResponse, error)
	UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc}
	UpdateLocked(ctx context.Context, in *MsgUpdateLocked, opts ...grpc.CallOption) (*MsgUpdateLockedResponse, error)
	UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, in *MsgUpdateAuthzGenericGrantRevokeBatch, opts ...grpc.CallOption) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateAccountPrivileges(ctx context.Context, in *MsgUpdateAccountPrivileges, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesResponse, error) {
	out := new(MsgUpdateAccountPrivilegesResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAccountPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivilegesBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesBatchResponse, error) {
	out := new(MsgUpdateAccountPrivilegesBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAccountPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateAccountPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error) {
	out := new(MsgUpdateAccountPrivilegesGroupedBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesGroupedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateGuardTransferCoins(ctx context.Context, in *MsgUpdateGuardTransferCoins, opts ...grpc.CallOption) (*MsgUpdateGuardTransferCoinsResponse, error) {
	out := new(MsgUpdateGuardTransferCoinsResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateGuardTransferCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivileges(ctx context.Context, in *MsgUpdateRequiredPrivileges, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateRequiredPrivileges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivilegesBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesBatchResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, in *MsgUpdateRequiredPrivilegesGroupedBatch, opts ...grpc.CallOption) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error) {
	out := new(MsgUpdateRequiredPrivilegesGroupedBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesGroupedBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateLocked(ctx context.Context, in *MsgUpdateLocked, opts ...grpc.CallOption) (*MsgUpdateLockedResponse, error) {
	out := new(MsgUpdateLockedResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, in *MsgUpdateAuthzGenericGrantRevokeBatch, opts ...grpc.CallOption) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error) {
	out := new(MsgUpdateAuthzGenericGrantRevokeBatchResponse)
	err := c.cc.Invoke(ctx, "/mantrachain.guard.v1.Msg/UpdateAuthzGenericGrantRevokeBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	UpdateAccountPrivileges(context.Context, *MsgUpdateAccountPrivileges) (*MsgUpdateAccountPrivilegesResponse, error)
	UpdateAccountPrivilegesBatch(context.Context, *MsgUpdateAccountPrivilegesBatch) (*MsgUpdateAccountPrivilegesBatchResponse, error)
	UpdateAccountPrivilegesGroupedBatch(context.Context, *MsgUpdateAccountPrivilegesGroupedBatch) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error)
	UpdateGuardTransferCoins(context.Context, *MsgUpdateGuardTransferCoins) (*MsgUpdateGuardTransferCoinsResponse, error)
	UpdateRequiredPrivileges(context.Context, *MsgUpdateRequiredPrivileges) (*MsgUpdateRequiredPrivilegesResponse, error)
	UpdateRequiredPrivilegesBatch(context.Context, *MsgUpdateRequiredPrivilegesBatch) (*MsgUpdateRequiredPrivilegesBatchResponse, error)
	UpdateRequiredPrivilegesGroupedBatch(context.Context, *MsgUpdateRequiredPrivilegesGroupedBatch) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error)
	// this line is used by starport scaffolding # proto/tx/rpc}
	UpdateLocked(context.Context, *MsgUpdateLocked) (*MsgUpdateLockedResponse, error)
	UpdateAuthzGenericGrantRevokeBatch(context.Context, *MsgUpdateAuthzGenericGrantRevokeBatch) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateAccountPrivileges(ctx context.Context, req *MsgUpdateAccountPrivileges) (*MsgUpdateAccountPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivileges not implemented")
}
func (*UnimplementedMsgServer) UpdateAccountPrivilegesBatch(ctx context.Context, req *MsgUpdateAccountPrivilegesBatch) (*MsgUpdateAccountPrivilegesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivilegesBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateAccountPrivilegesGroupedBatch(ctx context.Context, req *MsgUpdateAccountPrivilegesGroupedBatch) (*MsgUpdateAccountPrivilegesGroupedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountPrivilegesGroupedBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateGuardTransferCoins(ctx context.Context, req *MsgUpdateGuardTransferCoins) (*MsgUpdateGuardTransferCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuardTransferCoins not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredPrivileges(ctx context.Context, req *MsgUpdateRequiredPrivileges) (*MsgUpdateRequiredPrivilegesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivileges not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredPrivilegesBatch(ctx context.Context, req *MsgUpdateRequiredPrivilegesBatch) (*MsgUpdateRequiredPrivilegesBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivilegesBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateRequiredPrivilegesGroupedBatch(ctx context.Context, req *MsgUpdateRequiredPrivilegesGroupedBatch) (*MsgUpdateRequiredPrivilegesGroupedBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequiredPrivilegesGroupedBatch not implemented")
}
func (*UnimplementedMsgServer) UpdateLocked(ctx context.Context, req *MsgUpdateLocked) (*MsgUpdateLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocked not implemented")
}
func (*UnimplementedMsgServer) UpdateAuthzGenericGrantRevokeBatch(ctx context.Context, req *MsgUpdateAuthzGenericGrantRevokeBatch) (*MsgUpdateAuthzGenericGrantRevokeBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthzGenericGrantRevokeBatch not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateAccountPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAccountPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivileges(ctx, req.(*MsgUpdateAccountPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivilegesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivilegesBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivilegesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivilegesBatch(ctx, req.(*MsgUpdateAccountPrivilegesBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAccountPrivilegesGroupedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAccountPrivilegesGroupedBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAccountPrivilegesGroupedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAccountPrivilegesGroupedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAccountPrivilegesGroupedBatch(ctx, req.(*MsgUpdateAccountPrivilegesGroupedBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateGuardTransferCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateGuardTransferCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateGuardTransferCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateGuardTransferCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateGuardTransferCoins(ctx, req.(*MsgUpdateGuardTransferCoins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivileges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivileges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivileges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateRequiredPrivileges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivileges(ctx, req.(*MsgUpdateRequiredPrivileges))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivilegesBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivilegesBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivilegesBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivilegesBatch(ctx, req.(*MsgUpdateRequiredPrivilegesBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRequiredPrivilegesGroupedBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRequiredPrivilegesGroupedBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRequiredPrivilegesGroupedBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateRequiredPrivilegesGroupedBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRequiredPrivilegesGroupedBatch(ctx, req.(*MsgUpdateRequiredPrivilegesGroupedBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateLocked(ctx, req.(*MsgUpdateLocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAuthzGenericGrantRevokeBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAuthzGenericGrantRevokeBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAuthzGenericGrantRevokeBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mantrachain.guard.v1.Msg/UpdateAuthzGenericGrantRevokeBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAuthzGenericGrantRevokeBatch(ctx, req.(*MsgUpdateAuthzGenericGrantRevokeBatch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mantrachain.guard.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAccountPrivileges",
			Handler:    _Msg_UpdateAccountPrivileges_Handler,
		},
		{
			MethodName: "UpdateAccountPrivilegesBatch",
			Handler:    _Msg_UpdateAccountPrivilegesBatch_Handler,
		},
		{
			MethodName: "UpdateAccountPrivilegesGroupedBatch",
			Handler:    _Msg_UpdateAccountPrivilegesGroupedBatch_Handler,
		},
		{
			MethodName: "UpdateGuardTransferCoins",
			Handler:    _Msg_UpdateGuardTransferCoins_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivileges",
			Handler:    _Msg_UpdateRequiredPrivileges_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivilegesBatch",
			Handler:    _Msg_UpdateRequiredPrivilegesBatch_Handler,
		},
		{
			MethodName: "UpdateRequiredPrivilegesGroupedBatch",
			Handler:    _Msg_UpdateRequiredPrivilegesGroupedBatch_Handler,
		},
		{
			MethodName: "UpdateLocked",
			Handler:    _Msg_UpdateLocked_Handler,
		},
		{
			MethodName: "UpdateAuthzGenericGrantRevokeBatch",
			Handler:    _Msg_UpdateAuthzGenericGrantRevokeBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mantrachain/guard/v1/tx.proto",
}

func (m *MsgAccountsPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountsPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountsPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		for iNdEx := len(m.Privileges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Privileges[iNdEx])
			copy(dAtA[i:], m.Privileges[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAccountsPrivilegesGrouped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountsPrivilegesGrouped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountsPrivilegesGrouped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		for iNdEx := len(m.Privileges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Privileges[iNdEx])
			copy(dAtA[i:], m.Privileges[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		i -= len(m.Privileges)
		copy(dAtA[i:], m.Privileges)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountsPrivileges != nil {
		{
			size, err := m.AccountsPrivileges.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountsPrivilegesGrouped != nil {
		{
			size, err := m.AccountsPrivilegesGrouped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGuardTransferCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGuardTransferCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGuardTransferCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateGuardTransferCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateGuardTransferCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateGuardTransferCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequiredPrivilegesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequiredPrivilegesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequiredPrivilegesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		for iNdEx := len(m.Privileges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Privileges[iNdEx])
			copy(dAtA[i:], m.Privileges[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Indexes[iNdEx])
			copy(dAtA[i:], m.Indexes[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Indexes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequiredPrivilegesListGrouped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequiredPrivilegesListGrouped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequiredPrivilegesListGrouped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		for iNdEx := len(m.Privileges) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Privileges[iNdEx])
			copy(dAtA[i:], m.Privileges[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Indexes) > 0 {
		for iNdEx := len(m.Indexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Indexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivileges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivileges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivileges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Privileges) > 0 {
		i -= len(m.Privileges)
		copy(dAtA[i:], m.Privileges)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Privileges)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequiredPrivilegesList != nil {
		{
			size, err := m.RequiredPrivilegesList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if m.RequiredPrivilegesListGrouped != nil {
		{
			size, err := m.RequiredPrivilegesListGrouped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Kind) > 0 {
		i -= len(m.Kind)
		copy(dAtA[i:], m.Kind)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Kind)))
		i--
		dAtA[i] = 0x22
	}
	if m.Locked {
		i--
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateLockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateLockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateLockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthzGrantRevokeMsgsTypes != nil {
		{
			size, err := m.AuthzGrantRevokeMsgsTypes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Grantee) > 0 {
		i -= len(m.Grantee)
		copy(dAtA[i:], m.Grantee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Grantee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAccountsPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Privileges) > 0 {
		for _, b := range m.Privileges {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAccountsPrivilegesGrouped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Privileges) > 0 {
		for _, b := range m.Privileges {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateAccountPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Privileges)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountPrivilegesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccountPrivilegesBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AccountsPrivileges != nil {
		l = m.AccountsPrivileges.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountPrivilegesBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAccountPrivilegesGroupedBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AccountsPrivilegesGrouped != nil {
		l = m.AccountsPrivilegesGrouped.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateGuardTransferCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgUpdateGuardTransferCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequiredPrivilegesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		for _, b := range m.Indexes {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Privileges) > 0 {
		for _, b := range m.Privileges {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRequiredPrivilegesListGrouped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Indexes) > 0 {
		for _, e := range m.Indexes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Privileges) > 0 {
		for _, b := range m.Privileges {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateRequiredPrivileges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Privileges)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredPrivilegesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequiredPrivilegesBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequiredPrivilegesList != nil {
		l = m.RequiredPrivilegesList.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredPrivilegesBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequiredPrivilegesListGrouped != nil {
		l = m.RequiredPrivilegesListGrouped.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateLocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Locked {
		n += 2
	}
	l = len(m.Kind)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateLockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Grantee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuthzGrantRevokeMsgsTypes != nil {
		l = m.AuthzGrantRevokeMsgsTypes.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAccountsPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountsPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountsPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges, make([]byte, postIndex-iNdEx))
			copy(m.Privileges[len(m.Privileges)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccountsPrivilegesGrouped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountsPrivilegesGrouped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountsPrivilegesGrouped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &MsgAccounts{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges, make([]byte, postIndex-iNdEx))
			copy(m.Privileges[len(m.Privileges)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges[:0], dAtA[iNdEx:postIndex]...)
			if m.Privileges == nil {
				m.Privileges = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsPrivileges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountsPrivileges == nil {
				m.AccountsPrivileges = &MsgAccountsPrivileges{}
			}
			if err := m.AccountsPrivileges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesGroupedBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountsPrivilegesGrouped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountsPrivilegesGrouped == nil {
				m.AccountsPrivilegesGrouped = &MsgAccountsPrivilegesGrouped{}
			}
			if err := m.AccountsPrivilegesGrouped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAccountPrivilegesGroupedBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAccountPrivilegesGroupedBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGuardTransferCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateGuardTransferCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateGuardTransferCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequiredPrivilegesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequiredPrivilegesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequiredPrivilegesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, make([]byte, postIndex-iNdEx))
			copy(m.Indexes[len(m.Indexes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges, make([]byte, postIndex-iNdEx))
			copy(m.Privileges[len(m.Privileges)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequiredPrivilegesListGrouped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequiredPrivilegesListGrouped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequiredPrivilegesListGrouped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Indexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Indexes = append(m.Indexes, &MsgIndexes{})
			if err := m.Indexes[len(m.Indexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges, make([]byte, postIndex-iNdEx))
			copy(m.Privileges[len(m.Privileges)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivileges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivileges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivileges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Privileges = append(m.Privileges[:0], dAtA[iNdEx:postIndex]...)
			if m.Privileges == nil {
				m.Privileges = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPrivilegesList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredPrivilegesList == nil {
				m.RequiredPrivilegesList = &MsgRequiredPrivilegesList{}
			}
			if err := m.RequiredPrivilegesList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredPrivilegesListGrouped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequiredPrivilegesListGrouped == nil {
				m.RequiredPrivilegesListGrouped = &MsgRequiredPrivilegesListGrouped{}
			}
			if err := m.RequiredPrivilegesListGrouped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRequiredPrivilegesGroupedBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRequiredPrivilegesGroupedBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kind = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateLockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateLockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateLockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grantee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grantee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthzGrantRevokeMsgsTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthzGrantRevokeMsgsTypes == nil {
				m.AuthzGrantRevokeMsgsTypes = &AuthzGrantRevokeMsgsTypes{}
			}
			if err := m.AuthzGrantRevokeMsgsTypes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAuthzGenericGrantRevokeBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAuthzGenericGrantRevokeBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
