// Code generated by MockGen. DO NOT EDIT.
// Source: x/guard/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"
	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
	authz "github.com/cosmos/cosmos-sdk/x/authz"
	types0 "github.com/cosmos/cosmos-sdk/x/bank/types"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// HasAccount mocks base method.
func (m *MockAccountKeeper) HasAccount(ctx types.Context, addr types.AccAddress) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccount", ctx, addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAccount indicates an expected call of HasAccount.
func (mr *MockAccountKeeperMockRecorder) HasAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccount", reflect.TypeOf((*MockAccountKeeper)(nil).HasAccount), ctx, addr)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// GetDenomMetaData mocks base method.
func (m *MockBankKeeper) GetDenomMetaData(ctx types.Context, denom string) (types0.Metadata, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDenomMetaData", ctx, denom)
	ret0, _ := ret[0].(types0.Metadata)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDenomMetaData indicates an expected call of GetDenomMetaData.
func (mr *MockBankKeeperMockRecorder) GetDenomMetaData(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDenomMetaData", reflect.TypeOf((*MockBankKeeper)(nil).GetDenomMetaData), ctx, denom)
}

// MockAuthzKeeper is a mock of AuthzKeeper interface.
type MockAuthzKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAuthzKeeperMockRecorder
}

// MockAuthzKeeperMockRecorder is the mock recorder for MockAuthzKeeper.
type MockAuthzKeeperMockRecorder struct {
	mock *MockAuthzKeeper
}

// NewMockAuthzKeeper creates a new mock instance.
func NewMockAuthzKeeper(ctrl *gomock.Controller) *MockAuthzKeeper {
	mock := &MockAuthzKeeper{ctrl: ctrl}
	mock.recorder = &MockAuthzKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthzKeeper) EXPECT() *MockAuthzKeeperMockRecorder {
	return m.recorder
}

// DeleteGrant mocks base method.
func (m *MockAuthzKeeper) DeleteGrant(ctx types.Context, grantee, granter types.AccAddress, msgType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGrant", ctx, grantee, granter, msgType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGrant indicates an expected call of DeleteGrant.
func (mr *MockAuthzKeeperMockRecorder) DeleteGrant(ctx, grantee, granter, msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGrant", reflect.TypeOf((*MockAuthzKeeper)(nil).DeleteGrant), ctx, grantee, granter, msgType)
}

// SaveGrant mocks base method.
func (m *MockAuthzKeeper) SaveGrant(ctx types.Context, grantee, granter types.AccAddress, authorization authz.Authorization, expiration *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGrant", ctx, grantee, granter, authorization, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGrant indicates an expected call of SaveGrant.
func (mr *MockAuthzKeeperMockRecorder) SaveGrant(ctx, grantee, granter, authorization, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGrant", reflect.TypeOf((*MockAuthzKeeper)(nil).SaveGrant), ctx, grantee, granter, authorization, expiration)
}

// MockNFTKeeper is a mock of NFTKeeper interface.
type MockNFTKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockNFTKeeperMockRecorder
}

// MockNFTKeeperMockRecorder is the mock recorder for MockNFTKeeper.
type MockNFTKeeperMockRecorder struct {
	mock *MockNFTKeeper
}

// NewMockNFTKeeper creates a new mock instance.
func NewMockNFTKeeper(ctrl *gomock.Controller) *MockNFTKeeper {
	mock := &MockNFTKeeper{ctrl: ctrl}
	mock.recorder = &MockNFTKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNFTKeeper) EXPECT() *MockNFTKeeperMockRecorder {
	return m.recorder
}

// GetOwner mocks base method.
func (m *MockNFTKeeper) GetOwner(ctx types.Context, classID, nftID string) types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOwner", ctx, classID, nftID)
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetOwner indicates an expected call of GetOwner.
func (mr *MockNFTKeeperMockRecorder) GetOwner(ctx, classID, nftID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOwner", reflect.TypeOf((*MockNFTKeeper)(nil).GetOwner), ctx, classID, nftID)
}

// MockTokenKeeper is a mock of TokenKeeper interface.
type MockTokenKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockTokenKeeperMockRecorder
}

// MockTokenKeeperMockRecorder is the mock recorder for MockTokenKeeper.
type MockTokenKeeperMockRecorder struct {
	mock *MockTokenKeeper
}

// NewMockTokenKeeper creates a new mock instance.
func NewMockTokenKeeper(ctrl *gomock.Controller) *MockTokenKeeper {
	mock := &MockTokenKeeper{ctrl: ctrl}
	mock.recorder = &MockTokenKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenKeeper) EXPECT() *MockTokenKeeperMockRecorder {
	return m.recorder
}

// HasRestrictedNftsCollection mocks base method.
func (m *MockTokenKeeper) HasRestrictedNftsCollection(ctx types.Context, index []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRestrictedNftsCollection", ctx, index)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasRestrictedNftsCollection indicates an expected call of HasRestrictedNftsCollection.
func (mr *MockTokenKeeperMockRecorder) HasRestrictedNftsCollection(ctx, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRestrictedNftsCollection", reflect.TypeOf((*MockTokenKeeper)(nil).HasRestrictedNftsCollection), ctx, index)
}

// MockCoinFactoryKeeper is a mock of CoinFactoryKeeper interface.
type MockCoinFactoryKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCoinFactoryKeeperMockRecorder
}

// MockCoinFactoryKeeperMockRecorder is the mock recorder for MockCoinFactoryKeeper.
type MockCoinFactoryKeeperMockRecorder struct {
	mock *MockCoinFactoryKeeper
}

// NewMockCoinFactoryKeeper creates a new mock instance.
func NewMockCoinFactoryKeeper(ctrl *gomock.Controller) *MockCoinFactoryKeeper {
	mock := &MockCoinFactoryKeeper{ctrl: ctrl}
	mock.recorder = &MockCoinFactoryKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoinFactoryKeeper) EXPECT() *MockCoinFactoryKeeperMockRecorder {
	return m.recorder
}

// GetAdmin mocks base method.
func (m *MockCoinFactoryKeeper) GetAdmin(ctx types.Context, denom string) (types.AccAddress, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", ctx, denom)
	ret0, _ := ret[0].(types.AccAddress)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockCoinFactoryKeeperMockRecorder) GetAdmin(ctx, denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockCoinFactoryKeeper)(nil).GetAdmin), ctx, denom)
}
