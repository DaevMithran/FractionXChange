// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mantrachain/airdrop/v1beta1/campaign.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Campaign is a struct that contains all the metadata of an airdrop campaign
type Campaign struct {
	Index           []byte                                   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Id              uint64                                   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	StartTime       time.Time                                `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime         time.Time                                `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	MtRoot          []byte                                   `protobuf:"bytes,7,opt,name=mt_root,json=mtRoot,proto3" json:"mt_root,omitempty"`
	Amounts         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
	IsPaused        bool                                     `protobuf:"varint,9,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	IsTerminated    bool                                     `protobuf:"varint,10,opt,name=is_terminated,json=isTerminated,proto3" json:"is_terminated,omitempty"`
	CampaignAddress string                                   `protobuf:"bytes,11,opt,name=campaign_address,json=campaignAddress,proto3" json:"campaign_address,omitempty"`
	Creator         string                                   `protobuf:"bytes,12,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Campaign) Reset()         { *m = Campaign{} }
func (m *Campaign) String() string { return proto.CompactTextString(m) }
func (*Campaign) ProtoMessage()    {}
func (*Campaign) Descriptor() ([]byte, []int) {
	return fileDescriptor_786f347ac4d18462, []int{0}
}
func (m *Campaign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Campaign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Campaign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Campaign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Campaign.Merge(m, src)
}
func (m *Campaign) XXX_Size() int {
	return m.Size()
}
func (m *Campaign) XXX_DiscardUnknown() {
	xxx_messageInfo_Campaign.DiscardUnknown(m)
}

var xxx_messageInfo_Campaign proto.InternalMessageInfo

func (m *Campaign) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Campaign) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Campaign) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Campaign) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Campaign) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Campaign) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Campaign) GetMtRoot() []byte {
	if m != nil {
		return m.MtRoot
	}
	return nil
}

func (m *Campaign) GetAmounts() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *Campaign) GetIsPaused() bool {
	if m != nil {
		return m.IsPaused
	}
	return false
}

func (m *Campaign) GetIsTerminated() bool {
	if m != nil {
		return m.IsTerminated
	}
	return false
}

func (m *Campaign) GetCampaignAddress() string {
	if m != nil {
		return m.CampaignAddress
	}
	return ""
}

func (m *Campaign) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// Claimed is a struct that contains all the metadata of a claim
type Claimed struct {
	Index       []byte                                   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	CampaignId  uint64                                   `protobuf:"varint,2,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	Address     string                                   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	ClaimedTime time.Time                                `protobuf:"bytes,4,opt,name=claimed_time,json=claimedTime,proto3,stdtime" json:"claimed_time"`
	Amounts     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
}

func (m *Claimed) Reset()         { *m = Claimed{} }
func (m *Claimed) String() string { return proto.CompactTextString(m) }
func (*Claimed) ProtoMessage()    {}
func (*Claimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_786f347ac4d18462, []int{1}
}
func (m *Claimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claimed.Merge(m, src)
}
func (m *Claimed) XXX_Size() int {
	return m.Size()
}
func (m *Claimed) XXX_DiscardUnknown() {
	xxx_messageInfo_Claimed.DiscardUnknown(m)
}

var xxx_messageInfo_Claimed proto.InternalMessageInfo

func (m *Claimed) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *Claimed) GetCampaignId() uint64 {
	if m != nil {
		return m.CampaignId
	}
	return 0
}

func (m *Claimed) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Claimed) GetClaimedTime() time.Time {
	if m != nil {
		return m.ClaimedTime
	}
	return time.Time{}
}

func (m *Claimed) GetAmounts() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func init() {
	proto.RegisterType((*Campaign)(nil), "mantrachain.airdrop.v1beta1.Campaign")
	proto.RegisterType((*Claimed)(nil), "mantrachain.airdrop.v1beta1.Claimed")
}

func init() {
	proto.RegisterFile("mantrachain/airdrop/v1beta1/campaign.proto", fileDescriptor_786f347ac4d18462)
}

var fileDescriptor_786f347ac4d18462 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xc1, 0x6e, 0xd4, 0x3c,
	0x10, 0xde, 0x6c, 0xb7, 0x4d, 0xd6, 0xd9, 0xff, 0x07, 0x59, 0x95, 0x70, 0x5b, 0x29, 0x1b, 0x95,
	0x4b, 0x84, 0xd4, 0x84, 0x16, 0x71, 0x46, 0xdd, 0x95, 0x40, 0x1c, 0x40, 0x28, 0xed, 0x89, 0x4b,
	0xe4, 0x8d, 0x4d, 0x6a, 0x51, 0xdb, 0x91, 0xed, 0x45, 0xe5, 0x2d, 0xfa, 0x10, 0x48, 0x20, 0xce,
	0x3c, 0x44, 0x8f, 0x15, 0x27, 0x4e, 0x14, 0xed, 0xbe, 0x08, 0x8a, 0xe3, 0x2c, 0x7b, 0x41, 0x55,
	0x0f, 0x9c, 0x92, 0x99, 0xf9, 0xe6, 0x9b, 0xcf, 0xfe, 0x46, 0x06, 0x8f, 0x38, 0x16, 0x46, 0xe1,
	0xf2, 0x0c, 0x33, 0x91, 0x61, 0xa6, 0x88, 0x92, 0x75, 0xf6, 0xe1, 0x70, 0x46, 0x0d, 0x3e, 0xcc,
	0x4a, 0xcc, 0x6b, 0xcc, 0x2a, 0x91, 0xd6, 0x4a, 0x1a, 0x09, 0xf7, 0xd6, 0xb0, 0xa9, 0xc3, 0xa6,
	0x0e, 0xbb, 0x1b, 0x95, 0x52, 0x73, 0xa9, 0xb3, 0x19, 0xd6, 0xf4, 0x0f, 0x81, 0x64, 0xae, 0x79,
	0x77, 0xa7, 0xad, 0x17, 0x36, 0xca, 0xda, 0xc0, 0x95, 0xb6, 0x2b, 0x59, 0xc9, 0x36, 0xdf, 0xfc,
	0xb9, 0xec, 0xb8, 0x92, 0xb2, 0x3a, 0xa7, 0x99, 0x8d, 0x66, 0xf3, 0x77, 0x99, 0x61, 0x9c, 0x6a,
	0x83, 0x79, 0xdd, 0x02, 0xf6, 0x3f, 0x0f, 0x40, 0x30, 0x75, 0x0a, 0xe1, 0x36, 0xd8, 0x64, 0x82,
	0xd0, 0x0b, 0xe4, 0xc5, 0x5e, 0x32, 0xca, 0xdb, 0x00, 0xfe, 0x0f, 0xfa, 0x8c, 0xa0, 0x7e, 0xec,
	0x25, 0x83, 0xbc, 0xcf, 0x08, 0x84, 0x60, 0x20, 0x30, 0xa7, 0x68, 0x23, 0xf6, 0x92, 0x61, 0x6e,
	0xff, 0x61, 0x0c, 0x42, 0x42, 0x75, 0xa9, 0x58, 0x6d, 0x98, 0x14, 0x68, 0x60, 0x4b, 0xeb, 0x29,
	0x38, 0x05, 0x40, 0x1b, 0xac, 0x4c, 0xd1, 0x28, 0x40, 0x9b, 0xb1, 0x97, 0x84, 0x47, 0xbb, 0x69,
	0x2b, 0x2f, 0xed, 0xe4, 0xa5, 0xa7, 0x9d, 0xbc, 0x49, 0x70, 0xf5, 0x73, 0xdc, 0xbb, 0xbc, 0x19,
	0x7b, 0xf9, 0xd0, 0xf6, 0x35, 0x15, 0xf8, 0x0c, 0x04, 0x54, 0x90, 0x96, 0x62, 0xeb, 0x0e, 0x14,
	0x3e, 0x15, 0xc4, 0x12, 0x3c, 0x00, 0x3e, 0x37, 0x85, 0x92, 0xd2, 0x20, 0xdf, 0x9e, 0x71, 0x8b,
	0x9b, 0x5c, 0x4a, 0x03, 0x29, 0xf0, 0x31, 0x97, 0x73, 0x61, 0x34, 0x0a, 0xe2, 0x8d, 0x24, 0x3c,
	0xda, 0x49, 0xdd, 0xf5, 0x36, 0x5e, 0x74, 0x06, 0xa5, 0x53, 0xc9, 0xc4, 0xe4, 0x71, 0xc3, 0xfb,
	0xf5, 0x66, 0x9c, 0x54, 0xcc, 0x9c, 0xcd, 0x67, 0x69, 0x29, 0xb9, 0xf3, 0xc2, 0x7d, 0x0e, 0x34,
	0x79, 0x9f, 0x99, 0x8f, 0x35, 0xd5, 0xb6, 0x41, 0xe7, 0x1d, 0x37, 0xdc, 0x03, 0x43, 0xa6, 0x8b,
	0x1a, 0xcf, 0x35, 0x25, 0x68, 0x18, 0x7b, 0x49, 0x90, 0x07, 0x4c, 0xbf, 0xb1, 0x31, 0x7c, 0x08,
	0xfe, 0x63, 0xba, 0x30, 0x54, 0x71, 0x26, 0xb0, 0xa1, 0x04, 0x01, 0x0b, 0x18, 0x31, 0x7d, 0xba,
	0xca, 0xc1, 0x29, 0xb8, 0xdf, 0x6d, 0x54, 0x81, 0x09, 0x51, 0x54, 0x6b, 0x14, 0x36, 0xd7, 0x3d,
	0x41, 0xdf, 0xbf, 0x1d, 0x6c, 0x3b, 0xd1, 0xc7, 0x6d, 0xe5, 0xc4, 0x28, 0x26, 0xaa, 0xfc, 0x5e,
	0xd7, 0xe1, 0xd2, 0xf0, 0x08, 0xf8, 0xa5, 0xa2, 0xd8, 0x48, 0x85, 0x46, 0xb7, 0xf4, 0x76, 0xc0,
	0xfd, 0x4f, 0x7d, 0xe0, 0x4f, 0xcf, 0x31, 0xe3, 0x94, 0xfc, 0x65, 0x51, 0xc6, 0x20, 0x5c, 0x49,
	0x5b, 0x6d, 0x0c, 0xe8, 0x52, 0x2f, 0x49, 0x33, 0xb6, 0x93, 0xbc, 0x71, 0xdb, 0x58, 0x07, 0x84,
	0x2f, 0xc0, 0xa8, 0x6c, 0xa7, 0xb6, 0xb6, 0x0f, 0xee, 0x60, 0x7b, 0xe8, 0x3a, 0xad, 0xf5, 0x6b,
	0x0e, 0x6f, 0xfe, 0x3b, 0x87, 0x27, 0x27, 0x5f, 0x16, 0x91, 0x77, 0xb5, 0x88, 0xbc, 0xeb, 0x45,
	0xe4, 0xfd, 0x5a, 0x44, 0xde, 0xe5, 0x32, 0xea, 0x5d, 0x2f, 0xa3, 0xde, 0x8f, 0x65, 0xd4, 0x7b,
	0xfb, 0x74, 0x8d, 0xf0, 0xd5, 0xf1, 0xeb, 0xd3, 0xfc, 0xf8, 0xe0, 0x39, 0x13, 0x58, 0x94, 0x34,
	0x5b, 0x7f, 0x43, 0x2e, 0x56, 0xaf, 0x88, 0x9d, 0x31, 0xdb, 0xb2, 0xc7, 0x7c, 0xf2, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x8f, 0xaf, 0xb3, 0x69, 0x69, 0x04, 0x00, 0x00,
}

func (this *Campaign) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Campaign)
	if !ok {
		that2, ok := that.(Campaign)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if !bytes.Equal(this.MtRoot, that1.MtRoot) {
		return false
	}
	if len(this.Amounts) != len(that1.Amounts) {
		return false
	}
	for i := range this.Amounts {
		if !this.Amounts[i].Equal(&that1.Amounts[i]) {
			return false
		}
	}
	if this.IsPaused != that1.IsPaused {
		return false
	}
	if this.IsTerminated != that1.IsTerminated {
		return false
	}
	if this.CampaignAddress != that1.CampaignAddress {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	return true
}
func (this *Claimed) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Claimed)
	if !ok {
		that2, ok := that.(Claimed)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Index, that1.Index) {
		return false
	}
	if this.CampaignId != that1.CampaignId {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.ClaimedTime.Equal(that1.ClaimedTime) {
		return false
	}
	if len(this.Amounts) != len(that1.Amounts) {
		return false
	}
	for i := range this.Amounts {
		if !this.Amounts[i].Equal(&that1.Amounts[i]) {
			return false
		}
	}
	return true
}
func (m *Campaign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Campaign) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Campaign) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.CampaignAddress) > 0 {
		i -= len(m.CampaignAddress)
		copy(dAtA[i:], m.CampaignAddress)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.CampaignAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsTerminated {
		i--
		if m.IsTerminated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.IsPaused {
		i--
		if m.IsPaused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampaign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.MtRoot) > 0 {
		i -= len(m.MtRoot)
		copy(dAtA[i:], m.MtRoot)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.MtRoot)))
		i--
		dAtA[i] = 0x3a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCampaign(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCampaign(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCampaign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ClaimedTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClaimedTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintCampaign(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CampaignId != 0 {
		i = encodeVarintCampaign(dAtA, i, uint64(m.CampaignId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCampaign(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCampaign(dAtA []byte, offset int, v uint64) int {
	offset -= sovCampaign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Campaign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCampaign(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovCampaign(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovCampaign(uint64(l))
	l = len(m.MtRoot)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	if m.IsPaused {
		n += 2
	}
	if m.IsTerminated {
		n += 2
	}
	l = len(m.CampaignAddress)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	return n
}

func (m *Claimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	if m.CampaignId != 0 {
		n += 1 + sovCampaign(uint64(m.CampaignId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCampaign(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClaimedTime)
	n += 1 + l + sovCampaign(uint64(l))
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovCampaign(uint64(l))
		}
	}
	return n
}

func sovCampaign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCampaign(x uint64) (n int) {
	return sovCampaign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Campaign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Campaign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Campaign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MtRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MtRoot = append(m.MtRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MtRoot == nil {
				m.MtRoot = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPaused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPaused = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTerminated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTerminated = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CampaignAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CampaignId", wireType)
			}
			m.CampaignId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CampaignId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ClaimedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCampaign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCampaign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCampaign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCampaign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCampaign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCampaign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCampaign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCampaign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCampaign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCampaign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCampaign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCampaign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCampaign = fmt.Errorf("proto: unexpected end of group")
)
